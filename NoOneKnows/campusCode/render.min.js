/* Jison generated parser */
registerNamespace("InfoPlus.Dynamics.Parser");

InfoPlus.Dynamics.Parser.Expression = (function () {

    /* 为了兼容ie8增加了以下两段代码 by yech */
    if (!Object.create) {
        Object.create = (function(){
            function F(){}
            return function(o){
                F.prototype = o;
                return new F()
            }
        })()
    }
    if (typeof Object.getPrototypeOf !== "function"){
        Object.getPrototypeOf = "".__proto__ === String.prototype
            ? function (object) {
                return object.__proto__;
            }
            : function (object) {
                // May break if the constructor has been tampered with
                return object.constructor.prototype;
            };
    }
    /* 以上代码为增加出来的内容，并非jison产生的，版本升级时需要复制*/

    var o = function (k, v, o, l) {
            for (o = o || {}, l = k.length; l--; o[k[l]] = v) ;
            return o;
        }, $V0 = [1, 3], $V1 = [1, 8], $V2 = [1, 12], $V3 = [1, 16], $V4 = [1, 15], $V5 = [1, 17], $V6 = [1, 13],
        $V7 = [1, 14], $V8 = [1, 19], $V9 = [1, 20], $Va = [1, 21], $Vb = [1, 22], $Vc = [1, 23], $Vd = [1, 24],
        $Ve = [1, 25], $Vf = [1, 26], $Vg = [1, 27], $Vh = [1, 28], $Vi = [1, 29], $Vj = [1, 30], $Vk = [1, 31],
        $Vl = [5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 41, 43], $Vm = [1, 37], $Vn = [1, 57],
        $Vo = [1, 58], $Vp = [5, 6, 7, 25, 41, 43], $Vq = [5, 6, 7, 9, 10, 11, 12, 13, 14, 25, 41, 43],
        $Vr = [5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 25, 41, 43],
        $Vs = [5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 39, 41, 42, 43], $Vt = [25, 41];
    var parser = {
        trace: function trace() {
        },
        yy: {},
        symbols_: {
            "error": 2,
            "expressions": 3,
            "expression": 4,
            "EOF": 5,
            "||": 6,
            "&&": 7,
            "!": 8,
            ">": 9,
            "<": 10,
            "==": 11,
            ">=": 12,
            "<=": 13,
            "!=": 14,
            "+": 15,
            "-": 16,
            "*": 17,
            "/": 18,
            "%": 19,
            "literal": 20,
            "parenthesis": 21,
            "references": 22,
            "functionCall": 23,
            "PARENTHESIS": 24,
            "CLOSE_PARENTHESIS": 25,
            "string": 26,
            "number": 27,
            "bool": 28,
            "NUMBER": 29,
            "STRING": 30,
            "BOOL": 31,
            "DOLLAR": 32,
            "ID": 33,
            "attributes": 34,
            "attribute": 35,
            "method": 36,
            "index": 37,
            "property": 38,
            "DOT": 39,
            "params": 40,
            "COMMA": 41,
            "BRACKET": 42,
            "CLOSE_BRACKET": 43,
            "$accept": 0,
            "$end": 1
        },
        terminals_: {
            2: "error",
            5: "EOF",
            6: "||",
            7: "&&",
            8: "!",
            9: ">",
            10: "<",
            11: "==",
            12: ">=",
            13: "<=",
            14: "!=",
            15: "+",
            16: "-",
            17: "*",
            18: "/",
            19: "%",
            24: "PARENTHESIS",
            25: "CLOSE_PARENTHESIS",
            29: "NUMBER",
            30: "STRING",
            31: "BOOL",
            32: "DOLLAR",
            33: "ID",
            39: "DOT",
            41: "COMMA",
            42: "BRACKET",
            43: "CLOSE_BRACKET"
        },
        productions_: [0, [3, 2], [4, 3], [4, 3], [4, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 1], [4, 1], [4, 1], [4, 1], [4, 2], [21, 3], [20, 1], [20, 1], [20, 1], [27, 1], [27, 2], [26, 1], [28, 1], [22, 3], [22, 2], [34, 1], [34, 2], [35, 1], [35, 1], [35, 1], [36, 2], [23, 4], [23, 3], [40, 1], [40, 3], [38, 2], [37, 3]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return $$[$0 - 1];
                    break;
                case 2:
                case 3:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                    this.$ = { type: 'expression', expression: [$$[$0 - 2], $$[$0]], operator: $$[$0 - 1] };
                    break;
                case 4:
                    this.$ = { type: 'expression', expression: [$$[$0]], operator: 'not' };
                    break;
                case 16:
                case 17:
                case 18:
                case 25:
                case 27:
                case 28:
                case 36:
                case 41:
                    this.$ = $$[$0];
                    break;
                case 19:
                    this.$ = { type: 'functionCall', id: $$[$0].id, args: $$[$0].args };
                    break;
                case 20:
                    this.$ = { type: 'expression', expression: [$$[$0]], operator: 'minus' };
                    break;
                case 21:
                    this.$ = { type: 'expression', expression: [$$[$0 - 1]], operator: 'parenthesis' };
                    break;
                case 22:
                    this.$ = { type: 'string', value: $$[$0] };
                    break;
                case 23:
                    this.$ = { type: 'number', value: $$[$0] };
                    break;
                case 24:
                    this.$ = { type: 'bool', value: $$[$0] };
                    break;
                case 26:
                    this.$ = '-' + $$[$0];
                    break;
                case 29:
                    this.$ = { type: 'references', id: $$[$0 - 1], path: $$[$0] };
                    break;
                case 30:
                    this.$ = { type: 'references', id: $$[$0] };
                    break;
                case 31:
                case 39:
                    this.$ = [$$[$0]];
                    break;
                case 32:
                    this.$ = [].concat($$[$0 - 1], $$[$0]);
                    break;
                case 33:
                    this.$ = { type: 'method', id: $$[$0].id, args: $$[$0].args };
                    break;
                case 34:
                    this.$ = { type: 'index', id: $$[$0] };
                    break;
                case 35:
                    this.$ = { type: 'property', id: $$[$0] };
                    break;
                case 37:
                    this.$ = { id: $$[$0 - 3], args: $$[$0 - 1] };
                    break;
                case 38:
                    this.$ = { id: $$[$0 - 2], args: undefined };
                    break;
                case 40:
                    this.$ = [].concat($$[$0 - 2], $$[$0]);
                    break;
                case 42:
                    this.$ = $$[$0 - 1];
                    break;
            }
        },
        table: [{
            3: 1,
            4: 2,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, { 1: [3] }, {
            5: [1, 18],
            6: $V8,
            7: $V9,
            9: $Va,
            10: $Vb,
            11: $Vc,
            12: $Vd,
            13: $Ve,
            14: $Vf,
            15: $Vg,
            16: $Vh,
            17: $Vi,
            18: $Vj,
            19: $Vk
        }, {
            4: 32,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, o($Vl, [2, 16]), o($Vl, [2, 17]), o($Vl, [2, 18]), o($Vl, [2, 19]), {
            21: 33,
            24: $V2,
            29: [1, 34]
        }, o($Vl, [2, 22]), o($Vl, [2, 23]), o($Vl, [2, 24]), {
            4: 35,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, { 33: [1, 36] }, { 24: $Vm }, o($Vl, [2, 27]), o($Vl, [2, 25]), o($Vl, [2, 28]), { 1: [2, 1] }, {
            4: 38,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, {
            4: 39,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, {
            4: 40,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, {
            4: 41,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, {
            4: 42,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, {
            4: 43,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, {
            4: 44,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, {
            4: 45,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, {
            4: 46,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, {
            4: 47,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, {
            4: 48,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, {
            4: 49,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, {
            4: 50,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, o($Vl, [2, 4]), o($Vl, [2, 20]), o($Vl, [2, 26]), {
            6: $V8,
            7: $V9,
            9: $Va,
            10: $Vb,
            11: $Vc,
            12: $Vd,
            13: $Ve,
            14: $Vf,
            15: $Vg,
            16: $Vh,
            17: $Vi,
            18: $Vj,
            19: $Vk,
            25: [1, 51]
        }, o($Vl, [2, 30], { 34: 52, 35: 53, 36: 54, 37: 55, 38: 56, 39: $Vn, 42: $Vo }), {
            4: 61,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            25: [1, 60],
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7,
            40: 59
        }, o($Vp, [2, 2], {
            9: $Va,
            10: $Vb,
            11: $Vc,
            12: $Vd,
            13: $Ve,
            14: $Vf,
            15: $Vg,
            16: $Vh,
            17: $Vi,
            18: $Vj,
            19: $Vk
        }), o($Vp, [2, 3], {
            9: $Va,
            10: $Vb,
            11: $Vc,
            12: $Vd,
            13: $Ve,
            14: $Vf,
            15: $Vg,
            16: $Vh,
            17: $Vi,
            18: $Vj,
            19: $Vk
        }), o($Vq, [2, 5], { 15: $Vg, 16: $Vh, 17: $Vi, 18: $Vj, 19: $Vk }), o($Vq, [2, 6], {
            15: $Vg,
            16: $Vh,
            17: $Vi,
            18: $Vj,
            19: $Vk
        }), o($Vq, [2, 7], { 15: $Vg, 16: $Vh, 17: $Vi, 18: $Vj, 19: $Vk }), o($Vq, [2, 8], {
            15: $Vg,
            16: $Vh,
            17: $Vi,
            18: $Vj,
            19: $Vk
        }), o($Vq, [2, 9], { 15: $Vg, 16: $Vh, 17: $Vi, 18: $Vj, 19: $Vk }), o($Vq, [2, 10], {
            15: $Vg,
            16: $Vh,
            17: $Vi,
            18: $Vj,
            19: $Vk
        }), o($Vr, [2, 11], { 17: $Vi, 18: $Vj, 19: $Vk }), o($Vr, [2, 12], {
            17: $Vi,
            18: $Vj,
            19: $Vk
        }), o($Vl, [2, 13]), o($Vl, [2, 14]), o($Vl, [2, 15]), o($Vl, [2, 21]), o($Vl, [2, 29], {
            36: 54,
            37: 55,
            38: 56,
            35: 62,
            39: $Vn,
            42: $Vo
        }), o($Vs, [2, 31]), o($Vs, [2, 33]), o($Vs, [2, 34]), o($Vs, [2, 35]), { 23: 63, 33: [1, 64] }, {
            4: 65,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, { 25: [1, 66], 41: [1, 67] }, o($Vs, [2, 38]), o($Vt, [2, 39], {
            6: $V8,
            7: $V9,
            9: $Va,
            10: $Vb,
            11: $Vc,
            12: $Vd,
            13: $Ve,
            14: $Vf,
            15: $Vg,
            16: $Vh,
            17: $Vi,
            18: $Vj,
            19: $Vk
        }), o($Vs, [2, 32]), o($Vs, [2, 36]), o($Vs, [2, 41], { 24: $Vm }), {
            6: $V8,
            7: $V9,
            9: $Va,
            10: $Vb,
            11: $Vc,
            12: $Vd,
            13: $Ve,
            14: $Vf,
            15: $Vg,
            16: $Vh,
            17: $Vi,
            18: $Vj,
            19: $Vk,
            43: [1, 68]
        }, o($Vs, [2, 37]), {
            4: 69,
            8: $V0,
            16: $V1,
            20: 4,
            21: 5,
            22: 6,
            23: 7,
            24: $V2,
            26: 9,
            27: 10,
            28: 11,
            29: $V3,
            30: $V4,
            31: $V5,
            32: $V6,
            33: $V7
        }, o($Vs, [2, 42]), o($Vt, [2, 40], {
            6: $V8,
            7: $V9,
            9: $Va,
            10: $Vb,
            11: $Vc,
            12: $Vd,
            13: $Ve,
            14: $Vf,
            15: $Vg,
            16: $Vh,
            17: $Vi,
            18: $Vj,
            19: $Vk
        })],
        defaultActions: { 18: [2, 1] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '',
                yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }

            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }

            _token_stack:
                var lex = function () {
                    var token;
                    token = lexer.lex() || EOF;
                    if (typeof token !== 'number') {
                        token = self.symbols_[token] || token;
                    }
                    return token;
                };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            sharedState.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }
    };
    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = ({

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

// resets the lexer, sets new input
            setInput: function (input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

// consumes and returns one char from the input
            input: function () {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

// unshifts one char (or a string) into the input
            unput: function (ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                        + oldLines[oldLines.length - lines.length].length - lines[0].length :
                        this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

// When called from action, caches matched text and appends it on next action
            more: function () {
                this._more = true;
                return this;
            },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function () {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });

                }
                return this;
            },

// retain first n characters of the match
            less: function (n) {
                this.unput(this.match.slice(n));
            },

// displays already matched input, i.e. for error messages
            pastInput: function () {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

// displays upcoming input, i.e. for error messages
            upcomingInput: function () {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

// displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function () {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

// test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function (match, indexed_rule) {
                var token,
                    lines,
                    backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                        this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

// return next match in input
            next: function () {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token,
                    match,
                    tempMatch,
                    index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

// return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

// pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

// produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

// alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

// return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: {},
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        this.begin("ref");
                        break;
                    case 1:
                        this.begin("fb");
                        return 33;
                        break;
                    case 2:/* skip whitespace */
                        break;
                    case 3:
                        return 29;
                        break;
                    case 4:
                        return yy_.yytext;
                        break;
                    case 5:
                        return yy_.yytext;
                        break;
                    case 6:
                        return yy_.yytext;
                        break;
                    case 7:
                        return yy_.yytext;
                        break;
                    case 8:
                        return yy_.yytext;
                        break;
                    case 9:
                        return yy_.yytext;
                        break;
                    case 10:
                        return yy_.yytext;
                        break;
                    case 11:
                        return yy_.yytext;
                        break;
                    case 12:
                        return yy_.yytext;
                        break;
                    case 13:
                        return 'EQUAL';
                        break;
                    case 14:
                        return 31;
                        break;
                    case 15:
                        return 31;
                        break;
                    case 16:
                        return 31;
                        break;
                    case 17:
                        yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2).replace(/\\'/g, "'");
                        return 30;
                        break;
                    case 18:
                        yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2).replace(/\\"/g, "\"");
                        return 30;
                        break;
                    case 19:
                        return 32;
                        break;
                    case 20:
                        return 33;
                        break;
                    case 21:
                        return 39;
                        break;
                    case 22:
                        this.popState();
                        return 41;
                        break;
                    case 23:
                        return 41;
                        break;
                    case 24:
                        this.begin("b");
                        return 42;
                        break;
                    case 25:
                        this.popState();
                        return 43;
                        break;
                    case 26:
                        this.begin("func");
                        return 24;
                        break;
                    case 27:
                        return 24;
                        break;
                    case 28:
                        return 25;
                        break;
                    case 29:
                        this.begin("p");
                        return 24;
                        break;
                    case 30:
                        this.popState();
                        return 25;
                        break;
                    case 31:
                        this.popState();
                        this.popState();
                        return 25;
                        break;
                    case 32:
                        this.popState();
                        break;
                    case 33:
                        this.popState();
                        break;
                    case 34:
                        this.popState();
                        return 5;
                        break;
                    case 35:
                        return 5;
                        break;
                }
            },
            rules: [/^(?:[.]*?(?=\$))/, /^(?:[a-zA-Z][a-zA-Z_]*?(?=\())/, /^(?:\s+)/, /^(?:[0-9]+(\.[0-9]+)?\b)/, /^(?:[%\+\-\*/])/, /^(?:<=)/, /^(?:>=)/, /^(?:[><])/, /^(?:==)/, /^(?:\|\|)/, /^(?:&&)/, /^(?:!=)/, /^(?:!)/, /^(?:=)/, /^(?:null\b)/, /^(?:false\b)/, /^(?:true\b)/, /^(?:'(\\'|[^\'])*')/, /^(?:"(\\"|[^\"])*")/, /^(?:\$(?=[a-zA-Z_]))/, /^(?:[_a-zA-Z][a-zA-Z0-9_]*)/, /^(?:\.)/, /^(?:,[ ]*)/, /^(?:,[ ]*)/, /^(?:\[)/, /^(?:\])/, /^(?:\()/, /^(?:\()/, /^(?:\))/, /^(?:\()/, /^(?:\))/, /^(?:\))/, /^(?:\s+)/, /^(?:(?=.))/, /^(?:$)/, /^(?:$)/],
            conditions: {
                "ref": { "rules": [4, 19, 20, 21, 22, 24, 29, 32, 33, 34], "inclusive": false },
                "b": { "rules": [0, 1, 2, 3, 4, 17, 18, 24, 25, 27, 28], "inclusive": false },
                "p": {
                    "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 29, 30],
                    "inclusive": false
                },
                "func": {
                    "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 29, 31, 34],
                    "inclusive": false
                },
                "fb": { "rules": [26], "inclusive": false },
                "INITIAL": {
                    "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 27, 28, 35],
                    "inclusive": true
                }
            }
        });
        return lexer;
    })();
    parser.lexer = lexer;

    function Parser() {
        this.yy = {};
    }

    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();

registerNamespace("InfoPlus.Dynamics.Parser");

InfoPlus.Dynamics.Parser.Compile = function (asts, functions) {
    this.asts = asts;
    this.functions = functions || InfoPlus.Dynamics.Functions;
};

InfoPlus.Dynamics.Parser.Compile.prototype = {
    asts: null,
    context: null,

    evaluate: function (context, targetObject) {
        this.context = (context !== undefined) ? context : {};
        if (targetObject !== undefined) {
            this.targetObject = targetObject;
        }
        try {
            return this.getExpression(this.asts);
        } catch (err) {
            var txt = "Error occur while evaluating the dynamic expression.\n\n";
            txt += "Error description: " + err.message + "\n\n";
            txt += "Click OK to continue.\n\n";
            alert(txt);
        }
        return null;
    },

    getReferenceNameArray: function () {
        this.references = {};
        this.getRef(this.asts);
        var ret = [];
        for (var key in this.references) {
            if (this.references.hasOwnProperty(key)) {
                ret.push(key);
            }
        }
        return ret;
    },

    getRef: function (ast) {
        var exp = ast.expression;
        var type = ast.type;
        if (type === 'expression') {
            switch (ast.operator) {
                case '+':
                case '-':
                case '/':
                case '%':
                case '*':
                case '||':
                case '&&':
                case '>':
                case '<':
                case '==':
                case '>=':
                case '<=':
                case '!=':
                    this.getRef(exp[0]);
                    this.getRef(exp[1]);
                    break;
                case 'minus':
                case 'not':
                case 'parenthesis':
                    this.getRef(exp[0]);
                    break;
                default:
            }
        } else if (type === 'references') {
            if (this.references[ast.id] === undefined) {
                this.references[ast.id] = null;
            }
            if (ast.path !== undefined) {
                for (var i = 0; i < ast.path.length; i++) {
                    var property = ast.path[i];
                    if (property.type === 'index') {
                        var indexAst = property.id;
                        if (indexAst.type === 'references') {
                            this.getRef(indexAst);
                        }
                    } else if (property.type === 'method') {
                        if (property.args !== undefined) {
                            for (var argIndex = 0; argIndex < property.args.length; argIndex++) {
                                var arg = property.args[argIndex];
                                if (arg.type === 'references') {
                                    this.getRef(arg);
                                }
                            }
                        }
                    }
                }
            }
        } else if (type === 'functionCall') {
            if (ast.args !== undefined) {
                for (var j = 0; j < ast.args.length; j++) {
                    this.getRef(ast.args[j]);
                }
            }
        }
    },

    isArray: function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
    },

    getArrayExpression: function (expression1, expression2, operator) {
        var ret = [], i, len;


        if (this.isArray(expression1)) {
            if (this.isArray(expression2)) {
                len = Math.min(expression1.length, expression2.length);
                for (i = 0; i < len; i++) {
                    ret[i] = this.getArrayExpression(expression1[i], expression2[i], operator);
                }
            } else {
                for (i = 0, len = expression1.length; i < len; i++) {
                    ret[i] = this.getArrayExpression(expression1[i], expression2, operator);
                }
            }
        } else {
            if (this.isArray(expression2)) {
                for (i = 0, len = expression2.length; i < len; i++) {
                    ret[i] = this.getArrayExpression(expression1, expression2[i], operator);
                }
            } else {
                ret = this.getExpressByValue(expression1, expression2, operator);
            }
        }

        return ret;
    },

    getExpressByValue: function (value1, value2, operator) {
        var ret;
        if (value1 != null && value1.hasOwnProperty('value')) {
            value1 = value1.value;
        }
        if (value2 != null && value2.hasOwnProperty('value')) {
            value2 = value2.value;
        }
        switch (operator) {
            case '+':
                ret = value1 + value2;
                break;
            case '-':
                ret = value1 - value2;
                break;
            case '/':
                ret = value1 / value2;
                break;
            case '%':
                ret = value1 % value2;
                break;
            case '*':
                ret = value1 * value2;
                break;
            case '||':
                ret = value1 || value2;
                break;
            case '&&':
                ret = value1 && value2;
                break;
            case '>':
                ret = value1 > value2;
                break;
            case '<':
                ret = value1 < value2;
                break;
            case '==':
                ret = value1 == value2;
                break;
            case '>=':
                ret = value1 >= value2;
                break;
            case '<=':
                ret = value1 <= value2;
                break;
            case '!=':
                ret = value1 != value2;
                break;
            case 'minus':
                ret = -value1;
                break;
            case 'not':
                ret = !value1;
                break;
        }
        return ret;
    },

    getExpression: function (ast) {
        var exp = ast.expression;
        var ret;
        switch (ast.type) {
            case 'expression':
                var exp0 = this.getExpression(exp[0]);
                var exp1 = (exp[1] !== undefined) ? this.getExpression(exp[1]) : undefined;

                switch (ast.operator) {
                    case '+':
                    case '-':
                    case '/':
                    case '%':
                    case '*':
                    case '||':
                    case '&&':
                    case '>':
                    case '<':
                    case '==':
                    case '>=':
                    case '<=':
                    case '!=':
                        if (this.isArray(exp0) || this.isArray(exp1)) {
                            ret = this.getArrayExpression(exp0, exp1, ast.operator);
                        } else {
                            ret = this.getExpressByValue(exp0, exp1, ast.operator);
                        }
                        break;
                    case 'minus':
                        if (this.isArray(exp0)) {
                            ret = this.getArrayExpression(exp0, undefined, ast.operator);
                        } else {
                            ret = -exp0;
                        }
                        break;
                    case 'not':
                        if (this.isArray(exp0)) {
                            ret = this.getArrayExpression(exp0, undefined, ast.operator);
                        } else {
                            ret = !exp0;
                        }
                        break;
                    case 'parenthesis':
                        ret = this.getExpression(exp[0]);
                        break;
                    default:
                        return undefined;
                }

                return ret;
            case 'string':
                //解析转义字符
                var v = ast.value;
                if (v != null) {
                    v = v.replace(/\\n/g, '\n').replace(/\\'/g, '\'').replace(/\\"/g, '\"').replace(/\\\\/g, '\\');
                }
                return v;
            case 'number':
                return Number(ast.value);
            case 'bool':
                if (ast.value === "null") {
                    return null;
                } else {
                    return (ast.value === 'true');
                }
            case 'references':
                return this.getReferences(ast);
            case 'functionCall':
                return this.getFunctionCall(ast);
            default:
                return undefined;
        }
    },

    getLiteral: function (literal) {

        var type = literal.type;
        var ret = '';

        if (type === 'string') {
            ret = literal.value;
        } else if (type === 'number') {
            ret = Number(literal.value);
        } else if (type === 'bool') {
            if (literal.value === "null") {
                ret = null;
            } else if (literal.value === 'false') {
                ret = false;
            } else if (literal.value === 'true') {
                ret = true;
            }
        } else {
            return this.getReferences(literal);
        }

        return ret;
    },

    getReferences: function (ast) {
        var context = this.context;
        var ret = context[ast.id];
        if (ast.path !== undefined && ret !== undefined) {
            for (var i = 0; i < ast.path.length; i++) {
                var property = ast.path[i];
                ret = this.getAttributes(property, ret);
                if (ret === undefined) break;
            }
        }
        return ret;
    },

    getAttributes: function (property, baseRef) {
        /**
         * type可以是method, index, property
         */
        var type = property.type;
        var ret;
        var id = property.id;
        if (type === 'method') {
            ret = this.getPropMethod(property, baseRef);
        } else if (type === 'property') {
            if (this.isArray(baseRef)) {
                ret = [];
                for (var i = 0, len = baseRef.length; i < len; i++) {
                    ret[i] = this.getAttributes(property, baseRef[i]);
                }
            } else {
                ret = baseRef[id];
            }
        } else {
            ret = this.getPropIndex(property, baseRef);
        }
        return ret;
    },

    getFunctionCall: function (ast) {

        //var func = this.targetObject === undefined ? this.functions[ast.id] : this.targetObject[ast.id];
        var func,
            globalFunctionCall = false;
        if (this.targetObject === undefined) {
            func = this.functions[ast.id];
            globalFunctionCall = true;
        } else {
            func = this.targetObject[ast.id];
            if (!func || (typeof func !== 'function')) {
                func = this.functions[ast.id];
                globalFunctionCall = true;
            }
        }

        var args = [];

        if (ast.args !== undefined) {
            for (var i = 0; i < ast.args.length; i++) {
                args.push(this.getExpression(ast.args[i]));
            }
        }

        if (func && func.call) {
            if (globalFunctionCall) {
                return func.apply(this.context, args);
            } else {
                return func.apply(this.targetObject, args);
            }
        }

        return undefined;
    },

    getPropMethod: function (property, baseRef) {

        var id = property.id;
        var ret = baseRef[id];
        var args = [];

        if (property.args !== undefined) {
            for (var i = 0; i < property.args.length; i++) {
                //args.push(this.getLiteral(property.args[i]));
                args.push(this.getExpression(property.args[i]));
            }
        }

        if (ret && ret.call) {
            ret = ret.apply(baseRef, args);
        } else {
            ret = undefined;
        }


        return ret;
    },

    getPropIndex: function (property, baseRef) {
        var ast = property.id;
        var key;
        key = this.getExpression(ast);
        /*
         if (ast.type === 'references') {
         key = this.getReferences(ast);
         } else {
         key = ast.value;
         }
         */
        var ret;
        ret = baseRef[key];

        return ret;
    }
};
﻿/**
 * CoreControl
 * @Author yech
 * @Since 2014/01/10
 */

(function (window, undefined) {

    var coreControl = function (control) {
        this.control = control;
    };

    coreControl.TYPE_BOUNDABLE = "boundable";
    coreControl.TYPE_REPEATABLE = "repeatable";
    coreControl.TYPE_VIEW = "view";

    coreControl.prototype = {

        control: null,
        type: coreControl.TYPE_BOUNDABLE,

        getGuid: function () {
            if (this.control == null) return null;
            return this.control.guid;
        },

        getId: function () {
            if (this.control == null) return null;
            return this.control.getId();
        },

        getName: function () {
            if (this.control == null) return null;
            return $(this.control.element).attr("name");
        },

        getPath: function () {
            if (this.control == null) return null;
            return this.control.path;
        },

        setValue: function (value) {
        },

        getValue: function () {
        },

        setStyle: function (name, value) {
        },

        getStyle: function (name) {
            return null;
        },

        registerEvent: function (type, data, handler) {
        },

        unRegisterEvent: function (type, handler) {
        },

        triggerEvent: function (type) {
        },

        validate: function () {
        },

        isReadable: function () {
        },

        isWritable: function () {
        },

        isEditable: function () {
        },

        callMethod: function () {
            if (arguments.length === 0) return;
            var methodName = arguments[0];
            if (typeof this[methodName] === "function") {
                var params = [];
                for (var i = 1, len = arguments.length; i < len; i++) {
                    params.push(arguments[i]);
                }
                this[methodName].apply(this, params);
            }
        },

        //处理Params参数，不支持多参数的动态动作可以调用这个方法处理参数，只取第一个参数，支持多参数的动态无须调用此方法
        //目前仅repeat的readOnly，select，optionList的dataSource支持多参数，其他动态都不支持多参数
        //不过在$IU.isDynamicActionCallWithParams方法里已经过滤过，只有readOnly和dataSource会使用params函数包装参数
        //所以目前需要调用这个方法的只有CoreBoundControl的readOnly
        processDynamicParams: function (params) {
            if (params instanceof InfoPlus.Dynamics.Params) {
                return params.params[0];
            }
            return params;
        }

    };

    define("InfoPlus.Core.CoreControl", coreControl);

})(window);

﻿(function (window, undefined) {

    var coreBoundControl = function (control) {
        this.type = InfoPlus.Core.CoreControl.TYPE_BOUNDABLE;
        InfoPlus.Core.CoreControl.call(this, control);
    };

    coreBoundControl.prototype = $.extend(new InfoPlus.Core.CoreControl(), {
        setValue: function (value) {
            if (this.control == null || !this.control.isWritable()) return;
            if (value != null) {
                //如果是动态公式调用的，attributes会在expando里
                var attributes = value['expando'] || value['attributes'];
                if (value instanceof InfoPlus.Controls.Data.ValuePair) {
                    this.control.setValue(value.value, value.displayValue, $$.params.initializing, attributes);
                    return;
                }
                if (value instanceof InfoPlus.Controls.Data.Uri) {
                    this.control.setValue(value.value);
                    return;
                }
                if (value.hasOwnProperty('value') && value.hasOwnProperty('displayValue')) {
                    this.control.setValue(value.value, value.displayValue, $$.params.initializing, attributes);
                    return;
                }
                if (value.hasOwnProperty('codeId') && value.hasOwnProperty('codeName')) {
                    this.control.setValue(value.codeId, value.codeName, $$.params.initializing, attributes);
                    return;
                }
            }
            this.control.setValue(value);
        },

        getValue: function () {
            if (this.control == null || !this.control.isReadable()) return null;
            return this.control.getValue();
        },

        getAttributes: function () {
            if (this.control == null || !this.control.isReadable()) return null;
            return this.control.getAttributes();
        },

        validate: function () {
            if (this.control == null) return true;
            return $IU.checkControlValidation([this.control], true, true);
        },

        registerEvent: function (type, data, handler) {
            $(this.control.element).on(type, data, handler);
        },

        unRegisterEvent: function (type, handler) {
            $(this.control.element).off(type, handler);
        },

        trigger: function (type) {
            $(this.control.element).trigger(type);
        },

        isReadable: function () {
            return this.control.isReadable();
        },

        isWritable: function () {
            return this.control.isWritable();
        },

        isEditable: function () {
            return this.control.isEditable();
        },

        getDataSource: function () {
            return this.control.getDataSource();
        },

        setStyle: function (name, value) {
            if (this.control == null || !this.control.isReadable()) return;
            this.control.setStyle(name, value);
        },

        getStyle: function (name) {
            if (this.control == null) return null;
            return this.control.getStyle(name);
        },

        setFocus: function () {
            if (this.control == null || !this.control.isReadable()) return;
            this.control.setFocus();
        },

        lostFocus: function () {
            if (this.control == null || !this.control.isReadable()) return;
            this.control.lostFocus();
        },


        /**
         * 设置下拉选项内容
         */
        setOptions: function (items) {
            if (this.control == null) return;
            if (typeof this.control.setOptions === "function") {
                this.control.setOptions(this.control.element, items);
            }
        },

        /**
         * 以下是动态动作
         */
        setParentValue: function (parentValue, fromInit) {
            if (this.control == null || !this.control.isWritable()) return;
            this.control.setParentValue(parentValue, fromInit);
        },

        setDataSource: function (dataSource, fromInit) {
            if (this.control == null) return;
            if (typeof this.control.setDataSource === "function") {
                this.control.setDataSource(dataSource, fromInit);
            }
        },

        visible: function (isVisible, fromInit) {
            if (this.control == null) return;
            this.control.visible(isVisible, fromInit);
        },


        rowVisible: function (isVisible, fromInit) {
            if (this.control == null) return;
            var $row = this.control.getRow();

            if (!$row.is("tr")) {
                if ($row.hasClass("infoplus_view")) {
                    var view = $row.data(InfoPlus.Layout.View.DATA_CONTROL_OBJECT);
                    if (view != null) {
                        view.visible(isVisible, fromInit);
                    }
                } else {
                    if (isVisible) {
                        $row.show().removeData("dynamicInvisible");
                    } else {
                        $row.hide().data("dynamicInvisible", true);
                    }
                }
            } else {
                $IU.processTrRowVisible($row, isVisible, fromInit);
            }
        },

        colVisible: function (isVisible, fromInit) {
            if (this.control == null) return;

            var $controlElement = $(this.control.element),
                $parents = $controlElement.parents(".infoplus_repeatParentElement"),
                repeatTableControl = null;
            //查找第一个RepeatTable
            for (var i = 0, len = $parents.length; i < len; i++) {
                var repeatControl = $($parents[i]).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                if (repeatControl.repeatType === InfoPlus.Repeat.RepeatControl.REPEAT_TYPE_TABLE) {
                    repeatTableControl = repeatControl;
                    break;
                }
            }

            //这部分应该包装到repeatControl对象里，如果设置了隐藏，那么应该在repeatControl里记录一下隐藏起来的列，在创建新行的时候，这些隐藏起来的行应该初始化hide
            //因为等执行动态动作使其隐藏，会有一个先出现后隐藏的动画，会破话画面
            if (repeatTableControl != null) {
                var $td = $($controlElement.parents("td")[0]),
                    index = $td.parent().children("td").index($td);

                if (index !== -1) {
                    repeatTableControl.setColumnVisible(index, isVisible);
                }
            }
        },

        readOnly: function (isReadOnly, fromInit) {
            if (this.control == null || this.control.isReadOnly()) return;
            isReadOnly = this.processDynamicParams(isReadOnly);
            if (isReadOnly) {
                this.control.setReadOnly();
            } else {
                this.control.element.readOnly = false;
                this.control.element.disabled = false;
                $(this.control.element).removeClass($Control.CLASSNAME_READONLY).removeClass("disabled");
            }
            this.control.setDynamicReadOnly(isReadOnly, fromInit);

            this.control.dynamicReadonly = isReadOnly;
        },

        tooltip: function (tooltip) {
            if (this.control == null) return;
            this.control.setTooltip(tooltip);
        }


    });

    define("InfoPlus.Core.CoreBoundControl", coreBoundControl);

})(window);

﻿(function (window, undefined) {

    var coreRepeatControl = function (control) {
        this.type = InfoPlus.Core.CoreControl.TYPE_REPEATABLE;
        InfoPlus.Core.CoreControl.call(this, control);
    };

    coreRepeatControl.prototype = $.extend(new InfoPlus.Core.CoreControl(), {

        getId: function () {
            if (this.control == null) return null;
            return this.control.repeatParentElement.id;
        },

        getName: function () {
            if (this.control == null) return null;
            return $(this.control.repeatParentElement).attr("name");
        },

        setValue: function (value) {
            if (this.control === null) return;
            this.control.setData(value);
        },

        setStyle: function (name, value) {
            $IU.setDynamicStyle(this.control.repeatParentElement, name, value);
        },

        getStyle: function (name) {
            return $IU.getElementStyle(this.control.repeatParentElement, name);
        },

        getValueByParentElement: function (parentElement, repeatPath) {
            var result = {};

            /**
             * 判断comparePath是否以repeatPath开头，如果是代表该控件在该repeat下
             * @param comparePath
             * @returns {boolean}
             */
            var pathSartWithRepeatPath = function (comparePath) {
                return comparePath.substr(0, repeatPath.length) === repeatPath;
            };

            /**
             * 获取控件path相对于repeatPath的path数组，比如当前control的path为"_0_1_2_3",repeatPath为"_0_1",那么结果为["2","3"]
             * @param originPath 控件原来的path
             * @returns {Array}
             */
            var getPathArray = function (originPath) {
                var pathArray = originPath.substr(repeatPath.length).split("_");
                pathArray.splice(0, 1);
                return pathArray;
            };

            /**
             * 转换字段值，如果是ValuePair类型转换成{codeId:,codeName:}
             * @param value
             * @returns {*}
             */
            var convertValue = function (value) {
                if (value instanceof $Controls.Data.Uri) {
                    return value.value;
                }
                if (value instanceof $Controls.Data.ValuePair) {
                    return {
                        codeId: value.value,
                        codeName: value.displayValue
                    };
                }
                return value;

            };

            /**
             * 获取字段名称，去掉前缀field,且首字母小写
             * @param name
             * @returns {string}
             */
            var convertFieldName = function (name) {
                if (name.substr(0, 5).toLowerCase() === 'field') {
                    return name.substr(5, 1).toLowerCase() + name.substring(6);
                } else {
                    return name.substr(0, 1).toLowerCase() + name.substring(1);
                }
            };

            /**
             * 获取组名称，去掉前缀group,且首字母小写
             * @param name
             * @returns {string}
             */
            var convertGroupName = function (name) {
                if (name.substr(0, 5).toLowerCase() === 'group') {
                    return name.substr(5, 1).toLowerCase() + name.substring(6);
                } else {
                    return name.substr(0, 1).toLowerCase() + name.substring(1);
                }
            };

            var initObj = function (obj, groupArray, pathArray) {
                //groups为该字段相对于repeatPath的group数组，例如field的groupArray为["testForm","groupA","groupB"],pathArray为["0","1"]，那么groups为["groupA","groupB"]
                var groups = groupArray.slice(groupArray.length - pathArray.length);
                //以下代码将obj里的group对象按照groups数组以及pathArray构建好(如果原先没构建好的话)
                //以上述例子而言会将obj构建成{a:[{b:[{},{}]}]},并且将obj变量指向b数组中的第二个对象{},并返回
                for (var index = 0, length = groups.length; index < length; index++) {
                    var groupName = convertGroupName(groups[index]),
                        objLen = parseInt(pathArray[index], 10) + 1,
                        groupObj = obj[groupName];
                    if (groupObj == null) {
                        groupObj = [];
                        obj[groupName] = groupObj;
                    }
                    if (groupObj.length < objLen) {
                        var pos = groupObj.length;
                        while (pos < objLen) {
                            groupObj[pos++] = {};
                        }
                    }
                    obj = groupObj[objLen - 1];
                }
                return obj;
            };

            /**
             * 设置obj里fldName对应field的值
             * @param obj           设置对象
             * @param groupArray    field的group数组
             * @param pathArray     该field相对于repeatPath的path数组
             * @param fldName       该field的名字
             * @param value         该field的值
             */
            var setValue = function (obj, groupArray, pathArray, fldName, value) {
                obj = initObj(obj, groupArray, pathArray);
                obj[fldName] = convertValue(value);
            };

            /**
             * 初始化group值
             */
            var setGroup = function (obj, groupArray, pathArray, groupName) {
                obj = initObj(obj, groupArray, pathArray);
                if (obj[groupName] === undefined) {
                    obj[groupName] = [];
                }
            };

            var fields = infoCore.getFields();

            $(parentElement).find("." + $Control.CLASSNAME_CONTROL).each(function () {
                var $element = $(this),
                    path = $element.data($Control.DATA_PATH),
                    fieldName = $element.data($Control.DATA_FIELD),
                    control = $element.data($Control.DATA_CONTROL_OBJECT);
                if (fieldName != null && control != null) {
                    if (pathSartWithRepeatPath(path)) {
                        var field = fields[fieldName],
                            val = control.getValue(),
                            groupArray = field['groupArray'];
                        if (val != null) {
                            if (path === repeatPath) {
                                result[convertFieldName(field.name)] = convertValue(val);
                            } else {
                                setValue(result, groupArray, getPathArray(path), convertFieldName(field.name), val);
                            }
                        }
                    }
                }
            });

            //将没有新增过的重复表或者节添加到result中，应该是个空数组
            $(parentElement).find("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_PARENT_ELEMENT).each(function () {
                var $element = $(this),
                    repeatControl = $element.data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                if (repeatControl != null) {
                    var path = repeatControl.path,
                        groupName = repeatControl.groupName,
                        groupArray = repeatControl.fullGroupName.split("//");
                    //group的groupArray取全路径group后把自己这层删掉
                    groupArray.splice(groupArray.length - 1, 1);
                    if (path === repeatPath) {
                        if (result[convertGroupName(groupName)] === undefined) {
                            result[convertGroupName(groupName)] = [];
                        }
                    } else {
                        setGroup(result, groupArray, getPathArray(path), convertGroupName(groupName));
                    }
                }
            });

            if (repeatPath === this.control.path) {
                result = result[convertGroupName(this.control.groupName)];
                if (result === undefined) {
                    result = [];
                }
            }
            return result;
        },


        getValue: function () {
            if (this.control == null) return null;
            if (this.control.power.readPower === true) {
                return this.getValueByParentElement(this.control.repeatContentParentElement, this.control.path);
            } else {
                return [];
            }
        },

        getAttributes: function () {
            return null;
        },

        validate: function () {
            if (this.control == null) return true;
            var controls = $(this.control.repeatContentParentElement).find("*[class*='validate']").filter($IU.isValidateControlFilter);
            return $IU.checkControlValidation(controls, true, true);
        },

        registerEvent: function (type, data, handler) {
            $(this.control.repeatParentElement).on(type, data, handler);
        },

        unRegisterEvent: function (type, handler) {
            $(this.control.repeatParentElement).off(type, handler);
        },

        trigger: function (type) {
            $(this.control.repeatParentElement).trigger(type);
        },

        isReadable: function () {
            return this.control.power.readPower;
        },

        isWritable: function () {
            return this.control.power.writePower;
        },

        //新增一行或者一节数据
        addRow: function (insertAfterIndex, rowData) {
            var repeatControl = this.control;
            if (repeatControl == null) return;
            if (repeatControl.power.insertPower === false) return;

            if (insertAfterIndex === undefined && rowData === undefined) {
                repeatControl.addRepeat(null, null, true, false, false, false);
                return;
            }

            if (typeof insertAfterIndex === 'object') {
                rowData = insertAfterIndex;
                insertAfterIndex = null;
            } else {
                var insertAfterChild = repeatControl.getRepeatChild(insertAfterIndex);
                if (insertAfterChild != null) {
                    repeatControl.popupMenu.repeatSection = insertAfterChild;
                }
            }
            var index = insertAfterIndex == null ? repeatControl.getRepeatChildren().length : insertAfterIndex + 1;
            repeatControl.addRepeat(null, null, true, false, false, false);

            if (rowData !== undefined) {
                this.setRowData(index, rowData);
            }
        },

        //删除一行数据
        deleteRow: function (index) {
            if (index == null) return;
            var repeatControl = this.control;
            if (repeatControl == null) return;
            if (repeatControl.power.deletePower === false) return;
            var deleteChild = repeatControl.getRepeatChild(index);
            if (deleteChild != null) {
                repeatControl.deleteRepeat(deleteChild, true);
            }
        },

        //设置一行数据
        setRowData: function (index, rowData) {
            if (this.control == null) return;
            var path = this.control.path + "_" + index;
            $IU.setFormData(rowData, path, false);
        },

        //获取一行数据
        getRowData: function (index) {
            if (this.control == null) return null;
            var child = this.control.getRepeatChild(index);
            if (child != null) {
                return this.getValueByParentElement(child, this.control.path + "_" + index);
            }
            return null;
        },

        //移动一行
        moveRow: function (oldIndex, newIndex) {
            if (this.control == null) return;
            var repeatControl = this.control;
            if (repeatControl.power.writePower === false) return;
            repeatControl.moveRow(oldIndex, newIndex);
        },

        //对第columnIndex列排序,sortType=1正序 sortType=2逆序
        sortColumn: function (columnIndex, sortType) {
            if (this.control == null) return;
            this.control.sorter.sortColumn(columnIndex, sortType);
        },

        //获取所有行
        getChildren: function () {
            return this.control.getRepeatChildren();
        },

        /**
         * 以下是动态动作
         */
        //设置重复节表只读，只读情况下不显示新增，删除，不能排序，但如果有detail还是需要显示详细菜单项
        readOnly: function (isReadOnly, fromInit) {
            if (this.control == null) return;
            var repeatControl = this.control;
            repeatControl.readOnly = isReadOnly;
            if (repeatControl.repeatAddLink == null) return;
            if (repeatControl.shouldShowAddLink()) {
                repeatControl.repeatAddLink.showLink();
            } else {
                repeatControl.repeatAddLink.hideLink();
            }
        },

        visible: function (isVisible, fromInit) {
            var $repeat = $(this.control.repeatParentElement);
            if (isVisible) {
                $repeat.show();
            } else {
                $repeat.hide();
            }
        },

        /*
        visible: function (isVisible, fromInit) {
            var $repeat = $(this.control.repeatParentElement),
                $view = $repeat.parents(".infoplus_view");

            var showView = function () {
                if (!$$.MOBILE) return;
                $view.show();
            };

            var hideView = function () {
                if (!$$.MOBILE) return;
                $view.hide();
            };
            //移动端执行重复节表visible动作时，如果发现这个view高度为0了，那么这个view就不显示了(移动端用多加一个view的方式显示宽表格)
            if (isVisible) {
                if (fromInit) {
                    $repeat.show();
                    showView();
                } else {
                    $repeat.show('slow', function () {
                        $repeat.css("overflow", "");
                        showView();
                    });
                }
            } else {
                if (fromInit) {
                    $repeat.hide();
                    $$.visible(function () {
                        if ($view.find("table").first().height() === 0) {
                            hideView();
                        }
                    });
                } else {
                    $repeat.hide('slow', function () {
                        $repeat.css("overflow", "");
                        if ($view.find("table").first().height() === 0) {
                            hideView();
                        }
                    });
                }
            }
        },
        */

        rowVisible: function (isVisible, fromInit) {
            if (this.control == null) return;
            var $row = this.control.getRow();

            if (!$row.is("tr")) {
                if ($row.hasClass("infoplus_view")) {
                    var view = $row.data(InfoPlus.Layout.View.DATA_CONTROL_OBJECT);
                    if (view != null) {
                        view.visible(isVisible, fromInit);
                    }
                } else {
                    if (isVisible) {
                        $row.show().removeData("dynamicInvisible");
                    } else {
                        $row.hide().data("dynamicInvisible", true);
                    }
                }
            } else {
                $IU.processTrRowVisible($row, isVisible, fromInit);
            }
        },

        colVisible: function (isVisible, fromInit) {
            if (this.control == null) return;

            var $controlElement = $(this.control.repeatParentElement),
                $parents = $controlElement.parents(".infoplus_repeatParentElement"),
                repeatTableControl = null;
            //查找第一个RepeatTable
            for (var i = 0, len = $parents.length; i < len; i++) {
                var repeatControl = $($parents[i]).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                if (repeatControl.repeatType === InfoPlus.Repeat.RepeatControl.REPEAT_TYPE_TABLE) {
                    repeatTableControl = repeatControl;
                    break;
                }
            }

            //这部分应该包装到repeatControl对象里，如果设置了隐藏，那么应该在repeatControl里记录一下隐藏起来的列，在创建新行的时候，这些隐藏起来的行应该初始化hide
            //因为等执行动态动作使其隐藏，会有一个先出现后隐藏的动画，会破话画面
            if (repeatTableControl != null) {
                var $td = $($controlElement.parents("td")[0]),
                    index = $td.parent().children("td").index($td);

                if (index !== -1) {
                    repeatTableControl.setColumnVisible(index, isVisible);
                }
            }
        },

        itemVisible: function (isVisible, rowIndex, fromInit) {
            var children = this.control.getRepeatChildren();
            if (rowIndex >= 0 && rowIndex < children.length) {
                var $row = $(children[rowIndex]);
                //当按了新增按钮而增出来一行时，由于现在动态动作在这行显示之前做，那么如果这里设置了不可见，就不需要再显示了
                //设置了itemHide这个标记用于后续判断是否需要真的显示
                if (isVisible === true) {
                    if (fromInit) {
                        $row.show().removeData("dynamicInvisible");
                    } else {
                        $row.show('slow').removeData("dynamicInvisible");
                    }
                } else {
                    $row.hide().data("dynamicInvisible", true);
                    /*
                    if (fromInit) {
                        $row.hide().data("dynamicInvisible", true);
                    } else {
                        $row.hide('slow').data("dynamicInvisible", true);
                    }
                    */
                }
            }
        },

        itemReadOnly: function (isReadOnly, rowIndex, fromInit) {
            var groupName = this.control.fullGroupName;
            var children = this.control.getRepeatChildren();
            if (rowIndex >= 0 && rowIndex < children.length) {
                //设置该行是否只读(只读情况下不能删除)
                var $row = $(children[rowIndex]);
                $row.data("isReadOnly", !!isReadOnly);

                //执行该行中所有控件的readOnly动作
                $row.find(".infoplus_control").each(function () {
                    var control = $(this).data("controlObject");
                    if (control != null) {
                        //只对本层控件执行readOnly，下属重复节表中的控件并不执行
                        if (control.field.groupName === groupName) {
                            $$(control).readOnly(!!isReadOnly, fromInit);
                        }
                    }
                });
            }
        }

    });

    define("InfoPlus.Core.CoreRepeatControl", coreRepeatControl);

})(window);
/**
 * CoreControl
 * @Author yech
 * @Since 2018/11/22
 */

(function (window, undefined) {

    var coreViewControl = function (view) {
        this.type = InfoPlus.Core.CoreControl.TYPE_VIEW;
        InfoPlus.Core.CoreControl.call(this, view);
    };

    coreViewControl.prototype = $.extend(new InfoPlus.Core.CoreControl(), {

        getId: function () {
            if (this.control == null) return null;
            return this.control.element.id;
        },

        getName: function () {
            if (this.control == null) return null;
            return $(this.control.element).attr("name");
        },

        getPath: function () {
            return "";
        },

        setStyle: function (name, value) {
            if (this.control == null) return;
            $IU.setDynamicStyle(this.control.element, name, value);
        },

        getStyle: function (name) {
            if (this.control == null) return null;
            return $IU.getElementStyle(this.control.element, name);
        },

        getValue: function () {
            return null;
        },

        getAttributes: function () {
            return null;
        },

        validate: function () {
            if (this.control == null) return true;
            var controls = $(this.control.element).find("*[class*='validate']").filter($IU.isValidateControlFilter);
            return $IU.checkControlValidation(controls, true, true);
        },

        registerEvent: function (type, data, handler) {
            $(this.control.element).on(type, data, handler);
        },

        unRegisterEvent: function (type, handler) {
            $(this.control.element).off(type, handler);
        },

        trigger: function (type) {
            $(this.control.element).trigger(type);
        },

        /**
         * 以下是动态动作
         */
        visible: function (isVisible, fromInit) {
            if (this.control == null) return;
            this.control.visible(isVisible, fromInit);
        },

        rowVisible: function (isVisible, fromInit) {
            this.visible(isVisible, fromInit);
        },

        readOnly:function(isReadOnly, fromInit){
            if (this.control == null) return;
            //nothing to do
        }

    });

    define("InfoPlus.Core.CoreViewControl", coreViewControl);

})(window);
/**
 * CodeRequest 请求外部代码表
 * Created by yech on 15-3-19.
 */

(function (window, undefined) {
    var codeManager = function () {
    };

    codeManager.prototype = {
        requestMap: {},

        getCodes: function () {
            return $$.entity.codes;
        },

        getCode: function (name) {
            if ($$.entity.codes == null) {
                return null;
            } else {
                return $$.entity.codes[name];
            }
        },

        addRequestCode: function (code, field) {
            if (this.requestMap[code] === undefined) {
                this.requestMap[code] = [field];
            } else {
                var fields = this.requestMap[code];
                if (!$IU.arrayContains(fields, field)) {
                    fields.push(field);
                }
            }
        },

        requestCodes: function () {
            var map = this.requestMap;
            for (var code in map) {
                if (map.hasOwnProperty(code)) {
                    (function (requestCode) {
                        var data = {
                            prefix: '',
                            type: 'Code',
                            code: requestCode,
                            parent: '',
                            isTopLevel: true,
                            pageNo: 0,
                            pageSize: 65534,
                            rand: Math.random() * 999,
                            settings: '{}'
                        };

                        $$.ajax({
                            type: "POST",
                            url: $$.params.formRender.suggestService,
                            data: data,
                            needParse: false,
                            showParseErrMsg: false,
                            showAjaxErrMsg: false,
                            addFormParam: true
                        }).done(function (data) {
                            var codes = $$.entity.codes,
                                codeObject = codes[requestCode];
                            //如果已经有了说明已经请求过了，不必再设置一次setOptions
                            if (codeObject != null && $IU.isArray(codeObject.items) && codeObject.items.length > 0) {
                                return;
                            }

                            var fields = map[requestCode];
                            if ($IU.isArray(fields)) {
                                for (var i = 0, len = fields.length; i < len; i++) {
                                    var field = fields[i];
                                    //将字段名为field的控件都设置options(应该是下拉框或者radioList，如果有不是这两种，由于其没有setOptions方法，所以调用一下也没关系)
                                    $$("&" + field).options(data);
                                }
                            }

                            //写回$$.params.render.entity.codes
                            if (codeObject == null) {
                                codeObject = {};
                                codes[requestCode] = codeObject;
                            }
                            codeObject.items = data.items;

                            if (map.hasOwnProperty(requestCode)) {
                                delete map[requestCode];
                            }

                            //console.log(data);
                        });
                    })(code);
                }
            }
        }
    };

    define("InfoPlus.CodeManager", codeManager);

})(window);
﻿(function ($, window, undefined) {
    var document = window.document;
    var infoCore = function (selector) {
        return new infoCore.fn.init(selector);
    };
    var slice = Array.prototype.slice;

    infoCore.fn = infoCore.prototype = {

        constructor: infoCore,
        selector: "",
        length: 0,

        /**
         * 将core对象转换成数组
         */
        toArray: function () {
            return slice.call(this, 0);
        },

        /**
         * 初始化core对象 返回包装过的core对象，其内容是CoreControl（CoreBoundControl或者CoreRepeatControl或者CoreViewControl）的数组
         * @param selector 选择器，可以是Control,RepeatControl,View,CoreControl或者以上四者的数组，或者是个jquery选择器，其中有所扩展，&fieldName开头的选择器代表选择所有name为fieldName的Control
         * @returns {infoCore}
         */
        init: function (selector) {

            //目前支持直接$$(control)、$$(controlArray)或者$$(selector)来初始化infoCore对象,可能扩展
            if (selector instanceof InfoPlus.Controls.Control) {
                this[0] = new InfoPlus.Core.CoreBoundControl(selector);
                this.length = 1;
                return this;
            }

            if (selector instanceof InfoPlus.Repeat.RepeatControl) {
                this[0] = new InfoPlus.Core.CoreRepeatControl(selector);
                this.length = 1;
                return this;
            }

            if (selector instanceof InfoPlus.Layout.View) {
                this[0] = new InfoPlus.Core.CoreViewControl(selector);
                this.length = 1;
                return this;
            }

            if (selector instanceof InfoPlus.Core.CoreControl) {
                this[0] = selector;
                this.length = 1;
                return this;
            }

            //$$(controlArray)
            if ($.isArray(selector)) {
                var controls = selector,
                    index = 0;
                for (var i = 0, len = controls.length; i < len; i++) {
                    var control = controls[i];
                    if (control instanceof InfoPlus.Controls.Control) {
                        this[index++] = new InfoPlus.Core.CoreBoundControl(control);
                        continue;
                    }
                    if (control instanceof InfoPlus.Repeat.RepeatControl) {
                        this[index++] = new InfoPlus.Core.CoreRepeatControl(control);
                        continue;
                    }
                    if (control instanceof InfoPlus.Layout.View) {
                        this[index++] = new InfoPlus.Core.CoreViewControl(control);
                        continue;
                    }
                    if (control instanceof InfoPlus.Core.CoreControl) {
                        this[index++] = control;
                    }
                }
                this.length = index;
                return this;
            }


            if (typeof selector === "string") {
                //以&开头,代表以control的name作为选择器,特殊处理,此处将其翻译成name属性为xxx或者name属性以xxx_开头
                var reg = /&([a-zA-Z]+[a-zA-Z\d]*)/g;
                selector = selector.replace(reg, "[name='$1'],[name^='$1_']");

                //以*开头，代表以control的类型名称作为选择器
                reg = /\*([a-zA-Z]+[a-zA-Z\d]*)/g;
                selector = selector.replace(reg, ".infoplus_$1Control");
            }

            var $jQueryObj = $(selector);
            if ($jQueryObj.length > 0) {
                index = 0;
                for (i = 0, len = $jQueryObj.length; i < len; i++) {
                    var $element = $($jQueryObj[i]);
                    control = $element.data(InfoPlus.Controls.Control.DATA_CONTROL_OBJECT);
                    if (control !== undefined) {
                        this[index++] = new InfoPlus.Core.CoreBoundControl(control);
                        continue;
                    }
                    var repeatControl = $element.data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                    if (repeatControl !== undefined) {
                        this[index++] = new InfoPlus.Core.CoreRepeatControl(repeatControl);
                        continue;
                    }
                    var viewControl = $element.data(InfoPlus.Layout.View.DATA_CONTROL_OBJECT);
                    if (viewControl !== undefined) {
                        this[index++] = new InfoPlus.Core.CoreViewControl(viewControl);
                    }
                }
                this.length = index;
                this.selector = selector;
            } else {
                this.length = 0;
                this.selector = selector;
            }
            return this;
        },

        /**
         * 对core对象中每个CoreControl执行一次callback
         * @param callback 回调函数
         * @param args callback时候调用的参数
         * @returns {infoCore}
         */
        each: function (callback, args) {
            return infoCore.each(this, callback, args);
        },

        /**
         * 注册事件
         * @param type 事件类型
         * @param data 事件触发时候可以带data，回调函数的第一个参数中的data属性就是该data
         * @param handler 事件处理函数
         * @returns {infoCore}
         */
        on: function (type, data, handler) {
            if (typeof data === "function") {
                handler = data;
                data = undefined;
            }

            if (infoCore.event.isCoreObjectEventTypes(type)) {
                if (this.selector !== "") {
                    infoCore.event.registerCoreObjectEvents(type, this.selector, data, handler);
                } else {
                    this.each(function () {
                        infoCore.event.registerCoreObjectEvents(type, this, data, handler);
                    });
                }
            } else {
                if (this.selector !== "") {
                    infoCore.registerEvents(type, this.selector, false, data, handler);
                } else {
                    //使用control或者control的数组构造的infoCore对象(例如$$(control))
                    this.each(function () {
                        this.callMethod("registerEvent", type, data, handler);
                    });
                }
            }
            return this;

        },

        /**
         * 取消注册事件
         * @param type 事件类型
         * @param handler 事件处理函数
         * @returns {infoCore}
         */
        off: function (type, handler) {
            if (infoCore.event.isCoreObjectEventTypes(type)) {
                if (this.selector !== "") {
                    infoCore.event.unregisterCoreObjectEvents(type, this.selector, handler);
                } else {
                    this.each(function () {
                        infoCore.event.unregisterCoreObjectEvents(type, this, handler);
                    });
                }

            } else {
                if (this.selector !== "") {
                    infoCore.unregisterEvents(type, this.selector, handler);
                } else {
                    this.each(function () {
                        this.callMethod("unregisterEvent", type, handler);
                    });
                }
            }
            return this;
        },

        /**
         * 触发事件，对于有selector的infoCore对象，直接用jquery的trigger方法
         * 对于没有selector的infoCore对象对其中每个CoreControl调用trigger方法(见CoreBoundControl、CoreRepeatControl、CoreViewControl的trigger方法)
         * @param type 事件类型
         * @returns {infoCore}
         */
        trigger: function (type) {
            if (this.selector !== "") {
                $(this.selector).trigger(type);
            } else {
                this.each(function () {
                    this.callMethod("trigger", type);
                });
            }
            return this;
        },

        /**
         * 没参数时取第一个元素值，有参数表示将该infoCore对象中所有CoreControl都设置该值
         * @param value 设置的值
         * @returns {*}
         */
        val: function (value) {
            if (value !== undefined) {
                return this.each(function () {
                    this.setValue(value);
                });
            } else {
                if (this.length > 0) {
                    return this[0].getValue();
                } else {
                    return null;
                }
            }
        },

        /**
         * 取元素的attributes
         */
        attr: function () {
            if (this.length > 0) {
                return this[0].getAttributes();
            } else {
                return null;
            }
        },

        isReadable: function () {
            if (this.length > 0) {
                return this[0].isReadable();
            } else {
                return null;
            }
        },

        isWritable: function () {
            if (this.length > 0) {
                return this[0].isWritable();
            } else {
                return null;
            }
        },

        isEditable: function () {
            if (this.length > 0) {
                return this[0].isEditable();
            } else {
                return null;
            }
        },

        css: function (propertyName, value) {
            //取样式
            if (typeof propertyName === 'string' && value === undefined) {
                if (this.length > 0) {
                    return this[0].getStyle(propertyName);
                } else {
                    return null;
                }
            } else {
                var styles = [];
                //array of object[{name:,value:}]
                if ($IU.isArray(propertyName)) {
                    styles = propertyName;
                } else {
                    if (typeof propertyName === 'object') {
                        var properties = propertyName;
                        if (properties == null) return this;
                        for (var key in properties) {
                            if (properties.hasOwnProperty(key)) {
                                styles.push({ name: key, value: properties[key] });
                            }
                        }
                    } else {
                        if (typeof propertyName === 'string' && typeof value === 'string') {
                            styles.push({ name: propertyName, value: value });
                        }
                    }
                }
                return this.each(function () {
                    for (var i = 0, len = styles.length; i < len; i++) {
                        this.setStyle(styles[i].name, styles[i].value);
                    }
                });
            }
        },

        /**
         * 获取infoCore对象中第一个CoreControl的名字
         */
        getName: function () {
            if (this.length > 0) {
                return this[0].getName();
            } else {
                return null;
            }
        },

        /**
         * 判断本infoCore对象是否包含了control这个CoreControl
         */
        contains: function (control) {
            for (var i = 0; i < this.length; i++) {
                if (this[i].getGuid() === control.getGuid()) {
                    return true;
                }
            }
            return false;
        },

        /**
         * 获取本core对象中第index个CoreControl
         * @param index
         * @returns {*}
         */
        get: function (index) {
            if (this.length > index) {
                return this[index];
            }
            return undefined;
        },

        /**
         * 过滤infoCore对象
         * filterObj可以是object,对应的通过条件就是core对象的key属性为value，通过getKey方法获取key值
         * filterObj也可以是一个过滤函数，返回true代表通过，否则不通过
         * @param filterObj
         * @returns infoCore对象
         */
        filter: function (filterObj) {
            var result = [];
            this.each(function () {
                if (typeof filterObj === 'function') {
                    if (filterObj.call(this) === true) {
                        result.push(this);
                    }
                } else {
                    var shouldPush = true;
                    for (var key in filterObj) {
                        if (filterObj.hasOwnProperty(key)) {
                            var value = filterObj[key],
                                funcName = "get" + key.substring(0, 1).toUpperCase() + key.substring(1),
                                func = this[funcName];
                            if (typeof func === 'function') {
                                if (func.call(this) !== value) {
                                    shouldPush = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (shouldPush) {
                        result.push(this);
                    }
                }
            });
            return infoCore(result);
        },

        /**
         * 验证控件
         * @returns {*}
         */
        validate: function () {
            var checks = [];
            for (var i = 0; i < this.length; i++) {
                var coreControl = this[i];
                if (coreControl instanceof InfoPlus.Core.CoreBoundControl) {
                    checks.push(coreControl.control);
                } else {
                    var controls = $(coreControl.control.repeatContentParentElement).find("*[class*='validate']").filter($IU.isValidateControlFilter);
                    for (var index = 0, len = controls.length; index < len; index++) {
                        checks.push(controls[index]);
                    }
                }
            }
            return $IU.checkControlValidation(checks, true, true);
        }

    };

    infoCore.fn.init.prototype = infoCore.fn;

    /**
     * 此处定义动态动作
     */
    $.extend(infoCore.fn, {

        visible: function (isVisible, fromInit) {
            var $retVal = this.each(function () {
                this.callMethod('visible', isVisible, fromInit);
            });
            if (!fromInit) {
                $IU.updateFormTipsAndViews();
            }
            return $retVal;
        },

        itemVisible: function (isVisible, rowIndex, fromInit) {
            var $retVal = this.each(function () {
                this.callMethod('itemVisible', isVisible, rowIndex, fromInit);
            });
            if (!fromInit) {
                $IU.updateFormTipsAndViews();
            }
            return $retVal;
        },

        rowVisible: function (isVisible, fromInit) {
            var $retVal = this.each(function () {
                this.callMethod('rowVisible', isVisible, fromInit);
            });
            if (!fromInit) {
                $IU.updateFormTipsAndViews();
            }
            return $retVal;
        },

        colVisible: function (isVisible, fromInit) {
            var $retVal = this.each(function () {
                this.callMethod('colVisible', isVisible, fromInit);
            });
            if (!fromInit) {
                $IU.updateFormTipsAndViews();
            }
            return $retVal;
        },

        parentValue: function (parentValue, fromInit) {
            return this.each(function () {
                this.callMethod('setParentValue', parentValue, fromInit);
            });
        },

        dataSource: function (source, fromInit) {
            return this.each(function () {
                this.callMethod('setDataSource', source, fromInit);
            });
        },

        readOnly: function (isReadOnly, fromInit) {
            return this.each(function () {
                this.callMethod('readOnly', isReadOnly, fromInit);
            });
        },

        itemReadOnly: function (isReadOnly, rowIndex, fromInit) {
            return this.each(function () {
                this.callMethod('itemReadOnly', isReadOnly, rowIndex, fromInit);
            });
        },

        tooltip: function (tooltip, fromInit) {
            return this.each(function () {
                this.callMethod('tooltip', tooltip, fromInit);
            });
        }

    });

    /**
     * 此处定义一般方法
     */
    $.extend(infoCore.fn, {
        options: function (data) {
            return this.each(function () {
                this.callMethod('setOptions', data.items);
            });
        }
    });

    /**
     * 注册infoCore全局方法
     */
    $.extend(infoCore, {

        //是否是DEBUG版
        DEBUG: false,

        //是否是移动版
        MOBILE: false,

        //是否是微信版
        WECHAT: navigator.userAgent.match(/MicroMessenger/),

        //是否在微信小程序里
        MINIPROGRAM: navigator.userAgent.match(/miniprogram/i) || window.__wxjs_environment === 'miniprogram',

        //是否是预览页面
        PREVIEW: false,

        //测试文件url
        testFile: null,

        //是否嵌在移动APP内
        APP: navigator.userAgent.match(/TaskCenterApp/),

        //有些参数是全局唯一的，放在infoCore的params属性中，避免各方法再传递参数，这里先初始化一部分，其余参数会在initCore方法中初始化(等待transformer加载完数据后调用initCore，传一些表单相关参数)
        params: {
            renderContainer: $("#div_render_container"),    //renderForm外的那个渲染容器
            renderForm: $("#renderForm"),                   //dom中的form元素，渲染内容都在这个form里
            holder: {
                remark: $("#form_remark_holder"),           //办理历史
                milestone: $("#form_milestone_holder"),     //里程碑
                renderContent: $("#renderContent_holder"),  //渲染容器，在render_holder外层，是milestone_holder,remark_holder,render_holder共同的父亲
                render: $("#render_holder"),                //表单渲染外层
                form: $("#form_holder"),                    //表单渲染内层
                title: $("#title_holder"),                  //标题
                commandHolder: $("#command_holder"),        //标题下的命令栏外层div
                commandBar: $("#form_command_bar")          //标题下的命令栏内层div
            },
            fieldChanging: null,                            //记录正在执行fieldChange
            fieldSyncing: false,                            //是否正在做字段同步
            initControls: [],
            ajax: {
                blockingIds: [],
                blockedCallbacks: []
            },
            rowIndexSuffix: Math.round(Math.random() * 900000 + 100000),
            initializing: true,
            showTutorial: true,
            ids: {                                          //全局ID
                save: "FormCommandSave",
                print: "FormCommandPrint",
                download: "FormCommandDownload",
                admin: "FormCommandAdmin"
            }
        },

        //infoCore.dynamics存放动态样式、动态公式、动态动作
        //styles、formulas、initialFormulas存放字段的样式、change类型公式、init类型公式数组，它们都是以field.name作为key,其内容是该字段所有编译过的样式和公式的数组
        //即styles[field.name] = [compiledStyle], formulas[field.name] = [compiledFormula]，initialFormulas[field.name]=[compiledFormula]
        //referedStyles与referedFormulas存放字段(这些字段是影响别人的字段)影响别的字段(这些是别影响字段)的样式和公式，它们都是以影响字段field.name作为key,内容是编译过的样式和公式数组
        dynamics: {
            styles: {},
            referedStyles: {},
            formulas: {},
            referedFormulas: {},
            initialFormulas: {},
            actions: {},
            referedActions: {},
            validations: {},
            referedValidations: {},
            globalContext: {}
        },


        initVisibility: function () {
            infoCore.visibility = {
                titleBar: !$$.VIEWS_ONLY && !$$.PRINT && !$$.PREVIEW && !$$.APP,
                commandBar: !$$.VIEWS_ONLY && !$$.PRINT && !$$.PREVIEW,
                milestone: !$$.VIEWS_ONLY && !$$.PRINT && !$$.PREVIEW && ($$.params.showRemark !== 'false'),
                remark: !$$.VIEWS_ONLY && !$$.PRINT && !$$.PREVIEW && ($$.params.showRemark !== 'false'),
                floatTool: !$$.VIEWS_ONLY && !$$.PRINT && !$$.PREVIEW && !$$.MOBILE,
                footer: !$$.VIEWS_ONLY && !$$.PRINT && !$$.PREVIEW
            };
        },

        /**
         * 初始化参数,在transformer产生render时候调用,将参数记在infoCore.params对象中
         */
        initCore: function (params) {
            infoCore.params = $.extend(infoCore.params, params);
            infoCore.initVisibility();
            infoCore.codeManager = new InfoPlus.CodeManager();
            infoCore.dynamics['cache'] = new InfoPlus.Dynamics.Cache();
            infoCore.entity = params.formRender.entity;
        },

        setTestFile: function (testFile) {
            infoCore.testFile = testFile;
        },

        getTestFile: function () {
            return infoCore.testFile;
        },

        /**
         *  获取formRender参数
         */
        getFormRender: function () {
            return infoCore.params.formRender;
        },

        /**
         * 注册事件 当只有前两个参数时候代表注册全局事件
         * @param type 事件类型
         * @param selector 事件对象的选择器 如果注册事全局事件，这个参数实际是事件处理方法handler
         * @param once 相同type,相同selector,是否只能注册一个事件处理方法
         * @param data 是否触发事件时候需要附带数据，该参数可以省略
         * @param handler 事件处理方法
         */
        registerEvents: function (type, selector, once, data, handler) {

            if (once === undefined) {
                //当只有前两个参数时候代表注册全局事件
                handler = selector;
                infoCore.event.registerGlobalEvents(type, handler);
            } else {
                if (once === true) {
                    if (infoCore.event.findRegisteredEvent(type, selector) === true) {
                        return;
                    }
                }

                if (typeof data === "function") {
                    handler = data;
                    data = undefined;
                }

                if (infoCore.event.registerSelectorEvents(type, selector, handler)) {
                    //var $holder = $(infoCore.params.formRender.holder);
                    if (data !== undefined) {
                        $$.params.renderForm.on(type, selector, data, handler);
                    } else {
                        $$.params.renderForm.on(type, selector, handler);
                    }
                }
            }

        },

        /**
         * 取消注册事件，如果只有2个参数代表取消注册全局事件
         * @param type 事件类型
         * @param selector 选择器，如果这个参数就是处理函数，那么取消注册全局事件
         * @param handler 事件处理函数
         */
        unregisterEvents: function (type, selector, handler) {
            if (typeof selector === "string") {
                //var $holder = $(infoCore.params.formRender.holder);
                $$.params.renderForm.off(type, selector, handler);
                infoCore.event.unregisterSelectorEvents(type, selector, handler);
            } else {
                handler = (typeof selector === "function") ? selector : undefined;
                infoCore.event.unregisterGlobalEvents(type, handler);
            }
        },

        /**
         * 注册控件事件，在注册前所有的注册参数会设置在control.events数组中
         * @param control
         */
        registerControlEvents: function (control) {
            var events = control.events;
            if (!$.isArray(events)) return;
            if (events.length === 0) return;

            for (var i = 0, len = events.length; i < len; i++) {
                var event = events[i];
                var selector = event.selector !== undefined ? event.selector : "." + InfoPlus.Controls.Control.CLASSNAME_CONTROL + "." + control.getElementClassName();
                infoCore.registerEvents(event.type, selector, true, event.data, event.handler);
            }
        },

        /**
         * 对object所有属性或者数组成员执行callback
         * @param object
         * @param callback
         * @param args
         * @returns {*}
         */
        each: function (object, callback, args) {
            var name,
                i = 0,
                length = object.length,
                isObj = length === undefined || $.isFunction(object);

            if (args) {
                if (isObj) {
                    for (name in object) {
                        if (object.hasOwnProperty(name)) {
                            if (callback.apply(object[name], args) === false) {
                                break;
                            }
                        }
                    }
                } else {
                    for (; i < length;) {
                        if (callback.apply(object[i++], args) === false) {
                            break;
                        }
                    }
                }
            } else {
                if (isObj) {
                    for (name in object) {
                        if (object.hasOwnProperty(name)) {
                            if (callback.call(object[name], name, object[name]) === false) {
                                break;
                            }
                        }
                    }
                } else {
                    for (; i < length;) {
                        if (callback.call(object[i], i, object[i++]) === false) {
                            break;
                        }
                    }
                }
            }

            return object;
        }

    });

    //infoCore event
    infoCore.event = {};
    infoCore.event.GLOBAL_EVENT_BEFORE_RENDER = "beforeRender";
    infoCore.event.GLOBAL_EVENT_READY = "ready";
    infoCore.event.GLOBAL_EVENT_REMARK_READY = "remarkReady";
    infoCore.event.GLOBAL_EVENT_FORM_VISIBLE = "visible";
    infoCore.event.GLOBAL_EVENT_RESIZE = "resize";
    infoCore.event.GLOBAL_EVENT_FIELD_CHANGED = "fieldChanged";
    infoCore.event.GLOBAL_EVENT_FIELD_REFERED = "fieldRefered";
    infoCore.event.GLOBAL_EVENT_ADDING_REPEAT = "addingRepeat";
    infoCore.event.GLOBAL_EVENT_ADDED_REPEAT = "addedRepeat";
    infoCore.event.GLOBAL_EVENT_CANDIDATES_QUERIED = "candidatesQueried";
    infoCore.event.INFOCORE_OBJECT_EVENT_FIELD_CHANGED = "fieldChanged";
    infoCore.event.INFOCORE_OBJECT_EVENT_FIELD_REFERED = "fieldRefered";
    infoCore.event.INFOCORE_OBJECT_EVENT_FIELD_SUGGESTED = "fieldSuggested";
    infoCore.event.INFOCORE_OBJECT_EVENT_ADDING_REPEAT = "addingRepeat";
    infoCore.event.INFOCORE_OBJECT_EVENT_ADDED_REPEAT = "addedRepeat";

    //全局事件标记对象，用于全局事件处理中打标记
    //部分全局事件是一次性调用的（比如表单ready的时候），在调用中会依次运行以前注册的方法，那样可能产生一个时序问题，比如由于异步的原因，注册方法在调用之后执行，那么实际上可能根本没调用到注册的方法
    //全局事件标记对象在调用的时候打上true标记，如果注册方法稍后运行，那么直接调用注册的那个方法就可以了
    infoCore.event.globalEventFlag = {
        ready: false,           //表单是否已经ready
        remarkReady: false,     //办理历史是否已经ready
        visible: false          //表单是否已经可见，如果已经调用过，那么$$.visible(function(){})中的方法应该立即执行
    };

    $.extend(infoCore.event, {

        //目前事件有三种类型
        //1 全局事件 globalEventTypes
        //2 选择器事件 直接在holder上注册该选择器监听事件
        //3 infoCore对象事件 自定义的infoCore对象事件，在特定时机触发
        globalEventTypes: [
            infoCore.event.GLOBAL_EVENT_BEFORE_RENDER,          //表单渲染前触发
            infoCore.event.GLOBAL_EVENT_READY,                  //表单渲染完触发
            infoCore.event.GLOBAL_EVENT_REMARK_READY,           //办理历史加载完后触发
            infoCore.event.GLOBAL_EVENT_FORM_VISIBLE,           //表单可见后触发(表单渲染完后会以fade的方式显示，所以渲染完和完全可见之间还是有个时间差，visible里处理需要判断dom元素高度等可见因素的代码)
            infoCore.event.GLOBAL_EVENT_RESIZE,                 //表单宽度变化时候触发
            infoCore.event.GLOBAL_EVENT_FIELD_CHANGED,          //当有字段引起fieldChange，在所有别的字段change完后触发
            infoCore.event.GLOBAL_EVENT_FIELD_REFERED,          //当有字段引起fieldRefer(动态公式、样式、动作)，在引起别的字段变化或者调用动作结束后触发
            infoCore.event.GLOBAL_EVENT_ADDING_REPEAT,          //当重复节表增加一行数据时候，在显示改行数据前触发
            infoCore.event.GLOBAL_EVENT_ADDED_REPEAT,           //当重复节表增加一行数据时候，在显示改行数据后触发
            infoCore.event.GLOBAL_EVENT_CANDIDATES_QUERIED      //相关用户查询后触发
        ],
        coreObjectEventTypes: [
            infoCore.event.INFOCORE_OBJECT_EVENT_FIELD_CHANGED,     //该infoCore对象里的控件引起fieldChange，在change完后触发
            infoCore.event.INFOCORE_OBJECT_EVENT_FIELD_REFERED,     //该infoCore对象里的控件引起fieldRefer，在引起别的字段变化或者调用动作结束后触发
            infoCore.event.INFOCORE_OBJECT_EVENT_FIELD_SUGGESTED,   //该infoCore对象里的suggester控件发生suggest以后触发
            infoCore.event.INFOCORE_OBJECT_EVENT_ADDING_REPEAT,     //该infoCore对象里的重复节表控件新增一行数据时，在显示改行数据前触发
            infoCore.event.INFOCORE_OBJECT_EVENT_ADDED_REPEAT       //该infoCore对象里的重复节表控件新增一行数据时，在显示改行数据后触发
        ],
        globalEventHandlers: {},//数据结构{type:[handlers]}
        selectorEventHandlers: {},//数据结构{selector:{type:[handlers]}}
        coreObjectEventHandlers: {},//数据结构{type:[{selector:,control:,data:,handler:}]}

        isGlobalEventTypes: function (type) {
            var types = infoCore.event.globalEventTypes;
            for (var i = 0, len = types.length; i < len; i++) {
                if (types[i] === type) {
                    return true;
                }
            }
            return false;
        },

        isCoreObjectEventTypes: function (type) {
            var types = infoCore.event.coreObjectEventTypes;
            for (var i = 0, len = types.length; i < len; i++) {
                if (types[i] === type) {
                    return true;
                }
            }
            return false;
        },

        registerCoreObjectEvents: function (type, selector, data, handler) {
            if (!infoCore.event.isCoreObjectEventTypes(type)) {
                return false;
            }
            var coreObjectEventHandlers = infoCore.event.coreObjectEventHandlers;
            if (coreObjectEventHandlers[type] === undefined) {
                coreObjectEventHandlers[type] = [];
            }

            var control = null;

            if (typeof selector !== "string") {
                control = selector;
                selector = null;
            }

            var handlers = coreObjectEventHandlers[type];
            for (var i = 0, len = handlers.length; i < len; i++) {
                var handlerObj = handlers[i];
                if (handlerObj.handler === handler) {
                    if (control != null) {
                        if (handlerObj.control != null && handlerObj.control.getGuid() === control.getGuid()) {
                            return false;
                        }
                    } else {
                        if (handlerObj.selector != null && handlerObj.selector === selector) {
                            return false;
                        }
                    }
                }
            }
            handlers.push({ control: control, selector: selector, data: data, handler: handler });
            return true;
        },

        unregisterCoreObjectEvents: function (type, selector, handler) {
            var handlers = infoCore.event.coreObjectEventHandlers[type];
            if (handlers === undefined || handlers === null) return;

            if (selector !== undefined && handler !== undefined) {
                var control = null;
                if (typeof selector !== "string") {
                    control = selector;
                    selector = null;
                }
                for (var i = 0, len = handlers.length; i < len; i++) {
                    var handlerObj = handlers[i];
                    if (handlerObj.handler === handler) {
                        if (control != null) {
                            if (handlerObj.control != null && handlerObj.control.getGuid() === control.getGuid()) {
                                handlers.splice(i, 1);
                                return;
                            }
                        } else {
                            if (handlerObj.selector != null && handlerObj.selector === selector) {
                                handlers.splice(i, 1);
                                return;
                            }
                        }
                    }
                }
            } else {
                infoCore.event.coreObjectEventHandlers[type] = [];
            }
        },

        registerGlobalEvents: function (type, handler) {
            if (!infoCore.event.isGlobalEventTypes(type)) {
                return false;
            }

            var globalEventHandlers = infoCore.event.globalEventHandlers;
            if (globalEventHandlers[type] === undefined) {
                globalEventHandlers[type] = [];
            }

            //注册事件时发现该处理方法已经在处理列表中，那么就不再重复注册
            var handlers = globalEventHandlers[type];
            for (var i = 0, len = handlers.length; i < len; i++) {
                if (handlers[i] === handler) {
                    return false;
                }
            }
            handlers.push(handler);
            return true;
        },

        unregisterGlobalEvents: function (type, handler) {
            var handlers = infoCore.event.globalEventHandlers[type];
            if (handlers === undefined || handlers === null) return;

            if (handler !== undefined) {
                for (var i = 0, len = handlers.length; i < len; i++) {
                    if (handlers[i] === handler) {
                        handlers.splice(i, 1);
                        return;
                    }
                }
            } else {
                infoCore.event.globalEventHandlers[type] = [];
            }
        },

        //根据选择器注册事件，如果已经注册过相同的处理方法返回false,否则注册成功返回true
        registerSelectorEvents: function (type, selector, handler) {
            var selectorEventHandlers = infoCore.event.selectorEventHandlers;
            if (selectorEventHandlers[selector] === undefined) {
                selectorEventHandlers[selector] = {};
            }
            if (selectorEventHandlers[selector][type] === undefined) {
                selectorEventHandlers[selector][type] = [];
            }

            //注册事件时发现该处理方法已经在处理列表中，那么就不再重复注册
            var handlers = selectorEventHandlers[selector][type];
            for (var i = 0, len = handlers.length; i < len; i++) {
                if (handlers[i] === handler) {
                    return false;
                }
            }
            handlers.push(handler);
            return true;
        },

        unregisterSelectorEvents: function (type, selector, handler) {
            var handlers = infoCore.event.selectorEventHandlers[selector];
            if (handlers === undefined) return;
            handlers = handlers[type];
            if (handlers === undefined || handlers === null) return;

            if (handler !== undefined) {
                for (var i = 0, len = handlers.length; i < len; i++) {
                    if (handlers[i] === handler) {
                        handlers.splice(i, 1);
                        return;
                    }
                }
            } else {
                infoCore.event.selectorEventHandlers[selector][type] = [];
            }

        },

        findRegisteredEvent: function (type, selector) {
            var selectorEventHandlers = infoCore.event.selectorEventHandlers[selector];
            if (selectorEventHandlers === undefined) return false;
            return selectorEventHandlers[type] !== undefined;
        }


    });

    /**
     * define global event register or call function as shortcut such as $$.ready()
     * 触发使用$$.ready(),$$.fieldChanged(),$$.fieldRefered()
     * 注册使用$$.fieldChanged(function(infoCore){
     *      这里是处理事件代码,触发fieldChanged的控件包在infoCore对象中
     * });
     */
    for (var eventIndex = 0, eventLen = infoCore.event.globalEventTypes.length; eventIndex < eventLen; eventIndex++) {
        infoCore[infoCore.event.globalEventTypes[eventIndex]] = function (type) {
            return function (handler) {
                //第一个参数是方法，说明是注册，否则就是触发全局事件
                if (typeof handler === "function") {
                    //如果已经标记为true，那么立即执行，否则注册(没有这个标记的都不是一次性的事件，不用立即执行，仍旧注册即可)
                    if (infoCore.event.globalEventFlag[type] === true) {
                        handler.apply(window, arguments);
                    } else {
                        infoCore.event.registerGlobalEvents(type, handler);
                    }
                } else {
                    //如果这个全局事件存在这个标记（说明是一次性调用的），则将该标记设成true，使在调用之后才发生的注册能够立即执行
                    if (infoCore.event.globalEventFlag[type] !== undefined) {
                        infoCore.event.globalEventFlag[type] = true;
                    }
                    var handlers = infoCore.event.globalEventHandlers[type];
                    if (handlers === undefined || handlers === null) return;
                    for (var i = 0, len = handlers.length; i < len; i++) {
                        var eventHandler = handlers[i];
                        if (typeof eventHandler === "function") {
                            eventHandler.apply(window, arguments);
                        }
                    }
                }
            };
        }(infoCore.event.globalEventTypes[eventIndex]);
    }

    var coreControlInHandler = function (control, handlerObj) {
        if (handlerObj.selector != null) {
            if ($$(handlerObj.selector).contains(control)) {
                return true;
            }
        }
        if (handlerObj.control != null) {
            if (handlerObj.control.getGuid() === control.getGuid()) {
                return true;
            }
        }
        return false;
    };

    /**
     * define infoCore event register or call function as shortcut such as $$(control).fieldChanged()
     * 触发使用$$(control).fieldChanged(),$$(control).fieldRefered(),$$(control).fieldSuggested(),
     * 注册使用$$(control).fieldChanged(function(){
     *      这里是事件处理代码，this是$$(control)
     * });
     */
    for (eventIndex = 0, eventLen = infoCore.event.coreObjectEventTypes.length; eventIndex < eventLen; eventIndex++) {
        infoCore.fn[infoCore.event.coreObjectEventTypes[eventIndex]] = function (type) {
            return function (handler) {
                var thisCoreObject = this;
                //第一个参数是方法，说明是注册，否则就是触发事件
                if (typeof handler === "function") {
                    thisCoreObject.on(type, handler);
                } else {
                    var handlers = infoCore.event.coreObjectEventHandlers[type];
                    if (handlers != null) {
                        for (var coreIndex = 0, coreLen = thisCoreObject.length; coreIndex < coreLen; coreIndex++) {
                            var coreControl = thisCoreObject[coreIndex];
                            for (var handlerIndex = 0, handlerLen = handlers.length; handlerIndex < handlerLen; handlerIndex++) {
                                var handlerObj = handlers[handlerIndex];
                                if (coreControlInHandler(coreControl, handlerObj)) {
                                    if (typeof handlerObj.handler === "function") {
                                        var args = [];
                                        if (handlerObj.data != null) {
                                            args.push({ data: data });
                                        }
                                        for (var i = 0, len = arguments.length; i < len; i++) {
                                            args.push(arguments[i]);
                                        }
                                        handlerObj.handler.apply(infoCore(coreControl), args);
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }(infoCore.event.coreObjectEventTypes[eventIndex]);
    }

    /**
     *  执行action
     *  @param actionData 提交的数据
     *  @param skipMessage 如果skip==true且后续步骤只有一个，那么就不要出messageBox提示了
     *  @param before 执行action前执行的函数
     *  @param after 执行action后执行的函数
     **/
    var doAction = function (actionData, skipMessage, before, after) {
        var doAction = function () {
            infoCore.ajax({
                type: "POST",
                url: infoCore.params.doActionUrl,
                data: actionData,
                requestMsg: $$.lt("submit.requestMsg"),
                beforeShowErrorMsg: function () {
                    $.unblockUI();
                }
            }).always(after).done(function (data) {

                var todoSteps = [],
                    continueDebugSteps = [],
                    continueStep;
                for (i = 0; i < data.entities.length; i++) {
                    var step = data.entities[i];
                    //发现后续步骤的entryId和当前实例的entryId不一致，说明是需要连续办理的别的实例的当前相同步骤
                    var thisEntryTop = $$.params.formEntryIdTop != null ? $$.params.formEntryIdTop : $$.params.formEntryId;
                    var stepEntryTop = step.entryIdTop != null ? step.entryIdTop : step.entryId;
                    if (thisEntryTop !== stepEntryTop) {        // 顶级流水不同
                        continueStep = step;
                        todoSteps = [];
                        break;
                    } else {
                        //$$.params.userId已经是后台处理过的用户id，非委托模式就是当前登录人的id，委托模式就是委托办理人的id，完全可以替代下面注释的判断代码
                        if (step.assignUser === $$.params.userId) {
                            todoSteps.push(step);
                        }
                        /*
                        if (infoCore.params.entrusts.entruster != null) {
                            if (step.assignUser === infoCore.params.entrusts.entruster.id) {
                                todoSteps.push(step);
                            }
                        } else {
                            if (step.assignUser === infoCore.params.userId) {
                                todoSteps.push(step);
                            }
                        }
                        */

                        //如果是debug版且委托参数为true且是人工节点
                        if (!$$.params.isRelease && $$.params.entrust === "true" && step['type'] === 'Manual') {
                            continueDebugSteps.push(step);
                        }
                    }
                }
                //如果有back参数(微信中)，显示返回。
                //不是点链接点开的页面(手工打开的页面无法用JS关闭)或者被嵌入IFRAME中（这种情况无法用js关闭）,按钮显示确定，按了按钮后刷新页面
                //以上情况后来发现本来可以关闭的窗口，如果父窗口刷新或者关闭后，本窗口的window.opener会被置为null，browserCloseable判断是不能关闭的，但其实还是能关的，按钮显示的是确定，其实调用closeWindow的时候还是关掉了
                //如果判断browserCloseable，显示关闭，按了按钮后关闭窗口
                var closeButtonText = !$IU.isEmptyStr($$.params.back) ? $$.lt("common.back") : (!$IU.browserCloseable() ? $$.lt("common.ok") : $$.lt("common.close"));
                var callback = function () {
                    $IU.closeWindow();
                };
                //现在办理后描述也是通过data.error传递到前端的
                var message = (data.error == null || data.error === "") ? $$.lt("submit.success") : "<div class=\"form_do_action_error\">" + data.error + "</div>";
                var printButton,
                    downloadButton,
                    printInvoiceButton,
                    closeButton,
                    nextButton;

                //安排button,调整default按钮
                var arrangeButtons = function () {
                    var pushButton = function (button) {
                        if (button != null) {
                            buttons.push(button);
                        }
                    };

                    var buttons = [];
                    if (printButton != null) {
                        printButton.defaultButton = ($$.params.printable === true && closeButton == null);
                    }
                    if (downloadButton != null) {
                        downloadButton.defaultButton = ($$.params.downloadable === true && closeButton == null);
                        if (printButton != null && printButton.defaultButton === true) {
                            downloadButton.defaultButton = false;
                        }
                    }
                    if (nextButton != null) {
                        nextButton.defaultButton = (printButton == null && downloadButton == null)
                            || !($$.params.printAfterAction || $$.params.downloadAfterAction);
                    }
                    if (closeButton != null) {
                        closeButton.defaultButton = (nextButton == null);
                    }

                    if ((nextButton != null && nextButton.defaultButton === true) || (closeButton != null && closeButton.defaultButton === true)) {
                        pushButton(nextButton);
                        pushButton(closeButton);
                        pushButton(printButton);
                        pushButton(downloadButton);
                        pushButton(printInvoiceButton);
                    } else {
                        pushButton(printButton);
                        pushButton(downloadButton);
                        pushButton(nextButton);
                        pushButton(closeButton);
                        pushButton(printInvoiceButton);
                    }

                    return buttons;
                };


                var getPrintDownloadMessage = function (printRes, downloadRes, printOrDownloadRes) {
                    if ($$.params.printable === true && $$.params.downloadable !== true) {
                        return $$.lt(printRes);
                    } else {
                        if ($$.params.printable !== true && $$.params.downloadable === true) {
                            return $$.lt(downloadRes);
                        } else {
                            return $$.lt(printOrDownloadRes);
                        }
                    }
                };

                if (data.error == null || data.error === "") {
                    if ($$.params.printable === true || $$.params.downloadable === true) {
                        message += (data.error != null ? "" : "<br/>");
                        message += getPrintDownloadMessage("submit.canDo.print", "submit.canDo.download", "submit.canDo.printOrDownload");
                        if (!($$.params.printAfterAction || $$.params.downloadAfterAction)) {
                            message += getPrintDownloadMessage("submit.hasNotDo.print", "submit.hasNotDo.download", "submit.hasNotDo.printOrDownload");
                        }
                        message += getPrintDownloadMessage("submit.canClick.print", "submit.canClick.download", "submit.canClick.printOrDownload");
                    }
                }

                if ($$.params.printable === true) {
                    printButton = {
                        name: $$.lt("common.print"),
                        defaultButton: true,
                        preventDefault: true,
                        callback: function () {
                            //当只有一个打印按钮的时候，就在本窗口打开，否则在新窗口打开
                            var openInNewWindow = (buttons != null && buttons.length != null && buttons.length > 1);
                            //$IU.openLink($IU.processUrl($$.params.printUrl), openInNewWindow);
                            $IU.openUrl($IU.processUrl($$.params.printUrl), null, openInNewWindow ? "_blank" : "_self");
                            return false;
                        }
                    };
                }
                if ($$.params.downloadable === true) {
                    downloadButton = {
                        name: $$.lt("common.download"),
                        defaultButton: $$.params.printable !== true,
                        preventDefault: true,
                        callback: function () {
                            $$.params.downloadAfterAction = false;
                            $$.download(true);
                            return false;
                        }
                    };
                }
                //本步骤可办理后打印且有物品控件，那么出现打印小票按钮
                if ($$.params.printInvoice && $$.params.printAfterAction) {
                    printInvoiceButton = {
                        name: $$.lt("thing.printInvoice"),
                        defaultButton: false,
                        preventDefault: true,
                        callback: function () {
                            $$.printInvoice();
                            return false;
                        }
                    };
                }

                if (todoSteps.length === 0 && continueStep === undefined) {
                    if (!($$.params.printAfterAction || $$.params.downloadAfterAction)) {
                        closeButton = {
                            name: closeButtonText,
                            callback: callback,
                            defaultButton: true,
                            callOnClose: true
                        };
                    } else {
                        message += "<div>" + $$.lt("submit.closeAfterPrint") + "</div>";
                    }
                    var buttons = arrangeButtons();
                    if (continueDebugSteps.length > 0) {

                        var continueDebugMessage = "<div>";
                        continueDebugMessage += $$.lt("submit.continueTodoList");
                        if ($$.params.isRelease === false) {
                            continueDebugMessage += "<br/>" + $$.lt("submit.openInNewWindow");
                        }
                        for (i = 0; i < continueDebugSteps.length; i++) {
                            step = continueDebugSteps[i];
                            continueDebugMessage += "<br/><input class='infoplus_chooseNextStep' type='radio' value='" + step.flowStepId + "'" + (i === 0 ? "checked" : "") + " name='nextStepChooseRadio'/>" + $$.lt("submit.doStep", step.name);
                        }
                        continueDebugMessage += "</div>";

                        nextStep = function () {
                            var $nextSteps = $(".infoplus_chooseNextStep");
                            for (var index = 0; index < $nextSteps.length; index++) {
                                var radio = $nextSteps[index];
                                if (radio.checked === true) {
                                    for (i = 0; i < continueDebugSteps.length; i++) {
                                        if (parseInt(radio.value, 10) === continueDebugSteps[i].flowStepId) {
                                            //如果是调试发起的，有多个下一步选择，那么点击下一步时在新窗口打开
                                            if ($$.params.isRelease === false) {
                                                var hiddenLink = document.createElement("a");
                                                $(hiddenLink).css("display", "none")
                                                    .attr("target", "_blank")
                                                    .attr("href", $IU.processUrl(continueDebugSteps[i].renderUri));
                                                $("body").append(hiddenLink);
                                                $IU.fireClick(hiddenLink);
                                            } else {
                                                window.location.href = $IU.processUrl(continueDebugSteps[i].renderUri);
                                            }
                                            break;
                                        }
                                    }
                                    break;
                                }
                            }
                            return false;
                        };

                        buttons.push({
                            name: $$.lt("submit.continueToDebug"),
                            preventDefault: true,
                            callback: function () {
                                if (continueDebugSteps.length === 1) {
                                    window.location.href = $IU.processUrl(continueDebugSteps[0].renderUri);
                                } else {
                                    var nextButton = {
                                        name: $$.lt("submit.nextStep"),
                                        defaultButton: true,
                                        callback: nextStep,
                                        preventDefault: true
                                    };
                                    dialog.rebuild({
                                        content: continueDebugMessage,
                                        maxWidth: 440,
                                        buttons: [nextButton]
                                    });
                                }
                                return false;
                            }
                        });
                    }

                    var dialog = new InfoPlus.Render.Dialog({
                        content: message,
                        maxWidth: buttons.length > 1 ? 550 : 440,
                        buttons: buttons
                    });
                    dialog.show();
                } else {

                    var nextStep = function () {
                        if (continueStep !== undefined) {
                            window.location.href = $IU.processUrl(continueStep.renderUri);
                        } else {
                            if (todoSteps.length === 1) {
                                window.location.href = $IU.processUrl(todoSteps[0].renderUri);
                            } else {
                                var $nextSteps = $(".infoplus_chooseNextStep");
                                for (var index = 0; index < $nextSteps.length; index++) {
                                    var radio = $nextSteps[index];
                                    if (radio.checked === true) {
                                        for (i = 0; i < todoSteps.length; i++) {
                                            if (parseInt(radio.value, 10) === todoSteps[i].flowStepId) {
                                                //如果是调试发起的，有多个下一步选择，那么点击下一步时在新窗口打开
                                                if ($$.params.isRelease === false) {
                                                    var hiddenLink = document.createElement("a");
                                                    $(hiddenLink).css("display", "none")
                                                        .attr("target", "_blank")
                                                        .attr("href", $IU.processUrl(todoSteps[i].renderUri));
                                                    $("body").append(hiddenLink);
                                                    $IU.fireClick(hiddenLink);
                                                } else {
                                                    window.location.href = $IU.processUrl(todoSteps[i].renderUri);
                                                }
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        return false;
                    };


                    if (continueStep !== undefined) {
                        message += "<br/>" + $$.lt("submit.continueTodo", $IU.processStepName(continueStep.name));
                    } else {
                        if (todoSteps.length === 1) {
                            if (!skipMessage) {
                                message += "<br/>" + (printButton != null ? $$.lt("submit.canContinueTodo", $IU.processStepName(todoSteps[0].name)) : $$.lt("submit.pleaseContinueTodo", $IU.processStepName(todoSteps[0].name)));
                            } else {
                                window.location.href = $IU.processUrl(todoSteps[0].renderUri);
                                return;
                            }
                        } else {
                            message += "<br/>" + $$.lt("submit.continueTodoList");
                            if ($$.params.isRelease === false) {
                                message += "<br/>" + $$.lt("submit.openInNewWindow");
                            }
                            for (var i = 0; i < todoSteps.length; i++) {
                                step = todoSteps[i];
                                message += "<br/><input class='infoplus_chooseNextStep' type='radio' value='" + step.flowStepId + "'" + (i === 0 ? "checked" : "") + " name='nextStepChooseRadio'/>" + $$.lt("submit.doStep", $IU.processStepName(step.name));
                            }
                        }
                    }


                    var close = function () {
                        $IU.closeWindow();
                    };

                    nextButton = {
                        name: (continueStep !== undefined ? $$.lt("submit.next") : $$.lt("submit.nextStep")),
                        defaultButton: true,
                        callback: nextStep,
                        preventDefault: true
                    };
                    if (!($$.params.printAfterAction || $$.params.downloadAfterAction)) {
                        closeButton = {
                            name: closeButtonText,
                            callback: close,
                            callOnClose: true
                        };
                    } else {
                        message += "<div>" + $$.lt("submit.closeAfterPrint") + "</div>";
                    }

                    buttons = arrangeButtons();
                    dialog = new InfoPlus.Render.Dialog({
                        content: message,
                        maxWidth: buttons.length > 2 ? 550 : 400,
                        buttons: buttons
                    });
                    dialog.show();
                }
            });
        };

        var delay = before();
        if (delay !== undefined) {
            setTimeout(doAction, delay);
        } else {
            doAction();
        }

    };

    var parseData = function (data, parseErrMsg) {
        var result = { error: null, data: null };

        var getJsonFromData = function () {
            if (typeof data === 'string') return data;
            if (data.d != null) return data.d;
            if (data.string != null) return data.string;
            return null;
        };

        if (data == null) {
            result.error = { msg: $$.lt("submit.parseDataError"), errno: -1 };
            return result;
        }

        var json = getJsonFromData();

        // No JSON object? use jQuery instead, compatible with IE6
        if (typeof JSON !== 'undefined') {
            result.data = JSON.parse(json);
        } else {
            result.data = $.parseJSON(json);
        }

        if (result.data == null || result.data.entities == null) {
            if (parseErrMsg === undefined) {
                result.error = { msg: $$.lt("submit.jsonError"), errno: -1 };
            } else {
                result.error = { msg: parseErrMsg, errno: -1 };
            }
            return result;
        }

        if (result.data.errno !== 0) {
            result.error = { msg: result.data.error, errno: result.data.errno };
            return result;
        }

        return result;
    };

    /**
     * infoCore全局函数
     */
    $.extend(infoCore, {


        /**
         * 解析动态
         */
        parseDynamic: function (input, keyName) {
            try {
                return InfoPlus.Dynamics.Parser.Expression.parse(input);
            } catch (err) {
                var txt = "Error occur while parsing the dynamic expression of " + keyName + ".\n\n";
                txt += (input + "\n\n");
                txt += "Error description: " + err.message + "\n\n";
                txt += "Click OK to continue.\n\n";
                alert(txt);
            }
            return null;
        },

        /**
         * 打印调试信息　
         * @param msg
         */
        debug: function (msg) {
            if (!infoCore.params.isRelease) {
                infoCore.log(msg);
            }
        },

        getIeVersion: function () {
            var msie = +((/msie (\d+)/.exec(navigator.userAgent.toLowerCase()) || [])[1]);
            if (isNaN(msie)) {
                msie = +((/trident\/.*; rv:(\d+)/.exec(navigator.userAgent.toLowerCase()) || [])[1]);
            }
            return msie;
        },

        /**
         * 在console中打印msg
         * @param msg
         * @param file 测试文件名
         * @param css 打印log所带的ｃｓｓ，只有chrome,firefox支持
         */
        log: function (msg, file, css) {
            if (window["console"] !== undefined) {
                if (typeof msg === 'object') {
                    if (file !== undefined) {
                        console.log(file);
                    }
                    if (console['dirxml'] != null) {
                        console.dir(msg);
                    } else {
                        var printObj = function (o, s) {
                            var str = '';
                            for (var p in o) {
                                if (o.hasOwnProperty(p)) {
                                    if ($.isArray(o[p])) {
                                        str += s + p + ': [ \n' + printObj(o[p], s + '  ') + s + ']\n';
                                    } else {
                                        if (typeof o[p] === 'object') {
                                            if (o[p] === null) {
                                                str += s + p + ": null\n";
                                            } else {
                                                str += s + p + ': { \n' + printObj(o[p], s + '  ') + s + '}\n';
                                            }
                                        } else {
                                            str += s + p + ': ' + o[p] + '\n';
                                        }
                                    }
                                }
                            }

                            return str;
                        };
                        console.log(printObj(msg, ''));
                    }
                } else {
                    var log = file === undefined ? msg : file + " -> " + msg;
                    if (css !== undefined) {
                        log = '%c' + log;
                        console.log(log, css);
                    } else {
                        console.log(log);
                    }
                }
            } else {
                alert(msg);
            }
        },

        /**
         *  产生一串guid
         *  @returns {string}
         */
        guid: function () {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = (c === 'x' ? r : (r & 0x3 | 0x8));
                return v.toString(16);
            });
        },


        getTransitionEndEventName: function () {
            if ($$.params.transitionEndEventName != null) {
                return $$.params.transitionEndEventName;
            }
            var el = document.createElement('fake'),
                transEndEventNames = {
                    'WebkitTransition': 'webkitTransitionEnd',
                    'transition': 'transitionend',
                    'MozTransition': 'transitionend',
                    'OTransition': 'oTransitionEnd',
                    'msTransition': 'MSTransitionEnd'
                };

            for (var t in transEndEventNames) {
                if (transEndEventNames.hasOwnProperty(t)) {
                    if (el.style[t] !== undefined) {
                        $$.params.transitionEndEventName = transEndEventNames[t];
                        return transEndEventNames[t];
                    }
                }
            }
            return null;
        },

        /**
         *  等待阻塞的ajax请求完成后再执行method函数中的内容
         */
        asynchronousInvoke: function (method, invoker, args) {
            if (typeof method !== "function") {
                return;
            }

            var invoke = function () {
                if (invoker != null) {
                    if (args == null) {
                        //ie8下args为undefined,调用method.apply(invoker, args)会报错
                        method.apply(invoker);
                    } else {
                        method.apply(invoker, args);
                    }
                } else {
                    method.apply();
                }
            };

            if ($$.params.ajax.blockingIds.length > 0) {
                var guid = $$.guid();
                //加入回调队列中
                $$.params.ajax.blockedCallbacks.push({
                    id: guid,
                    callback: method,
                    invoker: invoker,
                    args: args
                });

                $$.blockUI({ message: "<span class='loading'>正在等待先前的操作...</span>" });

                //如果过去5秒，阻塞的调用还没返回，那么这里设置一个超时自动回调，
                //如果阻塞的ajax返回并已经调用了，那么这里的超时代码也不会有影响
                setTimeout(function () {
                    //从$$.params.ajax.blockedCallbacks移除并调用
                    for (var i = 0, len = $$.params.ajax.blockedCallbacks.length; i < len; i++) {
                        if ($$.params.ajax.blockedCallbacks[i].id === guid) {
                            $$.params.ajax.blockedCallbacks.splice(i, 1);
                            $.unblockUI();
                            invoke();
                            break;
                        }
                    }
                }, 5000);

                return false;
            } else {
                invoke();
                /*
                 if (invoker != null) {
                 if (args == null) {
                 //ie8下args为undefined,调用method.apply(invoker, args)会报错
                 method.apply(invoker);
                 } else {
                 method.apply(invoker, args);
                 }
                 } else {
                 method.apply();
                 }
                 */
            }
        },


        /**
         *  封装jQuery的ajax方法,options是传给$.ajax的opt参数，其中包含里一些附加参数如下
         *  needParse{boolean}              是否需要在获得数据后进行parse，缺省true
         *  requestMsg{string}              ajax请求信息描述,缺省为"加载"
         *  parseErrMsg{string}             parse错误时显示信息,缺省为requestMsg+"失败"
         *  ajaxErrMsg{string}              ajax请求失败时显示信息,缺省为requestMsg+"失败"
         *  showParseErrMsg{boolean}        是否在parse失败时（以及服务器返回错误信息时errno!=0）显示出错信息,缺省是true
         *  showAjaxErrMsg{boolean}         是否在ajax请求失败时显示出错信息,缺省是true
         *  beforeShowErrorMsg{function}    在显示出错信息前调用函数,一般用于解除block
         *  requestAgain{boolean}           是否是再次请求的
         *  errorTipElement{HTMLElement}    出错信息显示在哪个元素上（只有当出错号为22001 CANCELLED时候且没有detail错误才显示在该元素上方）
         *  block{boolean}                  是否是阻塞的请求,有些操作需要阻塞的ajax返回后才能执行特定操作(比如save,actionButtonClick)
         *  errorTitle{string}              出错提示窗口的标题
         *  addFormParam{boolean}           是否添加上流程参数,缺省false
         */
        ajax: function (options) {
            var defer = $.Deferred();
            if (options == null || options.url == null) {
                return defer.reject({ error: $$.lt("error.lackOfPara") });
            }
            if (options['data'] != null) {
                options['data']['csrfToken'] = $(document).find("meta[itemscope=csrfToken]").attr("content");
                if (options['data']['lang'] == null) {
                    options['data']['lang'] = $$.params.lang;
                }

            }
            if (($$.params.viewToken || transformer.viewToken) != null) {
                options['data']['viewToken'] = ($$.params.viewToken || transformer.viewToken);
            }
            options['cache'] = false;
            options['dataType'] = 'json';
            var needParse = options['needParse'] === undefined ? true : options['needParse'],
                requestMsg = options['requestMsg'] === undefined ? "加载" : options['requestMsg'],
                parseErrMsg = options['parseErrMsg'] === undefined ? requestMsg + $$.lt("common.fail") : options['parseErrMsg'],
                ajaxErrMsg = options['ajaxErrMsg'] === undefined ? requestMsg + $$.lt("common.fail") : options['ajaxErrMsg'],
                showParseErrMsg = options['showParseErrMsg'] === undefined ? true : options['showParseErrMsg'],
                showAjaxErrMsg = options['showAjaxErrMsg'] === undefined ? true : options['showAjaxErrMsg'],
                beforeShowErrorMsg = options['beforeShowErrorMsg'],
                errorTitle = options['errorTitle'],
                block = options['block'] === true;

            if (options['addFormParam'] === true) {
                $.extend(options.data, {
                    instanceId: $$.params.formInstanceId,
                    stepId: $$.params.formStepId == null ? -1 : $$.params.formStepId,
                    entryId: $$.params.formEntryId,
                    workflowId: $$.params.workflowId,
                    release: $$.params.release
                });
            }

            var showError = function (errNo, errCode, msg, showErrorTip, entities) {
                if (showParseErrMsg === true) {
                    if (typeof beforeShowErrorMsg === "function") {
                        beforeShowErrorMsg();
                    }

                    var errorMessage = msg,
                        detailMessage = null,
                        oldSpliter = "|INFOPLUS_SPLITER|",
                        newSpliter = "\n\n";
                    var pos = errorMessage.indexOf(oldSpliter);
                    if (pos !== -1) {
                        detailMessage = errorMessage.substr(pos + oldSpliter.length);
                        errorMessage = errorMessage.substring(0, pos);
                    } else {
                        pos = errorMessage.indexOf(newSpliter);
                        if (pos !== -1) {
                            detailMessage = errorMessage.substr(pos + newSpliter.length);
                            errorMessage = errorMessage.substring(0, pos);
                        }
                    }

                    //EVENT_CANCELLED，且没有出错的详细信息
                    if (errCode === 'EVENT_CANCELLED' && (detailMessage == null || detailMessage === '') && options['errorTipElement'] != null) {
                        var control = $(options['errorTipElement']).data($Control.DATA_CONTROL_OBJECT);
                        //如果是button,linkButton,check引起的报错，直接用弹出方式显示，而不是在控件上方冒出错泡
                        if (control.controlType === $Control.CONTROL_TYPE_BUTTON
                            || control.controlType === $Control.CONTROL_TYPE_LINK_BUTTON
                            || control.controlType === $Control.CONTROL_TYPE_CHECKBOX) {
                            $IU.errorMessageBox(errorMessage, null, null, entities, errCode, false, false, null, 400);
                        } else {
                            //此处加上了300的延时，是为了解决如果要验证非空，又可能fieldChange后报错，那么blur时候fieldChange带出来的出错提示会被验证非空通过而close掉
                            setTimeout(function () {
                                errorMessage = $IU.linkifyStr($IU.htmlEncode(errorMessage));
                                $(options['errorTipElement']).validationEngine("showPrompt", errorMessage, null, 'topLeft', true);
                                //在控件上打上已经冒出错气泡的标记
                                control.popError = true;
                            }, 300);
                        }
                    } else {
                        $IU.errorMessageBox(errorMessage, detailMessage,
                            (errorTitle === undefined) ? requestMsg + $$.lt("common.fail") : (errorTitle !== '' ? errorTitle : null), entities, errCode, showErrorTip);
                    }
                }
            };

            if (block === true) {
                options.guid = $$.guid();
                $$.params.ajax.blockingIds.push(options.guid);
            }
            options['contentType'] = "application/x-www-form-urlencoded; charset=utf-8";
            $.ajax(options).done(function (data) {
                //already parsed
                if ($.isNumeric(data.errno)) {
                    if (data.errno !== 0) {
                        //如果错误code是office文件被锁住，就延时3秒再请求
                        if (data.ecode === 'FILE_IS_LOCKED' && options['requestAgain'] !== true) {
                            setTimeout(function () {
                                options['requestAgain'] = true;
                                $$.ajax(options).done(function (newData) {
                                    defer.resolve(newData);
                                }).fail(function (errorData) {
                                    defer.reject(errorData);
                                });
                            }, 3000);
                            return;
                        }
                        //如果错误代码是csrfToken过期，data.entities[0]里面会有一个新token，设置好新token再请求
                        if (data.ecode === 'SAFETY_PROTECTION_CSRF' && options['requestAgain'] !== true) {
                            $("meta[itemscope=csrfToken]").attr("content", data.entities[0]);
                            options['requestAgain'] = true;
                            $$.ajax(options).done(function (newData) {
                                defer.resolve(newData);
                            }).fail(function (errorData) {
                                defer.reject(errorData);
                            });
                            return;
                        }
                        //需要登录
                        if (data.ecode === 'USER_LOGIN_REQUIRED') {
                            if ($$.params.entrust === true || transformer.entrust === "true") {
                                //委托模式下需要刷新
                                contentDiv = document.createElement("div");
                                var tipSpan = document.createElement("span");
                                $(tipSpan).text($$.lt("login.entrust"));
                                $(contentDiv).append(tipSpan);
                                dialog = new InfoPlus.Render.Dialog({
                                    content: contentDiv,
                                    maxWidth: 450,
                                    buttons: [{
                                        name: $$.lt("common.close"),
                                        callback: function () {
                                            defer.reject({
                                                msg: data.error,
                                                errno: data.errno,
                                                data: data,
                                                errCode: data.ecode
                                            });
                                        }
                                    }, {
                                        name: $$.lt("common.reload"),
                                        defaultButton: true,
                                        callback: function () {
                                            window.location.reload();
                                        }
                                    }]
                                });
                            } else {
                                var contentDiv = document.createElement("div"),
                                    timeoutDiv = document.createElement("div"),
                                    linkSpan = document.createElement("span"),
                                    retrySpan = document.createElement("span");
                                $(timeoutDiv).text($$.lt("login.needReLogin")).css("margin", "20px 0 10px 0");
                                var reLoginUrl = $$.params.reLoginUrl;
                                var link = document.createElement("a"),
                                    $link = $(link);
                                link.target = "_blank";
                                if (reLoginUrl !== undefined) {
                                    if (reLoginUrl.indexOf("returnUrl") === -1) {
                                        $link.attr("href", reLoginUrl + "?returnUrl=" + encodeURIComponent(window.location.href));
                                    } else {
                                        $link.attr("href", reLoginUrl);
                                    }
                                }
                                //$(link).text($$.lt("login.clickHere")).addClass("relogin_link");
                                $link.text($$.lt("login.reLogin")).addClass("relogin_link dialog_button default rightest fr").css("margin", "auto");
                                $link.click(function () {
                                    $(window).one("focus", function () {
                                        dialog.close();
                                        $$.ajax(options).done(function (newData) {
                                            defer.resolve(newData);
                                        }).fail(function (errorData) {
                                            defer.reject(errorData);
                                        });
                                    });
                                });
                                var buttonUrl = $link.attr("href");
                                $(linkSpan).append(link);
                                $(retrySpan).text($$.lt("login.retry"));
                                //$(contentDiv).append(timeoutDiv).append(linkSpan).append(retrySpan);
                                var reloginDiv = document.createElement("div");
                                $(reloginDiv).append(link);

                                var closeDiv = document.createElement("div"),
                                    closeLink = document.createElement("a"),
                                    closeI = document.createElement("i");
                                $(closeI).addClass("i-icon-close2");
                                $(closeLink).append(closeI).addClass("dialog_close button show").attr("href", "#").attr("title", $$.lt("common.close"))
                                    .attr("style", "float:right;color:#616161;position:relative;top:-28px;text-decoration:none");
                                $(closeLink).click(function () {
                                    dialog.close();
                                    defer.reject({ msg: data.error, errno: data.errno, data: data, errCode: data.ecode });
                                });

                                $(closeDiv).append(closeLink);
                                $(contentDiv).append(closeDiv).append(timeoutDiv).append(reloginDiv);

                                var dialog = new InfoPlus.Render.Dialog({
                                    content: contentDiv,
                                    maxWidth: 350,
                                    noButton: true
                                    /*
                                    buttons: [{
                                        name: $$.lt("common.ok"),
                                        url: buttonUrl,
                                        preventDefault: true,
                                        callback: function () {
                                            $(window).one("focus", function () {
                                                dialog.close();
                                                $$.ajax(options).done(function (newData) {
                                                    defer.resolve(newData);
                                                }).fail(function (errorData) {
                                                    defer.reject(errorData);
                                                });
                                            });
                                        }
                                    }]
                                    */
                                });
                                /*
                                $link.on("click", function () {
                                    //点击登录链接后，注册窗口focus事件，因为登录页面自动关闭后会让本窗口focus，此时自动重试
                                    $(window).one("focus", function () {
                                        dialog.close();
                                        $$.ajax(options).done(function (newData) {
                                            defer.resolve(newData);
                                        }).fail(function (errorData) {
                                            defer.reject(errorData);
                                        });
                                    });
                                });

                                 */

                            }
                            dialog.show();
                        } else {
                            showError(data.errno, data.ecode, data.error, data.errno < 0, data.entities);
                            defer.reject({ msg: data.error, errno: data.errno, data: data, errCode: data.ecode });
                        }
                    } else {
                        defer.resolve(data);
                    }
                } else {
                    if (needParse === true) {
                        var parsedData = parseData(data, parseErrMsg);
                        if (parsedData.error != null) {
                            showError(parsedData.error.errno, parsedData.error.ecode, parsedData.error.msg, parsedData.error.errno < 0, parsedData.error.entities);
                            var rejectData = {
                                msg: parsedData.error.msg,
                                errno: parsedData.error.errno,
                                data: parsedData.data
                            };
                            defer.reject(rejectData);
                        } else {
                            defer.resolve(parsedData.data);
                        }
                    } else {
                        defer.resolve(data);
                    }
                }
            }).fail(function (error) {
                if (showAjaxErrMsg === true) {
                    if (typeof beforeShowErrorMsg === "function") {
                        beforeShowErrorMsg();
                    }
                    if (error.status === 0) {
                        error.statusText = $$.lt("common.networkError");
                    }
                    $IU.errorMessageBox(ajaxErrMsg, error.status + ":" + error.statusText, requestMsg + $$.lt("common.fail"), null, null, true);
                }
                defer.reject({ msg: error.statusText, errno: -1 });
            }).always(function () {
                if (options.block === true) {
                    for (var i = 0, len = $$.params.ajax.blockingIds.length; i < len; i++) {
                        if ($$.params.ajax.blockingIds[i] === options.guid) {
                            $$.params.ajax.blockingIds.splice(i, 1);
                        }
                    }

                    if ($$.params.ajax.blockingIds.length === 0) {
                        $.unblockUI();
                        len = $$.params.ajax.blockedCallbacks.length;
                        while (len > 0) {
                            var callback = $$.params.ajax.blockedCallbacks.splice(0, 1)[0];
                            if (typeof callback.callback === "function") {
                                if (callback.invoker != null) {
                                    if (callback.args == null) {
                                        //ie8下callbacks.args===undefined情况下直接调用callback.callback.apply(callback.invoker, callback.args)会报错
                                        callback.callback.apply(callback.invoker);
                                    } else {
                                        callback.callback.apply(callback.invoker, callback.args);
                                    }
                                } else {
                                    callback.callback();
                                }
                            }
                            len = $$.params.ajax.blockedCallbacks.length;
                        }
                    }
                }
            });

            return defer.promise();

        },

        /**
         * 加载办理历史
         * @param options 加载参数如下
         * holder{dom}              加载后放到哪个dom元素里
         * entryId{number}          数字流水号
         * instanceId{string}       guid流水号
         * stepId{number}           当前步骤号
         * includingTop{boolean}    是否加载父流程
         */
        loadHistory: function (options) {
            var $historyHolder = options.holder != null ? $(options.holder) : $$.params.holder.remark,
                instanceId = (options.entryId !== undefined) ? options.entryId : (options.instanceId || $$.params.formInstanceId),
                stepId = (options.stepId !== undefined) ? options.stepId : (($$.params.formStepId == null ? -1 : $$.params.formStepId)),
                includingTop = options.includingTop || false;
            return $$.ajax({
                type: "POST",
                url: $$.params.uriHistory.replace("{id}", instanceId),
                data: {
                    stepId: stepId,
                    includingTop: includingTop
                },
                requestMsg: $$.lt("remarkHistory.request"),
                beforeShowErrorMsg: function () {
                    if (!$$.MOBILE) {
                        $historyHolder.removeClass("loading").unblock();
                    }
                }
            });
        },

        /**
         * 执行action
         * @param data 执行action附加的数据,如果这里不是object，那么就是action的code,表示通过code找到执行的按钮
         * @param nextUsers 设定下一步用户,格式{stepId:userAccount}，如果data是action的code，那么可以不需要nextUsers这个参数
         * @param skipMessage 如果skip==true且后续步骤只有一个，那么就不要出messageBox提示了
         * @param beforeDoAction 在执行action之前需要执行的方法
         * @param afterDoAction 在执行action之后需要执行的方法
         */
        doAction: function (data, nextUsers, skipMessage, beforeDoAction, afterDoAction) {
            if (skipMessage === undefined) skipMessage = true;
            if (typeof data !== 'object') {
                var code = data;
                var command = null;
                $("a.command_button_content").each(function () {
                    if ($(this).data("code") === code) {
                        command = this;
                    }
                });
                if (command != null) {
                    data = {
                        actionId: $(command).data("actionId"),
                        nextUsers: $.toJSON({}),
                        formData: $.toJSON(infoCore.params.formRender.save({}, false)),
                        remark: ''
                    };
                } else {
                    return;
                }
            } else {
                if (nextUsers !== undefined) {
                    data['nextUsers'] = $.toJSON(nextUsers);
                }
            }
            data['stepId'] = infoCore.params.formStepId == null ? -1 : infoCore.params.formStepId;
            data['timestamp'] = infoCore.params.timestamp;
            data['boundFields'] = infoCore.params.boundFields.toString();
            data['rand'] = Math.random() * 999;

            if (infoCore.params.receiveCode != null) {
                data['thing'] = infoCore.params.receiveCode;
            }

            if (beforeDoAction === undefined) {
                beforeDoAction = function () {
                    $$.blockUI({ message: "<span class='loading'>" + $$.lt("submit.submitting") + "</span>" });
                };
                afterDoAction = function () {
                    $.unblockUI();
                };
            }
            doAction(data, skipMessage, beforeDoAction, afterDoAction);

        },


        /**
         *  点击Action按钮
         *  @param code actionCode
         **/
        clickActionButton: function (code) {
            if (code == null) return;
            var command = null;
            $("a.command_button_content").each(function () {
                if ($(this).data("code") === code) {
                    command = this;
                }
            });
            if (command != null) {
                $IU.fireClick(command);
            }
        },

        /**
         * 保存
         * @param callback 回调函数,保存完后执行，如果没有回调，那么缺省的将重新加载页面
         */
        save: function (callback) {
            $$.asynchronousInvoke(function () {
                var saveToServer = function (remark) {
                    remark = remark || '';
                    var data = {};
                    data = $$.params.formRender.save(data, false);

                    var postData = {
                        formData: $.toJSON(data),
                        remark: remark,
                        timestamp: $$.params.timestamp,
                        rand: Math.random() * 999,
                        boundFields: $$.params.boundFields.toString()
                    };
                    var review = $IU.getReviewData();
                    if (review != null) {
                        postData['review'] = $.toJSON(review);
                    }
                    /*
                    if (callback === undefined || (typeof callback !== "function")) {
                        //如果没有回调，那么缺省的将重新加载页面
                        callback = function () {
                            if ($$.params.adminView) {
                                window.location.href = $IU.processUrl($$.params.adminViewUrl);
                            } else {
                                window.location.reload();
                            }
                        };
                    }
                    */

                    $$.blockUI({ message: "<span class='loading'>" + $$.lt("save.wait") + "</span>" });

                    $$.ajax({
                        type: "POST",
                        url: $$.params.uriSave,
                        data: postData,
                        requestMsg: $$.lt("save.saving"),
                        addFormParam: true
                    }).done(function () {
                        //$IU.messageBox(null, $$.lt("save.success"), null, 240, callback);
                        if (callback === undefined || (typeof callback !== "function")) {
                            $IU.messageBox(null, $$.lt("save.success"), null, 240, function () {
                                if ($$.params.adminView) {
                                    window.location.href = $IU.processUrl($$.params.adminViewUrl);
                                } else {
                                    window.location.reload();
                                }
                            });
                        } else {
                            callback();
                        }
                    }).always(function () {
                        $.unblockUI();
                    });

                    return data;
                };

                if (null == $$.params.formRender) {
                    return null;
                }

                //do validation
                if ($IU.doValidate(true) === false) {
                    return null;
                }

                if ($$.params.adminView) {
                    var remarkDiv = document.createElement("div"),
                        $remarkDiv = $(remarkDiv);
                    var tipDiv = document.createElement("div");
                    $(tipDiv).text($$.lt("save.adminModifyReason"));
                    $remarkDiv.append(tipDiv);
                    var mustInputRemarkDiv = document.createElement("div"),
                        $mustInputRemarkDiv = $(mustInputRemarkDiv);
                    $mustInputRemarkDiv.text($$.lt("save.reasonRequired")).css("color", "red").hide();
                    $remarkDiv.append(mustInputRemarkDiv);
                    var textRemark = document.createElement("textarea"),
                        $textRemark = $(textRemark);
                    $textRemark.css("height", "120px").css("width", "100%");
                    $remarkDiv.append(textRemark);
                    var dialog = new InfoPlus.Render.Dialog({
                        content: remarkDiv,
                        maxWidth: 600,
                        buttons: [
                            {
                                name: $$.lt("common.ok"),
                                callback: function () {
                                    var remark = $textRemark.val() || '';
                                    if ($IU.trimString(remark) === '') {
                                        if (!$mustInputRemarkDiv.is(":visible")) {
                                            $mustInputRemarkDiv.show().effect('highlight');
                                        } else {
                                            $mustInputRemarkDiv.effect('pulsate');
                                        }
                                        return false;
                                    } else {
                                        saveToServer(remark);
                                    }
                                },
                                defaultButton: true,
                                preventDefault: true
                            },
                            {
                                name: $$.lt("common.cancel")
                            }
                        ]
                    });
                    dialog.show();
                } else {
                    return saveToServer();
                }

            });
        },

        review: function () {
            //批注之前先展开所有移动版的view
            if ($$.MOBILE) {
                $IU.mobileExpandAllViews();
            }

            //先用表单上已有的批注刷新一下$$.params.review
            $IU.refreshReviewByForm();

            var memoMaker = new InfoPlus.MemoMaker({
                data: $$.params.review,
                onFinish: function () {
                    $IU.refreshReviewByForm($(memoMaker.maskDiv));
                    memoMaker.close();
                    $IU.refreshFormReviews();
                },
                onCancel: function () {
                    memoMaker.close();
                    $IU.refreshFormReviews();
                }
            });
            memoMaker.render();
            memoMaker.show();


        },

        /**
         * 打印
         */
        print: function () {
            if (!$$.params.readOnly && $$.params.printAfterAction) {
                $IU.messageBox(null, $$.lt("print.printAfterAction"), null, 300);
                return false;
            }
            $IU.openUrl($IU.processUrl($$.params.printUrl, "membership"), null, "_blank");
        },

        /**
         * 下载
         * @param afterAction{boolean} 是否是在办理后调用的此次下载，缺省false
         */
        download: function (afterAction) {
            if (!$$.params.readOnly && $$.params.downloadAfterAction) {
                $IU.messageBox(null, $$.lt("download.pleaseDownloadAfterAction"), null, 300);
                return false;
            }

            var contentDiv = document.createElement("div");
            var wordRadio = document.createElement("input");
            wordRadio.type = "radio";
            wordRadio.name = "optDownloadType";
            var radioLabel = document.createElement("label");
            radioLabel.appendChild(wordRadio);
            $(radioLabel).addClass("download_radio_div").val("   ");
            var downloadDiv = document.createElement("div");
            $(downloadDiv).addClass("download_word");
            downloadDiv.appendChild(radioLabel);
            contentDiv.appendChild(downloadDiv);

            var pdfRadio = document.createElement("input");
            pdfRadio.type = "radio";
            pdfRadio.name = "optDownloadType";
            radioLabel = document.createElement("label");
            radioLabel.appendChild(pdfRadio);
            $(radioLabel).addClass("download_radio_div").val("   ");
            downloadDiv = document.createElement("div");
            $(downloadDiv).addClass("download_pdf");
            downloadDiv.appendChild(radioLabel);
            contentDiv.appendChild(downloadDiv);
            $(contentDiv).addClass("download_content_div");

            //如果只读导出，那么只能导出pdf
            if ($$.params.exportReadOnly) {
                wordRadio.disabled = true;
                pdfRadio.checked = true;
                $(wordRadio).parents("div.download_word").addClass("download_disable");
            } else {
                wordRadio.checked = true;
            }

            var cancelButton = {
                    name: $$.lt("common.cancel")
                },
                okButton = {
                    name: $$.lt("common.ok"),
                    defaultButton: true,
                    callback: function () {
                        if (wordRadio.checked === true) {
                            $IU.openUrl($IU.processUrl($$.params.downloadWordUrl, "membership"), contentDiv, "_blank");
                        } else {
                            $IU.openUrl($IU.processUrl($$.params.downloadPdfUrl, "membership"), contentDiv, "_blank");
                        }
                    }
                },
                saveAndDownloadButton = {
                    name: $$.lt("download.saveBeforeDownload"),
                    defaultButton: true,
                    callback: function () {
                        $$.save(function () {

                            var downloaded = false;
                            var downloadAfterSave = function () {
                                // 调用downloadAfterSave有两个时机，一个是点击确定时，一个是这个保存成功对话框onClose时，为了只调用一次，这里用了一个是否已经下载的标记
                                if (downloaded === true) {
                                    return;
                                }
                                if (wordRadio.checked === true) {
                                    $IU.openUrl($IU.processUrl($$.params.downloadWordUrl, "membership"), contentDiv, "_blank");
                                } else {
                                    $IU.openUrl($IU.processUrl($$.params.downloadPdfUrl, "membership"), contentDiv, "_blank");
                                }
                                downloaded = true;
                                saveSuccessDialog.close();
                            };

                            var saveSuccessDialog = new InfoPlus.Render.Dialog({
                                content: $$.lt("save.success"),
                                maxWidth: 240,
                                //设置一个beforeClose回调是因为如果用户没有点击确定，而是点击了保存成功对话框外的任何区域，那么这个保存成功对话框会消失，
                                //但是并不会下载，加上这个beforeClose回调确保下载。之所以是beforeClose，而不是onClose是为了保证ios下也能下载成功
                                //ios下$IU.openUrl方法生效需要原来点击事件发生的元素还没有消失才行，onClose回调执行时这个对话框已经消失了，ios下就会无效
                                beforeClose: downloadAfterSave,
                                buttons: [
                                    {
                                        name: $$.lt("download.start"),
                                        defaultButton: true,
                                        callback: downloadAfterSave,
                                        callOnClose: false
                                    }
                                ]
                            });
                            saveSuccessDialog.show();
                        });
                    }
                },
                buttons = [okButton, cancelButton];
            //如果不是办理后下载，且有可存盘，那么就加入保存并下载按钮
            if (afterAction !== true && $$.params.saveable) {
                okButton.defaultButton = false;
                okButton.name = $$.lt("download.downloadDirectly");
                okButton.preventDefault = true;
                okButton.callback = function () {
                    $IU.confirmBox($$.lt("download.downloadDirectlyTip"), $$.lt("download.confirmDownloadDirectly"), $$.lt("common.ok"), 320, function () {
                        if (wordRadio.checked === true) {
                            $IU.openUrl($IU.processUrl($$.params.downloadWordUrl, "membership"), contentDiv, "_blank");
                        } else {
                            $IU.openUrl($IU.processUrl($$.params.downloadPdfUrl, "membership"), contentDiv, "_blank");
                        }
                        dialog.close();
                    });
                    return false;
                };
                buttons.splice(0, 0, saveAndDownloadButton);
            }


            var dialog = new InfoPlus.Render.Dialog({
                title: $$.lt("download.choose"),
                content: contentDiv,
                maxWidth: 340,
                buttons: buttons
            });
            dialog.show();
        },

        /**
         * 填表说明
         */
        instruct: function () {
            if ($$.params.instructionUrl == null) return;
            if (!$$.MOBILE) {
                var $titleHolder = $("#title_holder"),
                    titleHeight = $titleHolder.height(),
                    commandHeight = $("#command_holder").height(),
                    titleTop = parseInt($titleHolder.parent().css("top"), 10),
                    titleCommandHeight = titleHeight + commandHeight + (isNaN(titleTop) ? 0 : titleTop),//如果标题栏滚动后隐藏，titleTop会是一个负数
                    //40是dialog的title高度，48是dialog_body的padding,4是iframe的border,20是留白高度，由于Dialog还没创建显示，所以无法动态计算，这里只能写这些固定值，如果未来改变CSS，需要这里改动这些数字
                    dialogTitleHeight = 40,
                    dialogPadding = 48,
                    iframeBorder = 4,
                    margin = 20,
                    suggestHeight = $(window).height() - titleCommandHeight - dialogTitleHeight - dialogPadding - iframeBorder - margin;
                $IU.iframeBox($$.params.instructionUrl, $$.lt("common.instruction"), true, false, $(window).width(), suggestHeight);
            } else {
                var page = new InfoPlus.Render.Mobile.Page({
                    title: $$.lt("common.instruction"),
                    appendToBody: true,
                    uri: $$.params.instructionUrl
                });
                page.show();
            }
        },

        /**
         * 比较
         */
        compare: function () {
            var history = $$.params.sameStepHistoryList;
            if (history == null || history.length === 0) {
                return false;
            }

            var content = document.createElement("div"),
                $content = $(content),
                introduce = document.createElement("div"),
                historyContent = document.createElement("ul");
            $(introduce).text($$.lt("compare.introduce")).addClass("compareIntroduce");
            $content.append(introduce);
            for (var i = 0, len = history.length; i < len; i++) {
                var remark = history[i];
                var li = document.createElement("li");
                var label = document.createElement("label");
                var input = document.createElement("input");
                input.value = remark.formStepId;
                input.checked = (i === 0);
                $(input).attr("type", "radio")
                    .attr("name", "comparedHistoryOption")
                    .addClass("comparedHistoryOption");
                if (remark.actionTime) {
                    var text = remark.actionTime + " " + $IU.unixTimeToLocalTimeString(remark.actionTime);
                } else {
                    $(input).data("initIndex", i);
                    text = remark.name || $$.lt("compare.initData");
                }
                var textNode = document.createTextNode(text);
                $(label).append(input)
                    .append(textNode)
                    .addClass("comparedHistoryLabel");
                li.appendChild(label);
                historyContent.appendChild(li);
            }

            $content.append(historyContent);
            var buttons = [{
                name: $$.lt("compare.compare"),
                defaultButton: true,
                callback: function () {
                    InfoPlus.Comparer.clearAll(true);

                    var $optionsList = $(".comparedHistoryOption"),
                        historyStepId,
                        compareInitDataIndex;
                    $optionsList.each(function () {
                        if (this.checked) {
                            if ($(this).data("initIndex") != null) {
                                compareInitDataIndex = $(this).data("initIndex");
                            } else {
                                historyStepId = this.value;
                            }
                        }
                    });

                    if (historyStepId != null) {
                        $$.blockUI({ message: $$.lt("compare.requesting") });
                        $$.ajax({
                            type: "POST",
                            url: $$.params.uriCompare + "/" + historyStepId,
                            data: {
                                compareTo: $$.params.formStepId
                            },
                            requestMsg: $$.lt("compare.requestHistory"),
                            beforeShowErrorMsg: function () {
                                $.unblockUI();
                            }
                        }).done(function (data) {
                            if (data.entities != null && data.entities.length > 0) {
                                var oldData = $IU.convertData(data.entities[0]),
                                    newData = $IU.convertData($$.params.formRender.save({}));
                                var comparer = new InfoPlus.Comparer(oldData, newData);
                                comparer.compare();
                            }
                        }).always(function () {
                            $.unblockUI();
                        });
                    } else {
                        $IU.compareInitData(compareInitDataIndex);
                    }
                }
            }, {
                name: $$.lt("common.cancel")
            }];

            var dialog = new InfoPlus.Render.Dialog(
                {
                    content: content,
                    maxWidth: 400,
                    buttons: buttons
                }
            );
            dialog.show();
        },

        /**
         * 打印物品
         */
        printInvoice: function () {
            if (!$$.params.printInvoice) {
                return;
            }
            var printWindow;
            var $thingControlElements = $(".infoplus_thingControl"),
                $invoiceDiv = $('#div_invoice');
            $invoiceDiv.empty();

            var imgReady = [],
                windowReady = false;

            var print = function () {
                //所有图片和window本身都load完再打印
                if (!windowReady) return;
                for (var i = 0, len = imgReady.length; i < len; i++) {
                    if (!imgReady[i]) return;
                }
                printWindow.focus();
                printWindow.print();
                printWindow.close();
            };

            var allEmpty = function () {
                var result = true;
                $thingControlElements.each(function () {
                    var thisControl = $(this).data($Control.DATA_CONTROL_OBJECT);
                    if (thisControl != null) {
                        var printContent = thisControl.getPrintContent(imgReady, print);
                        if (printContent != null) {
                            result = false;
                        }
                    }
                });
                return result;
            };

            var addThingContent = function (printThingIds) {
                $thingControlElements.each(function () {
                    var thisControl = $(this).data($Control.DATA_CONTROL_OBJECT);
                    if (thisControl != null) {
                        var shouldPrint = true;
                        if (printThingIds != null) {
                            shouldPrint = false;
                            for (var i = 0, len = printThingIds.length; i < len; i++) {
                                if (printThingIds[i] === thisControl.getValue().value) {
                                    shouldPrint = true;
                                }
                            }
                        }
                        if (shouldPrint) {
                            var printContent = thisControl.getPrintContent(imgReady, print);
                            if (printContent != null) {
                                $invoiceDiv.append(printContent);
                            }
                        }
                    }
                });
            };

            var selectThing = function () {
                var contentDiv = document.createElement("div");

                var checks = [];
                for (var i = 0, len = $thingControlElements.length; i < len; i++) {
                    var thisControl = $($thingControlElements[i]).data($Control.DATA_CONTROL_OBJECT),
                        value = thisControl.getValue();
                    if (value.displayValue === '') {
                        continue;
                    }
                    var label = document.createElement("label"),
                        input = document.createElement("input");
                    input.type = "checkbox";
                    input.value = value.value;
                    input.checked = true;

                    var textNode = document.createTextNode(value.displayValue);

                    $(label).append(input).append(textNode).addClass("choosePrintThingLabel");
                    contentDiv.appendChild(label);
                    checks.push(input);
                }

                var buttons = [
                    {
                        name: $$.lt("common.ok"),
                        defaultButton: true,
                        callback: function () {
                            var checkedThingIds = [];
                            for (i = 0, len = checks.length; i < len; i++) {
                                if (checks[i].checked) {
                                    checkedThingIds.push(checks[i].value);
                                }
                            }
                            setTimeout(function () {
                                addThingContent(checkedThingIds);
                                openPrintPage();
                            }, 1000);
                        }
                    },
                    {
                        name: $$.lt("common.cancel")
                    }
                ];

                var dialog = new InfoPlus.Render.Dialog({
                    title: $$.lt("thing.choosePrint"),
                    content: contentDiv,
                    maxWidth: 340,
                    buttons: buttons
                });
                dialog.show();
            };

            var openPrintPage = function () {
                printWindow = window.open();
                var html = $invoiceDiv.html();

                printWindow.document.write("<style>body {text-align:center}</style>" + html);
                printWindow.document.close();

                var onWindowReady = function () {
                    if (!windowReady) {
                        windowReady = true;
                        print();
                    }
                };

                $(printWindow).load(onWindowReady);
                $(printWindow.document).ready(onWindowReady);
            };

            if (!allEmpty()) {
                if ($thingControlElements.length === 1) {
                    addThingContent();
                    openPrintPage();
                } else {
                    selectThing();
                }

            } else {
                $IU.messageBox(null, $$.lt("thing.nothingToPrint"), null, 300);
            }

        },

        /**
         *  获取表单上所有field
         */
        getFields: function () {
            if (infoCore.entity == null) return null;
            return infoCore.entity.fields;
        },

        /**
         * 将数据中的_VAR_开头的全局变量放到全局context中，以后组装context时候可以用
         */
        getGlobalContext: function (data) {
            var getValuePairArray = function (codes, names) {
                var vps = [];
                for (var i = 0, len = codes.length; i < len; i++) {
                    vps.push(new $Controls.Data.ValuePair(codes[i], (names[i] !== undefined) ? names[i] : codes[i]));
                }
                return vps;
            };
            var getVarFromHiddenControls = function () {
                var d = {};
                $$.params.renderForm.find("." + $Control.CLASSNAME_VAR).each(function () {
                    var thisControl = $(this).data($Control.DATA_CONTROL_OBJECT);
                    d[thisControl.field.name] = thisControl.getValue();
                });
                return d;
            };
            if (data == null) {
                data = getVarFromHiddenControls();
            }
            var context = {};
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    if ($IU.beginWith(key, '_VAR_')) {
                        if (data[key + "_name"] !== undefined) {
                            context[key] = new $Controls.Data.ValuePair(data[key], data[key + "_name"]);
                            continue;
                        }
                        if (data[key + "_Name"] !== undefined) {
                            context[key] = new $Controls.Data.ValuePair(data[key], data[key + "_Name"]);
                            continue;
                        }
                        if (data[key + "_Names"] !== undefined) {
                            context[key] = getValuePairArray($IU.splitAttribute(data[key]), $IU.splitAttribute(data[key + "_Names"]));
                            continue;
                        }
                        if ($IU.endWith(key, '_Codes')) {
                            var attrName = key.substring(0, key.length - 6);
                            context[attrName] = getValuePairArray($IU.splitAttribute(data[key]), data[attrName + "_Names"] !== undefined ? $IU.splitAttribute(data[attrName + "_Names"]) : []);
                            context[key] = data[key];
                            continue;
                        }
                        if (!context.hasOwnProperty(key)) {
                            context[key] = data[key];
                        }
                    }
                }
            }
            return context;
        },


        /**
         * 封装jquery.blockUI插件
         */
        blockUI: function (options) {
            var default_css = {
                border: 'none',
                padding: '15px',
                backgroundColor: '#000',
                '-webkit-border-radius': '10px',
                '-moz-border-radius': '10px',
                opacity: .5,
                color: '#fff',
                cursor: 'pointer',
                width: $$.MOBILE ? '80%' : '45%',
                top: '40%',
                left: $$.MOBILE ? '10%' : '28%',
                textAlign: 'center'
            };

            options['css'] = $.extend({}, default_css, options['css'] || {});

            $.blockUI(options);

        },

        /**
         * 获取多语言文本
         */
        getLocaleText: function (name) {
            var result = InfoPlus.Language,
                names = name.split(".");
            for (var i = 0, len = names.length; i < len; i++) {
                result = result[names[i]];
                if (result == null) {
                    if ($$.params.isRelease === false) {
                        $$.log("locale text not found->" + name + "(" + $$.params.lang + ")");
                    }
                    return "";
                }
            }
            return result;
        },

        /**
         * 获取多语言文本，可替换参数
         */
        lt: function (name) {
            var text = $$.getLocaleText(name);
            if (arguments.length === 1) {
                return text;
            } else {
                for (var i = 1, len = arguments.length; i < len; i++) {
                    text = text.replace("{" + (i - 1) + "}", arguments[i]);
                }
                return text;
            }
        },

        /**
         * 获取html格式多语言文本，可替换参数
         */
        hlt: function (name) {
            var text = $IU.htmlEncode($$.getLocaleText(name));
            if (arguments.length === 1) {
                return text;
            } else {
                for (var i = 1, len = arguments.length; i < len; i++) {
                    text = text.replace("{" + (i - 1) + "}", arguments[i]);
                }
                return text;
            }
        },

        /**
         * 转换地图经纬度坐标，实现WGS84坐标系和百度坐标互转
         * lng:精度
         * lat:纬度
         * isBaidu:是否是百度坐标，如果是就是百度转WGS84,否则就是WGS84转百度
         */
        transformLocation: function (lng, lat, isWGS) {
            if (isWGS === true) {
                return InfoPlus.CoordTransform.wgstobd(lng, lat);
            } else {
                return InfoPlus.CoordTransform.bdtowgs(lng, lat);
            }
        }

    });

    window.infoCore = window.$$ = infoCore;


})(jQuery, window);

﻿/**
 * FieldChangeEventProcessor
 * @Author yech
 * @Since 2012/06/12
 */

(function (window, undefined) {

    var fieldChangeEventProcessor = function () {
    };

    fieldChangeEventProcessor.prototype = {

        blockChangedField: function (element, clickFireFieldChange) {
            if (!$(element).is(":visible")) {
                return;
            }
            var blockElement;
            blockElement = $(element).parents("div")[0];
            $(blockElement).block({
                message: clickFireFieldChange ? "<span class='blockingNoText'>&nbsp;&nbsp;&nbsp;&nbsp;</span>" : "<span class='blocking'>" + $$.lt("common.wait") + "</span>",
                css: {
                    border: 'none',
                    padding: clickFireFieldChange ? '0' : '3px 0 3px 0',
                    backgroundColor: '#AFC5DE',
                    opacity: 0.6,
                    cursor: 'not-allowed',
                    width: '100%',
                    textAlign: 'center',
                    height: $(element).outerHeight() + "px",
                    minHeight: '22px'
                },
                overlayCSS: {
                    backgroundColor: '#AFC5DE',
                    width: '100%',
                    opacity: 0.6
                }
            });
            return blockElement;
        },

        getFieldChangeSendData: function (control, formData) {
            var value = control.getValue();
            if (value == null) value = "";
            if (value instanceof $Controls.Data.ValuePair || value instanceof $Controls.Data.Uri) {
                value = value.value;
            }
            var element = control.element;
            var fieldName = $(element).data($Control.DATA_FIELD);
            var path = $(element).data($Control.DATA_PATH);
            //当这个控件已经从dom中移除，那么data将取不到内容
            if (fieldName == null || path == null) {
                return null;
            }
            return {
                formData: (formData !== undefined) ? $.toJSON(formData) : null,
                fieldName: fieldName,
                fieldValue: value,
                path: path,
                boundFields: $$.params.boundFields.toString()
            };
        },

        fieldChangeEvent: function (control, formData) {

            var requestData = this.getFieldChangeSendData(control, formData);
            //如果由于控件已经从dom中移除而取不到请求内容，那么就不请求了
            if (requestData == null) {
                var defer = $.Deferred();
                return defer.reject({ error: "控件不存在" });
            }

            var errorTipElement = control.controlContainer || control.element,
                blockElement = control.element;


            //对于由于fieldChange已经冒过出错提示气泡的控件，在这次fieldChange前先去除以前的气泡
            if (control.popError === true) {
                control.popError = false;
                $(errorTipElement).validationEngine("hidePrompt");
            }

            var blockElement = this.blockChangedField(blockElement, control.clickFireFieldChange);

            //记录正在执行onFieldChange,为数据过来之后给表单赋值时，只对fieldChangePath上层的控件执行公式做准备（样式和动作还是都需要执行的）
            $$.params.fieldChanging = {
                controls: [],
                names: null
            };
            /*
             $$.params.fieldChanging = true;
             $$.params.fieldChangePath = requestData.path;
             $$.params.fieldChangeNames = null;
             */

            var processData = function (data) {
                if (data == null || data.entities == null || !$IU.isArray(data.entities)) return;
                if (data.entities.length > 0) {
                    if ($$.params.fieldChanging == null) {
                        $$.params.fieldChanging = {
                            controls: [],
                            names: null
                        };
                    }
                    if (data.entities[0].hasOwnProperty("fieldName")) {
                        //旧格式
                        var entities = data.entities;
                        $$.params.fieldChanging.names = $IU.getFieldNamesFromFieldChangeOldData(entities);
                        var fieldChangeControls = [];
                        for (var i = 0; i < entities.length; i++) {
                            var fdName = entities[i].fieldName + entities[i].fieldPath;
                            if (document.getElementsByName(fdName).length === 0) {
                                var hiddenControl = $IU.addVariableControl(fdName, entities[i].fieldValue, entities[i].fieldDisplayValue);
                                //对新增过来的全局变量全部加上fieldChange，当然这可能有些浪费，以后会修改
                                hiddenControl.onFieldRefer = true;
                                hiddenControl.addFieldChangeClass();
                                fieldChangeControls.push(hiddenControl);
                            } else {
                                $IU.setElementValue(fdName, entities[i].fieldValue, entities[i].fieldDisplayValue);
                            }
                        }
                        //重新设置globalContext
                        $$.dynamics.globalContext = $$.getGlobalContext();

                        for (i = 0; i < fieldChangeControls.length; i++) {
                            hiddenControl = fieldChangeControls[i];
                            $(hiddenControl.element).change();
                        }

                    } else {
                        //新格式
                        var changedData = $.parseJSON(data.entities[0]);
                        delete changedData["entityIndex"];
                        $$.params.fieldChanging.names = $IU.getFieldNamesFromFieldChangeData(changedData);
                        // add by marstone, 2015/09/01, parse path from the 2nd formData
                        var path = $.type(data.entities[1]) === "string" ? data.entities[1] : requestData.path;
                        $IU.setFormData(changedData, path, false);
                        //重新绑定验证，否则新增出来的重复行缺少自动验证
                        $IU.rebindValidationEngine();
                    }
                }
            };


            return $$.ajax({
                type: "POST",
                url: $$.params.formRender.fieldChangeService,
                data: requestData,
                errorTitle: null,
                errorTipElement: errorTipElement,
                block: true,
                addFormParam: true
            }).always(function () {
                if (blockElement != null) $(blockElement).unblock();
                blockElement = null;
            }).done(function (data) {
                processData(data);
            }).fail(function (data) {
                //如果是canceled(messenger端抛错)，仍旧需要处理返回的数据
                if (data['errCode'] === 'EVENT_CANCELLED') {
                    processData(data.data);
                }
            }).always(function (d) {
                //console.log(d);
                //延时是为了在fieldChange中连环触发公式的控件做完
                setTimeout(function () {
                    $$.params.fieldChanging = null;
                }, 0);

            });

        }
    };

    define("InfoPlus.Controls.Event.FieldChangeEventProcessor", fieldChangeEventProcessor);

})(window);

/**
 *  DynamicAnalyzer  动态分析器
 *  @Author yech
 *  @Since 2016/02/23
 */

(function (window, undefined) {

    var analyzer = function () {
    };


    analyzer.prototype = {


        analysisDynamic: function (dynamics, keyName, fieldRowIndexName, fieldGroupCountName, parentFieldName) {

            //key(字段名或者重复节表名)是否已经分析过
            var hasAnalysed = function (key) {
                return $$.dynamics.styles[key] !== undefined ||
                    $$.dynamics.formulas[key] !== undefined ||
                    $$.dynamics.actions[key] !== undefined ||
                    $$.dynamics.validations[key] !== undefined;
            };

            if (hasAnalysed(keyName) || dynamics == null || !$IU.isArray(dynamics)) {
                return;
            }
            if (parentFieldName !== undefined) {
                if (dynamics === undefined) {
                    dynamics = [];
                }
                dynamics.push({
                    key: 'parentValue', values: [
                        { value: '$' + parentFieldName, condition: 'true' }
                    ]
                });
            }

            var styles = [],
                rowStyles = [],
                repeatItemStyles = [],
                formulas = [],
                actions = [],
                validations = [],
                repeatItemActions = [];

            var pushArray = function (originArray, pushArray) {
                if (pushArray == null || !$IU.isArray(pushArray)) {
                    return;
                }
                for (var index = 0, l = pushArray.length; index < l; index++) {
                    originArray.push(pushArray[index]);
                }
            };

            for (var i = 0, len = dynamics.length; i < len; i++) {
                var dynamic = dynamics[i],
                    actionName = dynamic['key'],
                    values = dynamic['values'];
                if (actionName === 'value') {
                    pushArray(formulas, values);
                    continue;
                }
                if (actionName === 'style') {
                    pushArray(styles, values);
                    continue;
                }
                //行样式（控件所在tr或者所在重复节表中的行的样式）
                if (actionName === 'rowStyle') {
                    pushArray(rowStyles, values);
                    continue;
                }
                //重复节表行样式
                if (actionName === 'itemStyle') {
                    pushArray(repeatItemStyles, values);
                    continue;
                }
                //目前重复节表行的动作只有itemVisible,假设以后行级动作都以item开头命名
                if (actionName.substr(0, 4) === 'item' && keyName.substr(0, 5) === "group") {
                    pushArray(repeatItemActions, [{ actionName: actionName, actions: values }]);
                    continue;
                }

                //验证
                if (actionName === 'validation') {
                    pushArray(validations, values);
                    continue;
                }


                pushArray(actions, [{ actionName: actionName, actions: values }]);
            }

            this.analysisDynamicStyles(styles, rowStyles, repeatItemStyles, keyName, fieldRowIndexName, fieldGroupCountName);
            this.analysisDynamicFormulas(formulas, keyName, fieldRowIndexName, fieldGroupCountName);
            this.analysisDynamicActions(actions, repeatItemActions, keyName, fieldRowIndexName, fieldGroupCountName);
            this.analysisDynamicValidations(validations, keyName, fieldRowIndexName, fieldGroupCountName);

        },

        //分析动态样式，将动态样式建立到$$.dynamics.styles以及$$.dynamics.referedStyles中
        analysisDynamicStyles: function (styles, rowStyles, repeatItemStyles, styleKeyName, fieldRowIndexName, fieldGroupCountName) {
            if (styles.length === 0 && rowStyles.length === 0 && repeatItemStyles.length === 0) return;
            var dynamics = $$.dynamics;
            if (dynamics.styles[styleKeyName] !== undefined) return;
            var compiledStyles = [];

            var analysis = function (analysisStyles, isRowStyle, isRepeatItemStyle) {
                for (var i = 0, styleLen = analysisStyles.length; i < styleLen; i++) {
                    var dynamicStyle = new InfoPlus.Dynamics.Style({
                        style: analysisStyles[i].value,
                        condition: analysisStyles[i].condition,
                        isRowStyle: isRowStyle,
                        isRepeatItemStyle: isRepeatItemStyle,
                        fieldRowIndexName: fieldRowIndexName,
                        fieldGroupCountName: fieldGroupCountName,
                        keyName: styleKeyName
                    });
                    compiledStyles.push(dynamicStyle);
                    var refNames = dynamicStyle.references,
                        len = refNames.length;
                    for (var refIndex = 0; refIndex < len; refIndex++) {
                        var refName = refNames[refIndex];
                        //不是值的变化不会引起连锁变化，所以如果是STYLE，不用考虑自循环
                        //if (refName == styleKeyName) {
                        //    continue;
                        //}
                        if (dynamics.referedStyles[refName] === undefined) {
                            dynamics.referedStyles[refName] = [];
                        }
                        dynamics.referedStyles[refName].push(dynamicStyle.getReferedStyle(styleKeyName));
                    }
                }
            };
            analysis(styles, false, false);
            analysis(rowStyles, true, false);
            analysis(repeatItemStyles, false, true);
            dynamics.styles[styleKeyName] = compiledStyles;
        },

        //分析动态公式,将动态公式建立到$$.dynamics.formulas以及$$.dynamics.referedFormulas
        analysisDynamicFormulas: function (formulas, formulaKeyName, fieldRowIndexName, fieldGroupCountName) {
            if (formulas.length > 0) {
                var dynamics = $$.dynamics;
                if (dynamics.formulas[formulaKeyName] === undefined) {
                    var compiledFormulas = [];
                    for (var i = 0, formulaLen = formulas.length; i < formulaLen; i++) {
                        if (formulas[i].value == null || formulas[i].value === '') {
                            continue;
                        }
                        var dynamicFormula = new InfoPlus.Dynamics.Formula({
                            formula: formulas[i].value,
                            condition: formulas[i].condition,
                            fieldRowIndexName: fieldRowIndexName,
                            fieldGroupCountName: fieldGroupCountName,
                            keyName: formulaKeyName
                        });
                        compiledFormulas.push(dynamicFormula);
                        var refNames = dynamicFormula.references,
                            len = refNames.length;
                        for (var refIndex = 0; refIndex < len; refIndex++) {
                            var refName = refNames[refIndex];
                            if (refName === formulaKeyName) {
                                continue;
                            }
                            if (dynamics.referedFormulas[refName] === undefined) {
                                dynamics.referedFormulas[refName] = [];
                            }
                            dynamics.referedFormulas[refName].push(dynamicFormula.getReferedFormula(formulaKeyName));
                        }
                    }
                    dynamics.formulas[formulaKeyName] = compiledFormulas;
                }
            }
        },

        //分析动态动作,将动态动作建立到$$.dynamics.actions以及$$.dynamics.referedActions
        analysisDynamicActions: function (actionArray, repeatItemActionArray, actionKeyName, fieldRowIndexName, fieldGroupCountName) {
            if (actionArray.length === 0 && repeatItemActionArray.length === 0) return;
            var dynamics = $$.dynamics;
            if (dynamics.actions[actionKeyName] !== undefined) return;

            var compiledActions = [];

            var analysis = function (analysisActions, isRepeatItemAction) {
                for (var index = 0, l = analysisActions.length; index < l; index++) {
                    var actionName = analysisActions[index].actionName,
                        actions = analysisActions[index].actions;
                    for (var i = 0, actionLen = actions.length; i < actionLen; i++) {
                        var action = actions[i],
                            actionString = '';
                        if (action.value != null && action.value !== '') {
                            //如果动态动作的参数是用一对小括号括起来的，说明需要用params函数来解析，即()是params()的语法糖
                            if ($IU.isDynamicActionCallWithParams(actionName, action.value)) {
                                action.value = "params" + $IU.trimString(action.value);
                            }
                            if (!isRepeatItemAction) {
                                actionString = actionName + '(' + action.value + ',$fromInit)';
                            } else {
                                actionString = actionName + '(' + action.value + ',$' + fieldRowIndexName + ',$fromInit)';
                            }
                        } else {
                            //action.value为空时候不应该建立动态动作，因为目前所有动作都有第一个参数（第二个参数是fromInit），如果这里建立了缺少第一个参数的动作，
                            //执行时候就会将fromInit这个参数作为第一个参数传入，导致错误
                            $IU.debugTip($$.lt("dynamics.error.valueNotSet", actionKeyName, actionName), 'warning');
                            continue;
                            /*
                            if (!isRepeatItemAction) {
                                actionString = actionName + '($fromInit)';
                            } else {
                                actionString = actionName + '($' + fieldRowIndexName + ',$fromInit)';
                            }
                            */
                        }
                        var dynamicAction = new InfoPlus.Dynamics.Action({
                            action: actionString,
                            condition: action.condition,
                            isRepeatItemAction: isRepeatItemAction,
                            fieldRowIndexName: fieldRowIndexName,
                            fieldGroupCountName: fieldGroupCountName,
                            keyName: actionKeyName
                        });
                        compiledActions.push(dynamicAction);
                        var refNames = dynamicAction.references,
                            len = refNames.length;
                        for (var refIndex = 0; refIndex < len; refIndex++) {
                            var refName = refNames[refIndex];
                            //动作允许自环
                            /*
                             if (refName == actionKeyName) {
                             continue;
                             }
                             */
                            if (dynamics.referedActions[refName] === undefined) {
                                dynamics.referedActions[refName] = [];
                            }
                            dynamics.referedActions[refName].push(dynamicAction.getReferedAction(actionKeyName));
                        }
                    }
                }
            };

            analysis(actionArray, false);
            analysis(repeatItemActionArray, true);
            dynamics.actions[actionKeyName] = compiledActions;

        },

        //分析动态验证,将动态验证建立到$$.dynamics.validations以及$$.dynamics.referedValidations
        analysisDynamicValidations: function (validations, validationKeyName, fieldRowIndexName, fieldGroupCountName) {
            if (validations.length === 0) return;
            var dynamics = $$.dynamics;
            if (dynamics.validations[validationKeyName] !== undefined) return;

            var compiledValidations = [];

            for (var index = 0, l = validations.length; index < l; index++) {
                var dynamicValidation = new InfoPlus.Dynamics.Validation({
                    tip: validations[index].value,
                    condition: validations[index].condition,
                    fieldRowIndexName: fieldRowIndexName,
                    fieldGroupCountName: fieldGroupCountName,
                    keyName: validationKeyName
                });
                compiledValidations.push(dynamicValidation);
                var refNames = dynamicValidation.references,
                    len = refNames.length;
                for (var refIndex = 0; refIndex < len; refIndex++) {
                    var refName = refNames[refIndex];
                    if (dynamics.referedValidations[refName] === undefined) {
                        dynamics.referedValidations[refName] = [];
                    }
                    dynamics.referedValidations[refName].push(dynamicValidation.getReferedValidation(validationKeyName));
                }
            }

            dynamics.validations[validationKeyName] = compiledValidations;

        }


    };


    define("InfoPlus.Dynamics.Analyzer", analyzer);

})(window);

/**
 *  DynamicProcessor
 *  @Author yech
 *  @Since 2015/01/09
 */

(function (window, undefined) {

    var dynamicProcessor = function () {
    };

    dynamicProcessor.prototype = {


        /**
         * 获取某控件所能影响的控件数组（根据实际dynamicData来过滤筛选,这个dynamicData可以是styles,formulas,actions）
         * @param control 引起影响的控件
         * @param pathReferedControls 控件可能影响的所有控件数组，从这里面筛选,这个数组是由PATH初步筛选的
         * @param dynamicData $$.dynamics.styles,$$.dynamics.formulas,$$.dynamics.actions中的一个
         * @returns {Array} 控件数组
         */
        getReferedControls: function (control, pathReferedControls, dynamicData) {
            var referedControls = [];
            for (var controlIndex = 0, rcLen = pathReferedControls.length; controlIndex < rcLen; controlIndex++) {
                var referedControl = pathReferedControls[controlIndex],
                    dynamics = dynamicData[referedControl.getDynamicKeyName()];
                if (dynamics !== undefined && dynamics !== null && $IU.isArray(dynamics)) {
                    for (var i = 0, len = dynamics.length; i < len; i++) {
                        var dynamic = dynamics[i];
                        if ($IU.dynamicReferControl(dynamic, control)) {
                            referedControls.push(referedControl);
                            break;
                        }
                    }
                }
            }

            return referedControls;
        },


        /**
         * 处理影响路径
         * 基本思路是每个control处理fieldReferEvent时候将自己的fieldName加入到referPath,向下一个control传递onFieldRefer时候需要保证传递的路径不产生环路
         * 传递事件的同时将referPath记录到下一个被影响的控件上
         */
        processReferPath: function (control) {
            //记录当前影响路径，加上当前控件field.name
            var path = (control.referPath !== undefined) ? control.referPath : [];
            path.push(control.field.name);
            //清空该控件的影响路径
            control.referPath = undefined;
            return path;
        },

        processRepeatContext: function (originContext, repeatChildFieldNames, rowIndex) {
            var newContext = {};
            for (var key in originContext) {
                if (originContext.hasOwnProperty(key)) {
                    if ($IU.arrayContains(repeatChildFieldNames, key) || key.indexOf("RowIndex") !== -1) {
                        var value = originContext[key];
                        if ($IU.isArray(value)) {
                            if (value[rowIndex] !== undefined) {
                                newContext[key] = value[rowIndex];
                            }
                        }
                    } else {
                        newContext[key] = originContext[key];
                    }
                }
            }
            //这两行代码目前其实已经没有作用，因为公式，样式，动作中的$INDEX会被转换为$fieldGroupXXXRowIndexXXX的形式
            newContext["rowIndex"] = rowIndex;
            newContext["INDEX"] = rowIndex;
            return newContext;
        },

        /**
         * 处理targetControl上定义的动态样式
         * @param targetControl 动态样式目标控件
         * @param render formRender
         * @param referFromControl 引起targetControl需要处理动态样式的控件（该控件的变化引发了targetControl的样式变化），可以为undefined(代表没任何控件变化引起样式变化，只是初始化时候需要执行一次动态样式)
         * @param excludePath 排除的路径 计算context时候需要排除的计算路径，可以为undefined
         * @param fromInit 是否是初始化时候
         */
        processDynamicStyle: function (targetControl, render, referFromControl, excludePath, fromInit) {
            var styles = $$.dynamics.styles[targetControl.getDynamicKeyName()];
            if (!$IU.isArray(styles)) return;

            //保存控件原来的Style
            if (targetControl.repeatParentElement != null) {
                $IU.saveOriginStyles(targetControl.repeatParentElement);
            } else {
                $IU.saveOriginStyles(targetControl.element);
            }

            var $$targetControl = $$(targetControl);
            if (fromInit === true) {
                //初始化时候不用考虑excludePath
                var context = this.getInitControlContext(targetControl);
            } else {
                context = this.getControlContext(targetControl, excludePath);
            }

            for (var styleIndex = 0, len = styles.length; styleIndex < len; styleIndex++) {
                var style = styles[styleIndex];
                if (referFromControl === undefined || (referFromControl !== undefined && $IU.dynamicReferControl(style, referFromControl))) {
                    var compiler = new InfoPlus.Dynamics.Parser.Compile(style.conditionAsts);
                    if (style.isRepeatItemStyle === true) {
                        if (typeof targetControl['getRepeatChildren'] === "function") {
                            var children = targetControl.getRepeatChildren();
                            for (var i = 0, rLen = children.length; i < rLen; i++) {
                                var rowContext = this.processRepeatContext(context, targetControl.fieldNames, i);
                                if (style.ignoreCondition === true || compiler.evaluate(rowContext) === true) {
                                    var row = children[i];
                                    for (var si = 0, sl = style.styles.length; si < sl; si++) {
                                        $IU.setDynamicStyle(row, style.styles[si].name, style.styles[si].value);
                                    }
                                }
                            }
                        }
                    } else {
                        if (style.ignoreCondition === true || compiler.evaluate(context) === true) {
                            if (style.isRowStyle === true) {
                                var $row = targetControl.getRow();
                                if ($row.length > 0) {
                                    for (si = 0, sl = style.styles.length; si < sl; si++) {
                                        $IU.setDynamicStyle($row[0], style.styles[si].name, style.styles[si].value);
                                    }
                                }
                            } else {
                                $$targetControl.css(style.styles);
                            }
                        }
                    }
                }
            }
        },

        /**
         * 处理targetControl上定义的动态动作
         * @param targetControl 动态动作目标控件
         * @param render formRender
         * @param referFromControl 引起targetControl需要执行动态动作的控件（该控件的变化引发了targetControl执行动作），可以为undefined(代表没任何控件变化引起执行动态动作，只是初始化时候需要执行一次动作)
         * @param excludePath 排除的路径 计算context时候需要排除的计算路径，可以为undefined
         * @param fromInit 是否是初始化时候
         */
        processDynamicAction: function (targetControl, render, referFromControl, excludePath, fromInit) {
            var actions = $$.dynamics.actions[targetControl.getDynamicKeyName()];
            if (!$IU.isArray(actions)) return;
            var $$targetControl = $$(targetControl);
            if (fromInit === true) {
                //初始化时候不用考虑excludePath
                var context = this.getInitControlContext(targetControl);
            } else {
                context = this.getControlContext(targetControl, excludePath);
            }

            for (var actionIndex = 0, len = actions.length; actionIndex < len; actionIndex++) {
                var action = actions[actionIndex];
                if (referFromControl === undefined || (referFromControl !== undefined && $IU.dynamicReferControl(action, referFromControl))) {
                    var compiler = new InfoPlus.Dynamics.Parser.Compile(action.conditionAsts);

                    if (action.isRepeatItemAction === false) {
                        if (action.ignoreCondition === true || compiler.evaluate(context) === true) {
                            compiler = new InfoPlus.Dynamics.Parser.Compile(action.actionAsts);
                            compiler.evaluate(context, $$targetControl);
                        }
                    } else {
                        if (typeof targetControl['getRepeatChildren'] === "function") {
                            var children = targetControl.getRepeatChildren();
                            for (var i = 0, rLen = children.length; i < rLen; i++) {
                                var rowContext = this.processRepeatContext(context, targetControl.fieldNames, i);
                                if (action.ignoreCondition === true || compiler.evaluate(rowContext) === true) {
                                    compiler = new InfoPlus.Dynamics.Parser.Compile(action.actionAsts);
                                    compiler.evaluate(rowContext, $$targetControl);
                                }
                            }
                        } else {
                            //impossible
                        }
                    }


                }
            }
        },

        /**
         * 处理targetControl上定义的动态验证
         * @param targetControl 动态验证目标控件
         * @param render formRender
         * @param referFromControl
         * @param excludePath
         */
        processDynamicValidation: function (targetControl, render, referFromControl, excludePath) {
            //如果控件忽略验证，或者只读、动态只读、不可见，那么就不做动态验证了
            if (targetControl.ignoreValidation === true || targetControl.isReadOnly() ||
                targetControl.isDynamicReadonly() || !targetControl.isVisible()) return;
            var validations = $$.dynamics.validations[targetControl.getDynamicKeyName()];
            if (!$IU.isArray(validations)) return;
            var context = this.getControlContext(targetControl, excludePath);

            //如果是radio，那么只在同名的第一个radio这里显示
            var targetElement = targetControl.element;
            if (targetElement.getAttribute("type") === 'radio') {
                var fieldName = targetControl.field.name;
                targetElement = $($("input[name='" + fieldName + "'][type!=hidden]:first"))[0];
            }
            if ($(targetElement).hasClass("infoplus_suggesterControl")) {
                targetElement = $(targetControl.controlContainer).find(".active_input")[0];
            }
            var prompt;
            for (var validationIndex = 0, len = validations.length; validationIndex < len; validationIndex++) {
                var validation = validations[validationIndex];
                if (referFromControl === undefined || (referFromControl !== undefined && $IU.dynamicReferControl(validation, referFromControl))) {
                    var compiler = new InfoPlus.Dynamics.Parser.Compile(validation.conditionAsts);
                    if (validation.ignoreCondition === true || compiler.evaluate(context) === true) {
                        compiler = new InfoPlus.Dynamics.Parser.Compile(validation.tipAsts);
                        var tip = compiler.evaluate(context);
                        if (tip != null && tip !== '') {
                            if (prompt !== undefined) {
                                prompt += "<br/>" + tip;
                            } else {
                                prompt = tip;
                            }


                        }
                    }

                }
            }
            if (prompt === undefined) {
                $(targetElement).validationEngine("hidePrompt");
            } else {
                $(targetElement).validationEngine("showPrompt", prompt, "danger", targetControl.validatorPromptPosition, true);
            }
        },


        /**
         * 处理targetControl上定义的动态公式
         * @param targetControl 动态公式目标控件
         * @param render formRender
         * @param referFromControl 引起targetControl需要处理动态公式的控件（该控件的变化引发了targetControl的值的变化），可以为undefined(重复节表增加一行时，初始化做一次动态公式)
         * @param referPath 影响路径，避免产生环路，可以为undefined
         * @param excludePath 排除的路径 计算context时候需要排除的计算路径，可以为undefined
         * @param fromInit 是否是初始化时候,初始化时候对由于minOccur而增加出来的字段计算初始化公式
         */
        processDynamicFormula: function (targetControl, render, referFromControl, referPath, excludePath, fromInit) {
            var formulas = $$.dynamics.formulas[targetControl.getDynamicKeyName()];
            if (!$IU.isArray(formulas)) return;
            var $$targetControl = $$(targetControl);
            //没有写权限不用refer
            if (!targetControl.isWritable()) return;
            //如果是repeat control,不需要做动态公式（也许以后可以支持，目前不支持）
            if (targetControl.repeatParentElement !== undefined) return;
            //会产生环路的不需要refer
            if (referPath !== undefined && this.foundControlInReferPath(targetControl, referPath)) return;

            if (fromInit === true) {
                //初始化时候不用考虑excludePath
                var context = this.getInitControlContext(targetControl);
            } else {
                context = this.getControlContext(targetControl, excludePath);
            }

            for (var formulaIndex = 0, len = formulas.length; formulaIndex < len; formulaIndex++) {
                var formula = formulas[formulaIndex];
                if (referFromControl === undefined || (referFromControl !== undefined && $IU.dynamicReferControl(formula, referFromControl))) {
                    var compiler = new InfoPlus.Dynamics.Parser.Compile(formula.conditionAsts);
                    if (formula.ignoreCondition === true || compiler.evaluate(context) === true) {
                        compiler = new InfoPlus.Dynamics.Parser.Compile(formula.formulaAsts);
                        var value = compiler.evaluate(context);
                        //是否需要再次联动触发fieldChange,Label、Hidden、Remark、Help、Suggester会在自己的setValue方法里触发，
                        //所以不用这里再触发一次，对于那些原本会自动触发的控件需要在这再触发一次
                        var fireChangeEventAgain = (targetControl.repeatParentElement === undefined && targetControl.shouldFireChangeEventAgain(value));
                        if (value === undefined) {
                            value = null;
                        }
                        $$targetControl.val(value);
                        //如果是序号或者是地图控件不用高亮
                        if (!formula.isRowIndex && targetControl.controlType !== $Control.CONTROL_TYPE_MAP) {
                            if (targetControl.element !== undefined) {
                                $IU.highLightElement(targetControl.element);
                            }
                        }

                        if (fireChangeEventAgain) {
                            //将refer路径传到被影响的控件上
                            targetControl.referPath = referPath;
                            //debug(controlFieldName + "->" + targetControl.field.name + " change again ");
                            setTimeout(function (control) {
                                return function () {
                                    $(control.element).change();
                                };
                            }(targetControl), 0);
                        }
                    }
                }
            }
        },

        /**
         * 处理由referFromControl引发的动态样式
         * @param referFromControl 发生refer事件的控件
         * @param referedControls 可以受发生refer事件的控件影响的控件数组,这个由PATH初步筛选
         * @param render formRender对象
         * @param excludePath 排除的路径
         */
        processReferedStyle: function (referFromControl, referedControls, render, excludePath) {
            var referedStyleControls = this.getReferedControls(referFromControl, referedControls, $$.dynamics.styles);
            for (var controlIndex = 0, controlLength = referedStyleControls.length; controlIndex < controlLength; controlIndex++) {
                var targetControl = referedStyleControls[controlIndex];
                this.processDynamicStyle(targetControl, render, referFromControl, excludePath);
            }
        },


        /**
         * 检查如果影响targetControl是否会引起产生refer环路
         * @param targetControl 检查的控件
         * @param referPath 已有的referPath
         * @returns {boolean} 如果targetControl的dynamicKeyName在referPath中已经出现过就返回true,否则false
         */
        foundControlInReferPath: function (targetControl, referPath) {
            for (var referPathIndex = 0; referPathIndex < referPath.length; referPathIndex++) {
                //if (referPath[referPathIndex] === targetControl.field.name) {
                if (referPath[referPathIndex] === targetControl.getDynamicKeyName()) {
                    //debug("referpath:" + referPath.toString() + " contains target field name :" + targetControl.field.name + ".break refering!");
                    return true;
                }
            }
            return false;
        },

        /**
         * 处理由referFromControl引发的动态公式
         * @param referFromControl 发生refer事件的控件
         * @param referedControls 可以受发生refer事件的控件影响的控件数组,这个由PATH初步筛选
         * @param render formRender对象
         * @param excludePath 排除的路径
         */
        processReferedFormula: function (referFromControl, referedControls, render, excludePath) {
            var referPath = this.processReferPath(referFromControl);
            var referedFormulaControls = this.getReferedControls(referFromControl, referedControls, $$.dynamics.formulas);
            for (var controlIndex = 0, controlLength = referedFormulaControls.length; controlIndex < controlLength; controlIndex++) {
                var targetControl = referedFormulaControls[controlIndex];
                this.processDynamicFormula(targetControl, render, referFromControl, referPath, excludePath);
            }
        },

        /**
         * 处理由referFromControl引发的动态动作
         * @param referFromControl 发生refer事件的控件
         * @param referedControls 可以受发生refer事件的控件影响的控件数组,这个由PATH初步筛选
         * @param render formRender对象
         * @param excludePath 排除的路径
         */
        processReferedAction: function (referFromControl, referedControls, render, excludePath) {
            var referedActionControls = this.getReferedControls(referFromControl, referedControls, $$.dynamics.actions);
            for (var controlIndex = 0, controlLength = referedActionControls.length; controlIndex < controlLength; controlIndex++) {
                var targetControl = referedActionControls[controlIndex];
                this.processDynamicAction(targetControl, render, referFromControl, excludePath);
            }
        },


        /**
         * 处理由referFromControl引发的动态验证
         * @param referFromControl 发生refer事件的控件
         * @param referedControls 可以受发生refer事件的控件影响的控件数组,这个由PATH初步筛选
         * @param render formRender对象
         * @param excludePath 排除的路径
         */
        processReferedValidation: function (referFromControl, referedControls, render, excludePath) {
            var referedValidationControls = this.getReferedControls(referFromControl, referedControls, $$.dynamics.validations);
            for (var controlIndex = 0, controlLength = referedValidationControls.length; controlIndex < controlLength; controlIndex++) {
                var targetControl = referedValidationControls[controlIndex];
                this.processDynamicValidation(targetControl, render, referFromControl, excludePath);
            }
        },

        /**
         * fieldRefer事件
         * @param referFromControl 发生refer事件的控件
         * @param render formRender对象，这里主要是为了代码复用,把render对象传进来
         * @param referParent 是否影响祖先 取受影响控件时候使用
         * @param referSibling 是否影响兄弟 取受影响控件时候使用
         * @param referChild 是否影响子孙 取受影响控件时候使用
         * @param fieldChangingReferAll 是否在fieldChanging时候影响所有控件（祖先，兄弟，子孙）
         * @param doAllActionStyle 是否在fieldRefer做动态动作、动态样式时候影响所有控件（祖先，兄弟，子孙）
         *        fieldChangingReferAll，doAllActionStyle用于补充控制哪些控件受影响，fieldReferEvent目前共4个地方会调用，具体参考备忘文档
         * @param excludePath 计算context时候排除path以excludePath开头的那些control
         */
        fieldReferEvent: function (referFromControl, render, referParent, referSibling, referChild, fieldChangingReferAll, doAllActionStyle, excludePath) {
            if ($$.params.fieldChanging != null) {
                if (fieldChangingReferAll === true) {
                    var referedControls = this.getReferedControlsByPath(referFromControl.path, true, true, true);
                } else {
                    referedControls = this.getReferedControlsByPath(referFromControl.path, referParent, referSibling, referChild);
                }
                /*
                 fieldChange结束后将会对表单上所有控件做一次初始化动态样式和动作，所以这里就不用做了
                 this.processReferedAction(referFromControl, referedControls, render, excludePath);
                 this.processReferedStyle(referFromControl, referedControls, render, excludePath);
                 */
                //过滤控件，如果该控件字段存在于fieldChange传输过来的数据中，那么就不做公式
                if ($$.params.fieldChanging.names != null) {
                    var filteredControls = [];
                    for (var i = 0, len = referedControls.length; i < len; i++) {
                        if (!$$.params.fieldChanging.names.hasOwnProperty(referedControls[i].getDynamicKeyName())) {
                            filteredControls.push(referedControls[i]);
                        }
                    }
                    referedControls = filteredControls;
                }
                this.processReferedFormula(referFromControl, referedControls, render, excludePath);
            } else {
                if (doAllActionStyle === true) {
                    referedControls = this.getReferedControlsByPath(referFromControl.path, true, true, true);
                    if (referParent === true && referSibling === true && referChild === true) {
                        formulaReferedControls = referedControls;
                    } else {
                        var formulaReferedControls = this.getReferedControlsByPath(referFromControl.path, referParent, referSibling, referChild);
                    }
                } else {
                    referedControls = this.getReferedControlsByPath(referFromControl.path, referParent, referSibling, referChild);
                    formulaReferedControls = referedControls;
                }
                this.processReferedAction(referFromControl, referedControls, render, excludePath);
                this.processReferedStyle(referFromControl, referedControls, render, excludePath);
                this.processReferedFormula(referFromControl, formulaReferedControls, render, excludePath);
                this.processReferedValidation(referFromControl, referedControls, render, excludePath);
            }
        },

        /**
         *   根据所能影响的path列表，来判断参数control是否是受mainControl影响的control
         *   思路是某控件可以影响其直系祖先或者兄弟或者直系子孙
         *   mainControlPath:判断能影响别的控件的control.path
         *   referedControlPath:mainControlPath所能影响的path列表，之所以要传进来是为了不重复计算
         *   control:判断该control是否受mainControl影响
         *   parentOnly:只判断mainControl的祖先，mainControl的兄弟和子孙不用判断
         *   referParent, referSibling, referChild
         */
        isReferedControl: function (mainControlPath, referedControlPaths, control, referParent, referSibling, referChild) {
            var path = control.path;
            if (path == null || mainControlPath == null) return { refered: false };
            var len;
            if (referParent) {
                len = referedControlPaths.length - 1;
            }
            if (referParent && referSibling) {
                len = referedControlPaths.length;
            }
            //是否直系祖先或者兄弟
            for (var i = 0; i < len; i++) {
                if (referedControlPaths[i] === path) {
                    return { refered: true, children: false };
                }
            }
            if (referChild) {
                //是否是直系子孙
                if (path.length > mainControlPath.length) {
                    //如果该控件的path以mainControlPath开头且后面跟着_，那么认为是直系子孙
                    if (path.substr(0, mainControlPath.length) === mainControlPath && path.substr(mainControlPath.length, 1) === '_') {
                        return { refered: true, children: true, subPath: path.substr(mainControlPath.length) };
                    }
                }
            }

            return { refered: false };
        },

        /**
         *  查找某个controlPath所能影响到的control列表
         *  parentOnly表示是否只获取能影响到的祖先的列表
         *  这个control列表包括一般控件和repeat控件
         */
        getReferedControlsByPath: function (controlPath, referParent, referSibling, referChild) {
            //var instance = this;
            var referedControlPaths = $IU.getReferedControlPaths(controlPath);
            var formControls = $IU.getAllControls();
            var controls = [];

            for (var i = 0, len = formControls.length; i < len; i++) {
                var control = formControls[i];
                var isRefered = this.isReferedControl(controlPath, referedControlPaths, control, referParent, referSibling, referChild);
                if (isRefered.refered === true) {
                    controls.push(control);
                }
            }

            return controls;
        },

        /**
         * 获取控件值，以供放入计算公式的context，如果遇到ValuePair需要特殊处理，加入expando信息
         */
        getControlValue: function (control, isInit) {

            var getValuePairArray = function (codes, names, parentId) {
                var vps = [];
                for (var i = 0, len = codes.length; i < len; i++) {
                    vps.push(new $Controls.Data.ValuePair(codes[i], (names[i] !== undefined) ? names[i] : codes[i], parentId));
                }
                return vps;
            };

            var value = control.getValue(isInit);
            var field = control.field;
            //整型和浮点型取值如果是空字符串，那么缺省为0
            if (field != null) {
                if (field.type === $Control.DATA_TYPE_INT || field.type === $Control.DATA_TYPE_DOUBLE) {
                    if ($IU.isString(value) && $IU.trimString(value) === "") {
                        value = 0;
                    }
                }
            }
            // 如果是checkList且数据类型是string（以后考虑支持code数据类型，这里代码就不用改动了），取值为value.value，将CheckList中的getValue获取的ValuePair再转回string,避免动态动作中出错
            if (control.controlType === 'BoundCheckList' && control.field.type === $Control.DATA_TYPE_STRING && (value instanceof $Controls.Data.ValuePair)) {
                value = value.value;
            }

            if ((value instanceof $Controls.Data.ValuePair) || (value instanceof $Controls.Data.Uri)) {
                var attributes = control.getAttributes();
                value['expando'] = attributes;
                for (var key in attributes) {
                    if (attributes.hasOwnProperty(key)) {
                        if ((key !== 'value' && key !== 'displayValue') || (value instanceof $Controls.Data.Uri)) {
                            if (attributes[key + "_name"] !== undefined) {
                                value[key] = new $Controls.Data.ValuePair(attributes[key], attributes[key + "_name"], value.value);
                                continue;
                            }
                            if (attributes[key + "_Name"] !== undefined) {
                                value[key] = new $Controls.Data.ValuePair(attributes[key], attributes[key + "_Name"], value.value);
                                continue;
                            }
                            if (attributes[key + "_Names"] !== undefined) {
                                value[key] = getValuePairArray($IU.splitAttribute(attributes[key]), $IU.splitAttribute(attributes[key + "_Names"], value.value));
                                continue;
                            }
                            if ($IU.endWith(key, '_Codes')) {
                                var attrName = key.substring(0, key.length - 6);
                                value[attrName] = getValuePairArray($IU.splitAttribute(attributes[key]), attributes[attrName + "_Names"] !== undefined ? $IU.splitAttribute(attributes[attrName + "_Names"]) : [], value.value);
                                continue;
                            }
                            value[key] = attributes[key];
                        }
                    }
                }
            }
            return value;
        },

        /**
         * 将值放到context里
         */
        putValueIntoContext: function (context, keyName, value, isRefered) {
            if (isRefered.children === true) {
                if (context[keyName] === undefined) {
                    context[keyName] = [];
                }
                var v = context[keyName];

                var pathArray = isRefered.subPath.split("_").slice(1);
                for (var i = 0; i < pathArray.length; i++) {
                    var pathIndex = parseInt(pathArray[i], 10);
                    if (i === pathArray.length - 1) {
                        v[pathIndex] = value;

                    } else {
                        if (v[pathIndex] === undefined) {
                            v[pathIndex] = [];
                        }
                        v = v[pathIndex];
                    }
                }
            } else {
                context[keyName] = value;
            }
        },

        /**
         *   获取可能会影响到targetDynamicKeyName的styles,formulas,actions的keyName(field.name or controlXXX or repeatControl.groupName )的数组
         *   这个targetDynamicKeyName可以是control.field.name，也可以是repeatControl.groupName
         */
        getReferedKeyNames: function (targetDynamicKeyName) {
            var referedKeyNames = [],
                refered = {},
                referedStyles = $$.dynamics.referedStyles,
                referedFormulas = $$.dynamics.referedFormulas,
                referedActions = $$.dynamics.referedActions,
                referedValidations = $$.dynamics.referedValidations,
                keyName;
            for (keyName in referedStyles) {
                if (referedStyles.hasOwnProperty(keyName)) {
                    var styles = referedStyles[keyName],
                        len = styles.length;
                    for (var i = 0; i < len; i++) {
                        if (styles[i].targetFieldName === targetDynamicKeyName) {
                            if (!refered.hasOwnProperty(keyName)) {
                                refered[keyName] = "";
                                break;
                            }
                        }
                    }
                }
            }
            for (keyName in referedFormulas) {
                if (referedFormulas.hasOwnProperty(keyName)) {
                    var formulas = referedFormulas[keyName];
                    len = formulas.length;
                    for (i = 0; i < len; i++) {
                        if (formulas[i].targetFieldName === targetDynamicKeyName) {
                            if (!refered.hasOwnProperty(keyName)) {
                                refered[keyName] = "";
                                break;
                            }
                        }
                    }
                }
            }
            for (keyName in referedActions) {
                if (referedActions.hasOwnProperty(keyName)) {
                    var actions = referedActions[keyName];
                    len = actions.length;
                    for (i = 0; i < len; i++) {
                        if (actions[i].targetFieldName === targetDynamicKeyName) {
                            if (!refered.hasOwnProperty(keyName)) {
                                refered[keyName] = "";
                                break;
                            }
                        }
                    }
                }
            }
            for (keyName in referedValidations) {
                if (referedValidations.hasOwnProperty(keyName)) {
                    var validations = referedValidations[keyName];
                    len = validations.length;
                    for (i = 0; i < len; i++) {
                        if (validations[i].targetFieldName === targetDynamicKeyName) {
                            if (!refered.hasOwnProperty(keyName)) {
                                refered[keyName] = "";
                                break;
                            }
                        }
                    }
                }
            }
            for (keyName in refered) {
                if (refered.hasOwnProperty(keyName)) {
                    referedKeyNames.push(keyName);
                }
            }
            return referedKeyNames;
        },

        /**
         *   获取control的context,不包括path以excludePath开头的那些control的数据
         *   该control也可以是repeatControl或者view
         */
        getControlContext: function (control, excludePath, ignoreJudgeRefer) {

            var instance = this,
                controlPath = control.path,
                referedControlPaths = $IU.getReferedControlPaths(controlPath),
                referedKeyNames = this.getReferedKeyNames(control.getDynamicKeyName()),
                context = $.extend({}, $$.dynamics.globalContext);
            //$holder = $($$.params.formRender.holder);

            var putControlIntoContext = function (thisControl) {
                var keyName = thisControl.getDynamicKeyName();
                var controlKeyName = thisControl.getDynamicContextControlName();
                if (ignoreJudgeRefer === null || ignoreJudgeRefer === false) {
                    //不能影响到该control的thisControl就不用加到context中去了
                    if (!$IU.arrayContains(referedKeyNames, keyName) && !$IU.arrayContains(referedKeyNames, controlKeyName)) return;
                }
                //thisControl在排除路径上就不用加到context里
                if (excludePath !== undefined && $IU.pathInclude(thisControl.path, excludePath)) return;
                //判断thisControl是否在controlPath影响的路径上
                var isRefered = instance.isReferedControl(controlPath, referedControlPaths, thisControl, true, true, true);
                if (isRefered.refered === true) {
                    //thisControl.field.name(fieldXXX)在referedKeyNames里，将value加入
                    if ($IU.arrayContains(referedKeyNames, keyName) || ignoreJudgeRefer === true) {
                        var value = instance.getControlValue(thisControl);
                        //radio需要特殊处理，因为表单上会存在多个name一样的radio,这些control.getValue()在没选中的情况下返回null,如果选中则返回自身值,所以value==null时候就不用放到context里去了
                        if (thisControl.controlType === $Control.CONTROL_TYPE_RADIO && value == null) return;
                        //将control值放入context
                        instance.putValueIntoContext(context, keyName, value, isRefered);
                    }

                    //controlXXX在referedKeyNames里，将$$(thisControl)加入context
                    if ($IU.arrayContains(referedKeyNames, controlKeyName) || ignoreJudgeRefer === true) {
                        //将control的core对象放入context
                        //instance.putValueIntoContext(context, controlKeyName, $$(thisControl), isRefered);
                        //将control的reference对象放入context
                        instance.putValueIntoContext(context, controlKeyName, new InfoPlus.Dynamics.ControlReference(thisControl), isRefered);
                    }

                }
            };

            var putRepeatControlIntoContext = function (thisControl) {
                //groupXXX
                var controlKeyName = thisControl.getDynamicContextControlName();
                //不能影响到该control的thisControl就不用加到context中去了
                if (!$IU.arrayContains(referedKeyNames, controlKeyName)) return;
                //thisControl在排除路径上就不用加到context里
                if (excludePath !== undefined && $IU.pathInclude(thisControl.path, excludePath)) return;
                //判断thisControl是否在controlPath影响的路径上
                var isRefered = instance.isReferedControl(controlPath, referedControlPaths, thisControl, true, true, true);
                if (isRefered.refered === true) {
                    //instance.putValueIntoContext(context, controlKeyName, $$(thisControl), isRefered);
                    instance.putValueIntoContext(context, controlKeyName, new InfoPlus.Dynamics.RepeatControlReference(thisControl), isRefered);
                }
            };


            var cacheControls = $$.dynamics.cache.get(controlPath);
            for (var i = 0, len = cacheControls.length; i < len; i++) {
                var cacheControl = cacheControls[i];
                if (cacheControl['repeatType'] == null) {
                    putControlIntoContext(cacheControl);
                } else {
                    putRepeatControlIntoContext(cacheControl);
                }
            }

            context['fromInit'] = false;
            this.putViewContext(control, context);
            return context;
        },


        //获取初始化时候所有控件，便于getInitControlContext使用
        getInitControls: function () {

            if ($$.params.initControls.length === 0) {

                var controls = [],
                    instance = this;
                //$holder = $($$.params.formRender.holder);

                $$.params.renderForm.find("." + $Control.CLASSNAME_CONTROL).not("." + $Control.CLASSNAME_VAR).each(function () {
                    var thisControl = $(this).data($Control.DATA_CONTROL_OBJECT);
                    if (thisControl == null || thisControl.path == null || thisControl.field == null) return;
                    var keyName = thisControl.getDynamicKeyName();
                    var controlKeyName = thisControl.getDynamicContextControlName();
                    var value = instance.getControlValue(thisControl, true);

                    //radio需要特殊处理，因为表单上会存在多个name一样的radio,这些control.getValue()在没选中的情况下返回null,如果选中则返回自身值,所以value==null时候就不用放到context里去了
                    if (thisControl.controlType === $Control.CONTROL_TYPE_RADIO && value == null) return;
                    controls.push({
                        control: thisControl,
                        infoCoreControl: $$(thisControl),
                        keyName: keyName,
                        controlKeyName: controlKeyName,
                        value: value,
                        isRepeat: false
                    });
                });

                $$.params.renderForm.find("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_PARENT_ELEMENT).each(function () {
                    var thisControl = $(this).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                    if (thisControl == null || thisControl.path == null || thisControl.groupName == null) return;
                    //groupXXX
                    var controlKeyName = thisControl.getDynamicContextControlName();
                    controls.push({
                        control: thisControl,
                        infoCoreControl: $$(thisControl),
                        controlKeyName: controlKeyName,
                        isRepeat: true
                    });
                });
                $$.params.initControls = controls;

            }

            return $$.params.initControls;

        },

        /**
         *   表单初始化时候获取control的context
         *   不包括path以excludePath开头的那些control的数据
         *   该control也可以是repeatControl
         */
        getInitControlContext: function (control) {
            var initControls = this.getInitControls(),
                controlPath = control.path,
                referedControlPaths = $IU.getReferedControlPaths(controlPath),
                referedKeyNames = this.getReferedKeyNames(control.getDynamicKeyName()),
                context = $.extend({}, $$.dynamics.globalContext);

            for (var i = 0, len = initControls.length; i < len; i++) {
                var thisControl = initControls[i];
                if (!thisControl.isRepeat) {
                    var keyName = thisControl.keyName;
                    var controlKeyName = thisControl.controlKeyName;
                    //不能影响到该control的thisControl就不用加到context中去了
                    if (!$IU.arrayContains(referedKeyNames, keyName) && !$IU.arrayContains(referedKeyNames, controlKeyName)) continue;
                    //判断thisControl是否在controlPath影响的路径上
                    var isRefered = this.isReferedControl(controlPath, referedControlPaths, thisControl.control, true, true, true);
                    if (isRefered.refered === true) {
                        //thisControl.field.name(fieldXXX)在referedKeyNames里，将value加入
                        if ($IU.arrayContains(referedKeyNames, keyName)) {
                            var value = thisControl.value;
                            //将control值放入context
                            this.putValueIntoContext(context, keyName, value, isRefered);
                        }

                        //controlXXX在referedKeyNames里，将$$(thisControl)加入context
                        if ($IU.arrayContains(referedKeyNames, controlKeyName)) {
                            //将control的core对象放入context
                            //this.putValueIntoContext(context, controlKeyName, thisControl.infoCoreControl, isRefered);
                            //将control的reference对象放入context
                            this.putValueIntoContext(context, controlKeyName, new InfoPlus.Dynamics.ControlReference(thisControl.control), isRefered);
                        }
                    }
                } else {
                    controlKeyName = thisControl.controlKeyName;
                    //不能影响到该control的thisControl就不用加到context中去了
                    if (!$IU.arrayContains(referedKeyNames, controlKeyName)) continue;
                    //判断thisControl是否在controlPath影响的路径上
                    isRefered = this.isReferedControl(controlPath, referedControlPaths, thisControl.control, true, true, true);
                    if (isRefered.refered === true) {
                        //this.putValueIntoContext(context, controlKeyName, thisControl.infoCoreControl, isRefered);
                        this.putValueIntoContext(context, controlKeyName, new InfoPlus.Dynamics.RepeatControlReference(thisControl.control), isRefered);
                    }
                }
            }

            context['fromInit'] = true;
            this.putViewContext(control, context);
            return context;
        },

        putViewContext: function (control, context) {
            if (control instanceof InfoPlus.Layout.View) {
                context['viewWidth'] = control.render.width;
                context['PAGE'] = control.render.name;
            } else {
                var $view = $(control.element).parents(".infoplus_view");
                if ($view.length > 0) {
                    context['viewWidth'] = $view.data(InfoPlus.Layout.View.DATA_CONTROL_OBJECT).render.width;
                } else {
                    context['viewWidth'] = window.width;
                }
            }

        }


    };

    define("InfoPlus.Dynamics.Processor", dynamicProcessor);

})(window);

﻿/**
 * RepeatControl
 * @Author yech
 * @Since 2013/12/09
 */

(function (window, undefined) {

    var repeatControl = function (config) {
        this.initData = config.initData;
        this.formRender = config.formRender;
        this.render = config.render;
        this.path = config.path;
        this.repeatParentElement = config.repeatParentElement;
        this.repeatContentParentElement = config.repeatContentParentElement;
        this.firstControlNamePrefix = config.firstControlNamePrefix;
        this.repeatType = config.repeatType;
        this.addLinkText = config.addLinkText;
        this.fieldNames = config.fieldNames;
        this.groupInformation = config.groupInformation;
        this.groupName = this.groupInformation.name;
        this.fullGroupName = this.groupInformation.groupName;
        this.columnVisible = [];
        this.init();
    };

    repeatControl.REPEAT_TYPE_SECTION = 0;
    repeatControl.REPEAT_TYPE_TABLE = 1;

    repeatControl.CLASS_REPEAT_SECTION_EXPAND = "infoplus_repeatSection_expand";
    repeatControl.CLASS_REPEAT_SECTION_SHRINK = "infoplus_repeatSection_shrink";
    repeatControl.CLASS_REPEAT_SECTION_SHRUNKEN = "infoplus_repeat_section_shrunken";
    repeatControl.CLASS_REPEAT_SECTION_EXPAND_BUTTON_OPACITY = "opacity5";
    repeatControl.CLASS_REPEAT_SECTION = "infoplus_repeatingSection";
    repeatControl.CLASS_SECTION_BUTTON = "infoplus_repeatSectionMenuButton";
    repeatControl.CLASS_REPEAT_SECTION_EXPAND_BUTTON = "infoplus_repeatSectionExpandButton";
    repeatControl.CLASS_REPEAT_TABLE_ROW = "infoplus_repeatingTableRow";
    repeatControl.CLASS_TABLE_BUTTON = "infoplus_repeatTableMenuButton";
    repeatControl.CLASS_ADD_LINK = "infoplus_addLink";
    repeatControl.CLASS_ADD_LINK_DIV = "infoplus_addLinkDiv";
    repeatControl.CLASS_ADD_LINK_CONTAINER_DIV = "infoplus_addLinkContainerDiv";
    repeatControl.CLASS_MENUBUTTON_SELECTED = "infoplus_menuButtonSelected";
    repeatControl.CLASS_POPUP_MENU = "infoplus_popupMenu";
    repeatControl.CLASS_MENU_ITEM = "infoplus_menuItem";
    repeatControl.CLASS_REPEAT_PARENT_ELEMENT = "infoplus_repeatParentElement";
    repeatControl.CLASS_REPEAT_SELECTED = "infoplus_repeatingSelected";
    repeatControl.CLASS_REPEAT_MENU_POPUPED = "infoplus_repeatingMenuPopuped";
    repeatControl.CLASS_REPEAT_MASTER = "infoplus_repeat_master";

    repeatControl.DATA_REPEAT_CONTROL_OBJECT = "repeatControl";
    repeatControl.DATA_REPEAT_MENU_DIV = "infoplus_repeat_menu_div";
    repeatControl.DATA_REPEAT_DIV = "infoplus_repeat_div";
    repeatControl.DATA_REPEAT_SECTION_DIV = "infoplus_repeat_section_div";
    repeatControl.DATA_REPEAT_SECTION_EXPAND_BUTTON = "infoplus_repeat_section_expand_button";
    repeatControl.DATA_REPEAT_SECTION_EXPAND_BUTTON_TOP = "infoplus_repeat_expand_top";
    repeatControl.DATA_REPEAT_SECTION_EXPAND_BUTTON_SHRINK_TOP = "infoplus_repeat_expand_shrink_top";
    repeatControl.DATA_REPEAT_SECTION_EXPAND_HEIGHT = "infoplus_repeat_section_expand_height";
    repeatControl.REPEAT_SECTION_SHRINK_HEIGHT = 28;

    repeatControl.prototype = {
        guid: null,                         //创建时产生一个GUID，用于infoCore事件中比较
        initData: null,                     //初始化数据
        eventsInitialized: false,           //是否初始化过事件
        formRender: null,                   //formRender对象
        render: null,                       //重复节或表的render对象
        path: null,                         //重复元素的PATH
        popupMenu: null,                    //弹出菜单
        repeatParentElement: null,          //repeatParentElement是重复section或table的父元素，重复节是其外面一层的div,重复表是table外面一层的div
        repeatContentParentElement: null,   //重复节一块或者重复表的一行的父元素，对section而言repeatParentElement=repeatContentParentElement，对重复表而言，repeatContentParentElement是tr外面的tbody
        repeatAddLink: null,
        repeatLayout: null,
        newRepeatData: null,                //新增时插入的新数据，
        firstControlNamePrefix: null,       //该重复段中第一个控件名字前缀(不包含path的名字)，用于setfocus
        repeatType: 0,
        power: null,                        //重复节或者表的操作权限
        repeatTableBody: null,
        keyIndex: null,                     //keyIndex是一个数组，内容为重复section或者table row 原数据库中的存盘的位置，如果新增一条重复数据则添加一个-1到该数组中
        groupName: null,                    //重复节或者表的名字
        fullGroupName: null,                //重复节或者表的名字(全路径，从根开始)
        addLinkText: null,
        fieldNames: null,
        sorter: null,
        hideMenuTimer: null,
        dynamicProcessor: new InfoPlus.Dynamics.Processor(),
        readOnly: false,                     //前端是否可以操作该重复节或表，readOnly===true时候不出弹出菜单(详细菜单除外)，不显示新增按钮
        columnVisible: [],                   //记录重复表columnVisible的列信息，可见为true或者undefined,不可见为false
        showingDetail: false,                //是否正在显示detail页，用于避免动画过程中detail页出现两次

        init: function () {
            this.guid = $$.guid();
            this.groupCountFieldName = 'field' + (this.groupName.substr(0, 1).toUpperCase() + this.groupName.substr(1)) + "Count" + $$.params.rowIndexSuffix;
            this.rowIndexFieldName = 'field' + (this.groupName.substr(0, 1).toUpperCase() + this.groupName.substr(1)) + "RowIndex" + $$.params.rowIndexSuffix;
            this.repeatParentElement.id = this.groupName + this.path;
            $(this.repeatParentElement).attr("name", this.repeatParentElement.id).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT, this);
            this.replaceHeightStyle();
            this.initPower();
            this.initRepeatableNewData();
            this.initCountControl();
            this.initRepeatParentElementStyle();
            this.initPopupMenu();
            if (this.isRepeatTable()) {
                this.initRepeatTableBody();
                //没有写权限，就不让排序了
                if (this.power.writePower === true) {
                    this.initTableSorter();
                }
            }
            this.createRepeatableContent(this.initData);
            this.initAddLink();
            //在repeat的dom初始化好以后将popupMenu放到最后，这样就不用设置其z-index了,
            //本来想将initPopupMenu移到这里来做，但是发现initRepeatTableBody时候需要用到this.popupMenu，只能先创建，最后再移动到最后
            if (this.popupMenu != null) {
                $(this.repeatParentElement).append($(this.popupMenu.menuDiv).detach());
            }


            //this.initPopupMenu();
            if (InfoPlus.Repeat.RepeatControl.prototype.eventsInitialized === false) {
                this.initEvents();
                InfoPlus.Repeat.RepeatControl.prototype.eventsInitialized = true;
            }
            this.initMasterDetailEvent();

            this.initExternalCodeFields();
        },

        //将每个重复节的行上的height样式改为min-height，避免重复节表嵌套时候，因为写死了高度而外部重复行不能随内部重复节表高度的增加而增加高度
        replaceHeightStyle: function () {
            if (this.isRepeatTable() || this.render == null || this.render["attributes"] == null) return;

            var findStyleAttribute = function (attributes) {
                for (var i = 0, len = attributes.length; i < len; i++) {
                    var attribute = attributes[i];
                    if (attribute["key"] != null && attribute["key"].toLowerCase() === "style") {
                        return attribute;
                    }
                }
                return null;
            };

            var styleAttribute = findStyleAttribute(this.render.attributes);
            if (styleAttribute != null && styleAttribute["value"] != null) {
                var result = "";
                var styles = styleAttribute["value"].split(";");
                for (var i = 0, len = styles.length; i < len; i++) {
                    var style = styles[i].split(":");
                    if (style.length === 2 && $IU.trimString(style[0].toLowerCase()) === "height") {
                        result += "min-height:" + style[1] + ";";
                    } else {
                        result += styles[i] + ";";
                    }
                }
                styleAttribute["value"] = result;
            }
        },

        initMasterDetailEvent: function () {
            var instance = this;
            if (this.groupInformation.isMasterDetail) {
                $(this.repeatParentElement).on("click", ".infoplus_labelControl", function () {
                    var $td = $(this).parentsUntil("tr." + repeatControl.CLASS_REPEAT_TABLE_ROW).last();
                    if ($td.size() !== 0) {
                        //这个label不在detailCell里
                        if (!$td.hasClass("detailCell")) {
                            instance.showDetail($td.parent()[0]);
                        }
                    }
                    return false;
                });
                //移动端点击行需要出现菜单，不能都显示详细页
                if (!$$.MOBILE) {
                    $(this.repeatParentElement).on("click", "tr." + repeatControl.CLASS_REPEAT_TABLE_ROW, function (event) {
                        var inFileControlDiv = $(event.target).hasClass("infoplus_fileControl") || ($(event.target).parents(".infoplus_fileControl").length > 0);
                        if (inFileControlDiv) {
                            //点击在了上传图标以外的空白处
                            if ($(event.target).hasClass("infoplus_fileControl") && event.target.nodeName === "DIV") {
                                instance.showDetail(this);
                                return false;
                            }
                        } else {
                            if (!$(event.target).hasClass("infoplus_control")) {
                                instance.showDetail(this);
                                return false;
                            }
                        }


                    });
                }
            }
        },

        /**
         * 对于重复节表中的是外部代码表字段(只限于在select或optionList中的字段)，如果没有请求过外部代码，那么就将请求加入队列
         */
        initExternalCodeFields: function () {
            var formRender = this.formRender;
            formRender.eachLayout(function (render) {
                if (render['renderType'] === 'BoundSelect' || render['renderType'] === 'BoundOptionList') {
                    var field = $$.entity.fields[render['field']];
                    if (field != null && field.code != null) {
                        var items = null;
                        var code = $$.codeManager.getCode(field.code);
                        if (code != null) {
                            items = code.items;
                        }
                        if (items == null || ($IU.isArray(items) && items.length === 0)) {
                            if (code == null || (code != null && code.codeType === 'External')) {
                                $$.codeManager.addRequestCode(field.code, field.name);
                            }
                        }
                    }
                }
            }, this.render, "Boundable");
        },

        initEvents: function () {
            var events = InfoPlus.Repeat.RepeatControl.Events.events;
            for (var i = 0, len = events.length; i < len; i++) {
                var event = events[i];
                $$.registerEvents(event.type, event.selector, true, event.data, event.handler);
            }
        },

        initTableSorter: function () {
            this.sorter = new InfoPlus.Repeat.TableSorter(this);
        },

        initAddLink: function () {
            var repeatAddLink = this.power.insertPower ? new InfoPlus.Repeat.RepeatAddLink(this.repeatParentElement, 6, this.addLinkText) : null;
            if (repeatAddLink != null) {
                if (this.shouldShowAddLink()) {
                    repeatAddLink.showLink();
                } else {
                    repeatAddLink.hideLink();
                }
            }
            this.repeatAddLink = repeatAddLink;
        },


        initPower: function () {
            this.power = new InfoPlus.Repeat.RepeatPower(this.groupInformation);
        },

        initRepeatParentElementStyle: function () {
            //没有读的权限，渲染出来后设置display=none，但是为了不渲染infopath的新增按钮，设置lastIsRepeatable=true
            if (this.power.readPower === false) {
                $(this.repeatParentElement).css("display", "none");
            }

            $(this.repeatParentElement).addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_PARENT_ELEMENT);
            if (this.groupInformation.isMasterDetail) {
                $(this.repeatParentElement).addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_MASTER);
            }
        },

        /*
         * 创建一个popupMenu，如果没有wid权限，就不必创建
         */
        initPopupMenu: function () {
            var power = this.power;
            if (power.writePower === false && power.insertPower === false && power.deletePower === false && power.enforceReadPower === false) return;
            this.popupMenu = new InfoPlus.Repeat.PopupMenu(this);
        },

        isRepeatSection: function () {
            return this.repeatType === InfoPlus.Repeat.RepeatControl.REPEAT_TYPE_SECTION;
        },

        isRepeatTable: function () {
            return this.repeatType === InfoPlus.Repeat.RepeatControl.REPEAT_TYPE_TABLE;
        },

        //是否可以显示新增按钮
        shouldShowAddLink: function () {
            if (this.readOnly === true) {
                return false;
            }
            return this.power.insertPower !== false;
        },

        /*
         * 创建repeat table，返回tbody
         */
        createRepeatTable: function () {
            var render = this.render,
                repeatParentElement = this.repeatParentElement,
                table = document.createElement("table");
            this.formRender.createAttributes(table, render["attributes"]);
            if (null != repeatParentElement)
                repeatParentElement.appendChild(table);
            //create colgroup tag to ensure column width
            this.formRender.createColGroup(render, table);
            var tbody = document.createElement("tbody");
            table.appendChild(tbody);

            for (var i = 0, len = render.renders.length; i < len; i++) {
                if (render.renders[i]['repeating'] !== true) {
                    //add table header
                    var child = this.formRender.createLayout(render.renders[i], this.initData, this.path);
                    $(child).addClass("infoplus_repeatingTableHeader");
                    tbody.appendChild(child);
                }
            }


            return tbody;
        },

        initRepeatTableBody: function () {

            if (this.isRepeatTable()) {
                this.repeatTableBody = this.createRepeatTable();
                //找到第一个repeating为true的行
                var contentRowIndex = -1;
                for (var i = 0, len = this.render.renders.length; i < len; i++) {
                    if (this.render.renders[i]['repeating'] === true) {
                        contentRowIndex = i;
                        break;
                    }
                }
                if (contentRowIndex !== -1) {
                    this.render = this.render.renders[contentRowIndex];
                } else {
                    $IU.delayedErrorMessageBox($$.lt("repeatControl.settingError", this.groupName));
                }

                this.repeatContentParentElement = this.repeatTableBody;
            }
        },


        initRepeatableNewData: function () {
            var fieldNames = this.fieldNames,
                entity = $$.entity;
            var newData = {};
            for (var index = 0; index < fieldNames.length; index++) {
                var fieldName = fieldNames[index];
                if (entity["fields"][fieldName] == null) {
                    $IU.debugTip($$.lt("repeatControl.fieldNotFound", fieldName), 'warning');
                    this.newRepeatData = newData;
                    return;
                }
                //有写权限(或者initR+,此时有t权限)才赋初值
                var permission = entity["fields"][fieldName].permission || "";
                if (entity["fields"][fieldName].initialValue !== undefined && (permission.indexOf("w") !== -1 || permission.indexOf("t") !== -1)) {
                    newData[fieldName] = entity["fields"][fieldName].initialValue;
                    if (entity["fields"][fieldName].initialText !== undefined) {
                        newData[fieldName + "_displayText"] = entity["fields"][fieldName].initialText;
                    }
                } else {
                    newData[fieldName] = '';
                }
            }
            this.newRepeatData = newData;
        },


        /**
         * Slice entity to next repeat level
         */
        sliceEntity: function (data, index, dice) {
            var slice = {};
            slice.keyCount = 0;
            slice.data = {};
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    var entity = data[key];
                    if ($IU.isArray(entity)) {
                        var len = entity.length;
                        // Ensure legal
                        if (index >= 0 && index < len) {
                            // Ensure interested
                            if (null == dice || $IU.arrayContains(dice, key)) {
                                slice.keyCount++;
                                slice.data[key] = entity[index];
                            }
                        }
                    }
                }
            }
            return slice;
        },

        createRepeatLayout: function (data, path) {
            var child;
            if (this.isRepeatTable()) {
                child = this.formRender.createLayout(this.render, data, path);
                //给详细节加上detailSection的类名
                $(child).children("td.detailCell").children().first().addClass("detailSection");
                //每行加一个id,显示详细内容有错时候需要这个id,否则验证插件会出错
                child.setAttribute("id", this.groupName + "_row_" + Math.round(Math.random() * 100000));

                //将动态设置了不可见的列隐藏起来
                var columnVisible = this.columnVisible;
                for (var index = 0, len = columnVisible.length; index < len; index++) {
                    if (columnVisible[index] === false) {
                        $(child).children("td:nth-child(" + (index + 1) + ")").hide();
                    }
                }

            } else {
                var innerChild = this.formRender.createLayout(this.render, data, path);
                child = document.createElement("div");
                child.appendChild(innerChild);
                $(child).attr("class", $(innerChild).attr("class"));
                $(innerChild).removeAttr("class");
                if (innerChild.style.width != null) {
                    child.style.width = innerChild.style.width;
                }
            }

            this.addRowIndexControl(child, path);
            return child;
        },

        /**
         * 初始化repeat section或者table row
         * repeatControl        需要初始化的section或者row
         * subPath              该section或row的path，该repeatControl中所有控件都会以该path来帮助命名(以path结尾)
         * repeatParentElement  该重复section或row的父元素，section是其外面一层的div,row是table外面一层的div
         * popupMenu            弹出菜单,同一个repeatParentElement中下属的repeat section或table row 共用一个菜单
         * isRepeatTable        该repeatControl是否是table row
         * keyIndex             该section或row原先在数据库中存储的位置,如果是新增的一条数据则keyIndex=-1
         */
        initRepeatable: function (repeatChildElement, subPath, keyIndex) {
            //add the path,repeatParentElement to every repeat section or repeat table row
            $(repeatChildElement).data($Control.DATA_PATH, subPath);
            repeatChildElement.repeatParentElement = this.repeatParentElement;
            repeatChildElement.popupMenu = this.popupMenu;
            //used when check validation
            repeatChildElement.isRepeatTable = this.isRepeatTable();
            repeatChildElement.keyIndex = keyIndex;
        },

        /*
         createRepeatMenuButton: function (parentElement) {
         if (parentElement == null) return;

         var menuDiv = document.createElement("div");
         menuDiv.style.display = "none";
         menuDiv.style.left = parentElement.style.width;
         $(menuDiv).addClass(this.isRepeatTable() ? InfoPlus.Repeat.RepeatControl.CLASS_TABLE_BUTTON : InfoPlus.Repeat.RepeatControl.CLASS_SECTION_BUTTON);
         parentElement.appendChild(menuDiv);
         },
         */

        createRepeatSectionExpandButton: function (parentElement) {
            if (parentElement == null) return;
            var siblings = $(parentElement).children();
            var repeatSectionDiv = siblings[0];
            var menuDiv = siblings[siblings.length - 1];
            var expandDiv = document.createElement("div"),
                $expandDiv = $(expandDiv);

            $expandDiv.addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_EXPAND_BUTTON)
                .addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_SHRINK)
                .addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_EXPAND_BUTTON_OPACITY)
                .attr("title", $$.lt("repeatControl.shrink"))
                .data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_MENU_DIV, menuDiv)
                .data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_DIV, repeatSectionDiv)
                .data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_SECTION_DIV, parentElement);
            //hide the expand div to avoid using it
            $expandDiv.hide();
            parentElement.appendChild(expandDiv);
            $(parentElement).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_SECTION_EXPAND_BUTTON, expandDiv);
        },

        changeErrorDivToTempClassName: function (oldId, newId, $foundErrorDivs, tempErrorDivSurfix, errorDivTempClassNames) {
            var oldErrorDivClassName = oldId + "formError";
            for (var errorDivIndex = 0; errorDivIndex < $foundErrorDivs.length; errorDivIndex++) {
                if ($foundErrorDivs[errorDivIndex].className.indexOf(oldErrorDivClassName) !== -1) {
                    var newErrorDivClassName = newId + tempErrorDivSurfix;
                    $($foundErrorDivs[errorDivIndex]).removeClass(oldErrorDivClassName);
                    $($foundErrorDivs[errorDivIndex]).addClass(newErrorDivClassName);
                    errorDivTempClassNames.push(newErrorDivClassName);
                }
            }
        },

        changeErrorDivToNewClassName: function (errorDivTempClassNames, tempErrorDivSurfix) {
            for (var index = 0; index < errorDivTempClassNames.length; index++) {
                var errorDivTempClassName = errorDivTempClassNames[index];
                var errorDiv = $("div." + errorDivTempClassName)[0];
                $(errorDiv).removeClass(errorDivTempClassName);
                $(errorDiv).addClass(errorDivTempClassName.substring(0, errorDivTempClassName.length - tempErrorDivSurfix.length) + "formError");
            }
        },

        changeRadioControlToTempName: function (control, newControlPath, tempRadioControlSurfix, radioControls) {
            //if the control is a radio ,change the name to a temp name ,otherwise the value maybe lost in Firefox
            control.name = $(control).data($Control.DATA_FIELD) + newControlPath + tempRadioControlSurfix;
            radioControls.push(control);
        },

        changeRadioControlToNewName: function (radioControls, tempRadioControlSurfix) {
            for (var index = 0; index < radioControls.length; index++) {
                var radioControl = radioControls[index];
                radioControl.name = radioControl.name.substr(0, radioControl.name.length - tempRadioControlSurfix.length);
            }
        },


        changeControlPath: function (child, newPath, oldPath, $foundErrorDivs, errorDivTempClassNames, radioControls, tempRadioControlSurfix, tempErrorDivSurfix) {
            var instance = this;

            $(child).find("." + $Control.CLASSNAME_CONTROL).each(function () {
                var control = $(this).data($Control.DATA_CONTROL_OBJECT);
                if (control == null || control.element == null) return;
                var controlElement = control.element,
                    $controlElement = $(controlElement),
                    oldControlPath = $controlElement.data($Control.DATA_PATH);
                if (oldControlPath == null) return;
                var newControlPath = newPath + oldControlPath.substr(oldPath.length);
                var hiddenInput = $controlElement.data($Control.DATA_ORIGIN_INPUT);
                var oldId = (hiddenInput == null) ? controlElement.id : hiddenInput.id;
                var newId = oldId.substr(0, oldId.length - oldControlPath.length) + newControlPath;

                if (hiddenInput == null) {
                    if (controlElement.type !== 'radio') {
                        $controlElement.attr("name", $controlElement.data($Control.DATA_FIELD) + newControlPath);
                    } else {
                        instance.changeRadioControlToTempName(controlElement, newControlPath, tempRadioControlSurfix, radioControls);
                    }
                    controlElement.id = newId;
                } else {
                    hiddenInput.name = $controlElement.data($Control.DATA_FIELD) + newControlPath;
                    hiddenInput.id = newId;
                }


                $controlElement.data($Control.DATA_PATH, newControlPath);
                if (control.controlType === $Control.CONTROL_TYPE_DATE) {
                    var date = control;
                    date.reInitDatePicker();
                }
                control.path = newControlPath;

                //设置rowIndex字段
                if ($controlElement.hasClass($Control.CLASSNAME_ROWINDEX)) {
                    control.setValue(instance.getRowIndex(newControlPath));
                }

                instance.changeErrorDivToTempClassName(oldId, newId, $foundErrorDivs, tempErrorDivSurfix, errorDivTempClassNames);
            });

        },


        changeParentElementPath: function (child, newPath, oldPath) {
            var $repeatParentElements = $(child).find("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_PARENT_ELEMENT);
            for (var i = 0; i < $repeatParentElements.length; i++) {
                var repeatParentElement = $repeatParentElements[i],
                    repeatCtrl = $(repeatParentElement).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                var oldParentElementPath = repeatCtrl.path;
                if (oldParentElementPath == null) {
                    continue;
                }
                var newParentElementPath = newPath + oldParentElementPath.substr(oldPath.length);
                repeatCtrl.path = newParentElementPath;
                repeatParentElement.id = repeatCtrl.groupName + newParentElementPath;
                $(repeatParentElement).attr("name", repeatParentElement.id);
            }
        },

        changeRepeatElementPath: function (child, newPath, oldPath) {
            var $repeatControls = $(child).find("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION + ",." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW);
            for (var i = 0; i < $repeatControls.length; i++) {
                var $repeatControl = $($repeatControls[i]);
                var oldElementPath = $repeatControl.data($Control.DATA_PATH);
                if (oldElementPath == null) {
                    continue;
                }
                var newElementPath = newPath + oldElementPath.substr(oldPath.length);
                $repeatControl.data($Control.DATA_PATH, newElementPath);
            }
        },

        changeKeyIndex: function (repeatParentElement, newKeyIndex) {
            if (this.isRepeatSection()) {
                $(repeatParentElement).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT).keyIndex = newKeyIndex;
            } else {
                $($(repeatParentElement).parent().parent()[0]).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT).keyIndex = newKeyIndex;
            }
        },

        /**
         *  获取重复节中的所有子块或者重复表中的所有行
         */
        getRepeatChildren: function () {
            return $(this.repeatContentParentElement).children(this.isRepeatSection() ? "." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION : "." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW);
        },

        /**
         * 获取第index行的dom
         * @param index
         */
        getRepeatChild: function (index) {
            var children = this.getRepeatChildren();
            if (index < children.length) {
                return children[index];
            }
            return null;
        },

        /**
         *  更新repeat section或table row 父元素的keyIndex数组
         */
        updateRepeatParentElementKeyIndex: function () {
            var $repeatableChildren = this.getRepeatChildren();
            var newKeyIndex = [];
            for (var index = 0; index < $repeatableChildren.length; index++) {
                var child = $repeatableChildren[index];
                newKeyIndex.push(child.keyIndex);
            }
            this.keyIndex = newKeyIndex;
        },


        /**
         *   重组repeat section or repeatable table row
         *   change every field's name,id,path in section or row
         *   change the path of every section or row
         *   change the class name of error div
         *   更新每个repeatParentElement.repeatConfig.path
         *   更新每个repeatSection repeatRow 的path
         *   并更新父元素的keyIndex数组
         */
        reorganizeRepeatableElement: function (updateErrorDivPosition) {

            var $repeatableChildren = this.getRepeatChildren();
            var radioControls = [];
            var errorDivTempClassNames = [];
            var tempRadioControlSuffix = "_radio_temp";
            var tempErrorDivSuffix = "_errorDiv_temp";
            var newKeyIndex = [];

            var $foundErrorDivs = $("body > div.formError");

            for (var index = 0, len = $repeatableChildren.length; index < len; index++) {
                var child = $repeatableChildren[index];
                var $child = $(child);
                newKeyIndex.push(child.keyIndex);
                var oldPath = $child.data($Control.DATA_PATH);
                var oldPathSplit = oldPath.split("_");
                if (parseInt(oldPathSplit[oldPathSplit.length - 1]) === index) continue;
                oldPathSplit.shift();
                var newPath = '';
                for (var i = 0; i < oldPathSplit.length - 1; i++) {
                    newPath += '_' + oldPathSplit[i];
                }
                newPath += '_' + index;
                $child.data($Control.DATA_PATH, newPath);
                this.changeControlPath(child, newPath, oldPath, $foundErrorDivs, errorDivTempClassNames, radioControls, tempRadioControlSuffix, tempErrorDivSuffix);
                this.changeParentElementPath(child, newPath, oldPath);
                this.changeRepeatElementPath(child, newPath, oldPath);
            }
            this.changeRadioControlToNewName(radioControls, tempRadioControlSuffix);
            this.changeErrorDivToNewClassName(errorDivTempClassNames, tempErrorDivSuffix);
            if (updateErrorDivPosition) {
                $IU.updateFormTipsAndViews();
            }
            this.keyIndex = newKeyIndex;
            //this.changeKeyIndex(this.repeatContentParentElement, newKeyIndex);
        },

        createRepeatableRow: function (repeatIndex, repeatData, keyIndex) {
            var subPath = this.path + "_" + repeatIndex,
                child = this.createRepeatLayout(repeatData, subPath);

            this.initRepeatable(child, subPath, repeatIndex);

            this.repeatContentParentElement.appendChild(child);
            if (this.isRepeatTable()) {
                $(child).addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW);
            } else {
                $(child).addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION);
                this.createRepeatSectionExpandButton(child);
            }
            keyIndex.push(repeatIndex);
            return child;
        },


        /**
         * 创建重复块或table row的内容
         * repeatParentElement是重复section或table的父元素，section是其外面一层的div,row是table外面一层的div
         * repeatContentParentElement是重复section或table row的父元素,对section而言repeatParentElement=repeatContentParentElement，对table row而言，repeatContentParentElement是tr外面的tbody
         * 返回keyIndex，其内容为重复section或者table row 原数据库中的存盘的位置
         */
        createRepeatableContent: function (data) {
            var repeatIndex = 0,
                dataSlice = this.sliceEntity(data, repeatIndex, this.fieldNames),
                keyIndex = [],
                minOccur = this.groupInformation.minOccur == null ? 0 : this.groupInformation.minOccur;

            if (dataSlice.keyCount === 0) {
                //初始数据为0行，可新增且minOccur设置不为0，就新增minOccur行初始数据
                if (minOccur > 0 && this.power.insertPower === true) {
                    while (repeatIndex < minOccur) {
                        var repeatData = this.newRepeatData;
                        var row = this.createRepeatableRow(repeatIndex, repeatData, keyIndex);
                        this.formRender.doDynamicFormulaControls = this.formRender.doDynamicFormulaControls.concat($IU.getAllControls(row));
                        repeatIndex++;
                    }
                }
            } else {
                while (dataSlice.keyCount > 0) {
                    repeatData = dataSlice.data;
                    this.createRepeatableRow(repeatIndex, repeatData, keyIndex);
                    dataSlice = this.sliceEntity(data, ++repeatIndex, this.fieldNames);
                }
            }

            this.keyIndex = keyIndex;

            this.updateCountControl();
        },

        //删除重复节中一个section或者重复表中一行
        deleteRepeat: function (repeat, reorganize, ignoreFieldRefer) {
            var $repeat = $(repeat);
            if (ignoreFieldRefer === undefined) {
                ignoreFieldRefer = false;
            }
            if (!ignoreFieldRefer) {
                var excludePath = $repeat.data($Control.DATA_PATH);
                var render = this.formRender;

                //fieldRefer之前先重建cache
                $$.dynamics.cache.build();

                //对于删除的重复节或表中每个控件执行一次fieldReferEvent，但是只影响到祖先（兄弟和子孙都不影响），并且影响祖先计算context时不考虑该删除的重复节或行
                $repeat.find("." + $Control.CLASSNAME_CONTROL).each(function () {
                    var control = $(this).data($Control.DATA_CONTROL_OBJECT);
                    if (control == null || control.field === undefined || control.element === undefined) return;
                    if (control.onFieldRefer) {
                        //删除时候影响兄弟和子孙的任何公式，动作，样式都无意义
                        control.fieldReferEvent(render, true, false, false, false, false, excludePath);
                    }
                });
            }

            $IU.clearErrorPrompt(repeat);
            //$IU.clearSuggester(repeat);

            $repeat.empty();
            $repeat.remove();


            if (reorganize) {
                this.reorganizeRepeatableElement(true);

                if (this.repeatAddLink != null) {
                    if (this.shouldShowAddLink()) {
                        this.repeatAddLink.showLink();
                    }
                }
            }
            this.updateCountControl();

        },

        addRepeatingClass: function (child) {
            if (this.isRepeatSection()) {
                $(child).addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION);
            } else {
                $(child).addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW);
            }
        },


        addMenuButton: function (child) {
            if (this.isRepeatSection()) {
                //this.createRepeatMenuButton(child);
                this.createRepeatSectionExpandButton(child);
            } else {
                //var lastTd = $(child).children().last()[0];
                //this.createRepeatMenuButton(lastTd);
            }
        },


        reorganizeAndUpdateKeyIndex: function (reorganize) {
            if (reorganize) {
                this.reorganizeRepeatableElement(false);
            } else {
                this.updateRepeatParentElementKeyIndex();
            }
        },

        showRepeatWithEffect: function (repeatCtrl, moveUp, callback) {
            var effectName = this.isRepeatSection() ? "slide" : "highlight";
            var options = this.isRepeatSection() ? { direction: moveUp ? "down" : "up" } : { color: "#BFD0E6" };
            //var speed = this.isRepeatSection() ? "normal" : "slow";
            if (callback != null && typeof callback === "function") {
                //如果已经可见，那么就调用一下callback
                if (!$(repeatCtrl).is(":visible")) {
                    $(repeatCtrl).show(effectName, options, "slow", callback);
                } else {
                    callback();
                }
            } else {
                if (!$(repeatCtrl).is(":visible")) {
                    $(repeatCtrl).show(effectName, options, "slow");
                }
            }
        },

        doDynamicsAfterCreate: function (controls) {
            var formRender = this.formRender,
                repeatControl = this;

            //fieldRefer之前先重建cache
            $$.dynamics.cache.build();

            //对于新增出来的重复节或表中每个控件执行动态样式、动作、公式，并执行一次fieldReferEvent，
            //但是只影响到祖先（子孙不影响(目前手动新增出来的也不会有子孙),兄弟因为会自己执行所有动态，所以也不用影响）
            for (var i = 0, len = controls.length; i < len; i++) {
                var control = controls[i];
                control.setDynamicStyle(formRender);
                control.setDynamicValue(formRender);
                control.doDynamicAction(formRender);

                if (control.onFieldRefer) {
                    //control.fieldReferEvent(formRender, true, true, true, true, true);
                    control.fieldReferEvent(formRender, true, false, false, false, false);
                }
            }

            //对重复控件做一次设置动态样式，目的其实是为了设置itemStyle
            repeatControl.setDynamicStyle(formRender);
        },

        createAfterShowCallback: function (controls, newRow) {
            var firstControlNamePrefix = this.firstControlNamePrefix,
                shouldShowAddLink = this.shouldShowAddLink(),
                repeatAddLink = !shouldShowAddLink ? this.repeatAddLink : null,
                formRender = this.formRender,
                repeatControl = this;

            return function () {
                //以下动态内容被安排在显示之前做
                /*
                 //fieldRefer之前先重建cache
                 $$.dynamics.cache.build();

                 //对于新增出来的重复节或表中每个控件执行动态样式、动作、公式，并执行一次fieldReferEvent，
                 //但是只影响到祖先（子孙不影响(目前手动新增出来的也不会有子孙),兄弟因为会自己执行所有动态，所以也不用影响）
                 for (var i = 0, len = controls.length; i < len; i++) {
                 var control = controls[i];
                 control.setDynamicStyle(formRender);
                 control.setDynamicValue(formRender);
                 control.doDynamicAction(formRender);

                 if (control.onFieldRefer) {
                 //control.fieldReferEvent(formRender, true, true, true, true, true);
                 control.fieldReferEvent(formRender, true, false, false, false, false);
                 }
                 }

                 //对重复控件做一次设置动态样式，目的其实是为了设置itemStyle
                 repeatControl.setDynamicStyle(formRender);
                 */

                if (firstControlNamePrefix != null) {
                    $IU.setFocusToElement(firstControlNamePrefix + $(this).data($Control.DATA_PATH));
                }

                $IU.updateFormTipsAndViews();

                //新增出来的控件需要重新绑定验证
                $IU.rebindValidationEngine();
                /*
                 $$.params.renderForm.validationEngine('detach');
                 $$.params.renderForm.validationEngine('attach');
                 */
                if (repeatAddLink != null) {
                    if (!shouldShowAddLink) {
                        repeatAddLink.hideLink();
                    }
                }

                //$$.codeManager.requestCodes();
                //触发addedRepeat事件
                $$.addedRepeat(repeatControl, newRow);
                $$(repeatControl).addedRepeat(newRow);
            };
        },

        appendChildToLast: function (child) {
            if (this.isRepeatSection()) {
                //根据权限，新增按钮可能存在，也可能不存在
                var $addLinkDiv = $(this.repeatContentParentElement).children("." + InfoPlus.Repeat.RepeatControl.CLASS_ADD_LINK_CONTAINER_DIV);
                if ($addLinkDiv.length > 0) {
                    $addLinkDiv.before(child);
                } else {
                    $(this.repeatContentParentElement).append(child);
                }
            } else {
                $(this.repeatContentParentElement).append(child);
            }
        },

        addLayoutToDom: function (child) {
            if (this.popupMenu != null && this.popupMenu.repeatSection != null) {
                $(this.popupMenu.repeatSection).after(child);
            } else {
                this.appendChildToLast(child);
            }
        },

        getRowIndex: function (path) {
            var pathArray = path.split("_");
            return parseInt(pathArray[pathArray.length - 1], 10);
        },

        addRowIndexControl: function (row, path) {

            var fakeField = {
                name: this.rowIndexFieldName,
                type: $Control.DATA_TYPE_INT,
                permission: "rw"
            };
            var fakeRender = {
                renderCategory: "Boundable",
                controlId: this.rowIndexFieldName,
                field: this.rowIndexFieldName
            };
            var hiddenControl = new $Controls.Hidden(path, fakeField, fakeRender, this.getRowIndex(path));
            $(hiddenControl.element).addClass($Control.CLASSNAME_ROWINDEX);
            $(row).append(hiddenControl.element);
            return hiddenControl;
        },

        initCountControl: function () {
            var path = this.path;

            var fakeField = {
                name: this.groupCountFieldName,
                type: $Control.DATA_TYPE_INT,
                permission: "rw"
            };
            var fakeRender = {
                renderCategory: "Boundable",
                controlId: this.groupCountFieldName,
                field: this.groupCountFieldName
            };
            var hiddenControl = new $Controls.Hidden(path, fakeField, fakeRender, 0);
            $(hiddenControl.element).addClass($Control.CLASSNAME_GROUP_COUNT);
            $(this.repeatParentElement).append(hiddenControl.element);
            return hiddenControl;
        },

        updateCountControl: function () {
            var countControl = $(this.repeatParentElement).children("." + $Control.CLASSNAME_GROUP_COUNT).data($Control.DATA_CONTROL_OBJECT);
            var rowClass = this.isRepeatSection() ? repeatControl.CLASS_REPEAT_SECTION : repeatControl.CLASS_REPEAT_TABLE_ROW;
            var count = $(this.repeatContentParentElement).children("." + rowClass).length;
            if (countControl != null) {
                countControl.setValue(count);
            }
        },

        addDetailDialogScrollEvent: function (dialog) {
            var updateFlag;
            $(dialog.element).find(".dialog_content").on("scroll", function () {

                if (updateFlag === undefined) {
                    updateFlag = setTimeout(function () {
                        updateFlag = undefined;
                        $IU.updateFormTipsAndViews();
                    }, 300);
                }


                $(this).find(".infoplus_popupMenu").each(function () {
                    if ($(this).is(":visible")) {
                        if ($(this).data("menu").repeatSection != null) {
                            var repeatable = $(this).data("menu").repeatSection;
                            var pos = $IU.getElementPosition(repeatable),
                                offsetLeft = pos.left + repeatable.offsetWidth,
                                offsetTop = pos.top;
                            offsetTop -= $(repeatable).parents(".dialog_content").scrollTop();
                            var minTop = parseInt($(repeatable).parents(".dialog_body").css("padding-top"), 10) + $(repeatable).parents(".dialog_body").children(".dialog_title").outerHeight();
                            if (offsetTop < minTop) {
                                offsetTop = minTop;
                            }
                            $(this).css("left", offsetLeft).css("top", offsetTop);
                        }
                    }
                });
            });
        },

        addRepeat: function (data, path, addToDom, scrollToNewRow, updateRowIndex, fromAddClick) {
            if (data == null) {
                data = this.newRepeatData;
            }
            if (path == null) {
                path = this.getNewPath();
            }
            var formRender = this.formRender;

            if (addToDom) {
                formRender.save(null, false);
            }

            var child = this.createRepeatLayout(data, path);
            this.initRepeatable(child, path, -1);

            child.style.display = "none";
            //标记是此次操作新增的
            $(child).data("isAdded", true);
            this.addRepeatingClass(child);
            //不需要下拉箭头
            //this.addMenuButton(child);

            //不需要扩展箭头了
            /*
             if (this.isRepeatSection()) {
             this.createRepeatSectionExpandButton(child);
             }
             */

            var controls = $IU.getAllControls(child);

            if (addToDom) {
                this.addLayoutToDom(child);

                //初始化select2控件，改到addedRepeat事件里做了
                /*
                $(child).find(".infoplus_select2").each(function () {
                    var control = $(this).data($Control.DATA_CONTROL_OBJECT);
                    control.initSelect2();
                });
                 */

                this.updateCountControl();

                this.reorganizeRepeatableElement(false);
                formRender.initFieldReferedClass();

                if (updateRowIndex === true) {
                    $(child).children("." + $Control.CLASSNAME_ROWINDEX).change();
                }

                //滚动到新增出来的行
                if (scrollToNewRow === true) {

                    if (this.popupMenu != null && this.popupMenu.repeatSection != null) {
                        //按弹出菜单的新增
                        var $currentRow = $(this.popupMenu.repeatSection),
                            currentRowBottom = $currentRow.offset().top + $currentRow.outerHeight();
                        if ($currentRow.outerHeight() > 30) {
                            currentRowBottom += 30;
                        }
                    } else {
                        //按重复节或表底端的新增按钮
                        currentRowBottom = $(this.repeatAddLink.linkDiv).offset().top;
                        currentRowBottom += 30;
                    }

                    //如果新增的节或行在屏幕外，那么滚动使其可见
                    //预留30像素高度，如果新增的节在屏幕底端只露出不到30像素，那么也滚动,对于重复表中的行，如果这行自己都没有30像素，那么就不用预留30像素高了
                    if (currentRowBottom > $(document).scrollTop() + $(window).height()) {
                        setTimeout(function () {
                            //滚动位置为当前节底端位置再上提10像素
                            $IU.scrollTo(currentRowBottom - $("#command_holder").outerHeight() - 30 - 10, 500);
                        }, 100);
                    }
                }

                if (this.groupInformation.isMasterDetail && fromAddClick) {
                    var instance = this;
                    var $detailCell = $(child).find("td.detailCell"),
                        $detailContent = $detailCell.children();

                    $detailContent.css("height", "auto");
                    //触发addingRepeat事件
                    $$.addingRepeat(this, child);
                    $$(this).addingRepeat(child);

                    //先做动态再显示
                    this.doDynamicsAfterCreate(controls);

                    //如果没有设置动态隐藏就显示
                    if ($(child).data("dynamicInvisible") == null) {
                        $(child).show();
                    }
                    var afterShowCallback = this.createAfterShowCallback(controls, child);
                    afterShowCallback();

                    var options = {
                        title: this.getDetailTitle(),
                        content: $detailContent,
                        buttons: [
                            {
                                name: $$.lt("common.ok"),
                                callback: function () {
                                    $detailContent.detach().appendTo($detailCell);
                                },
                                callOnClose: true,
                                defaultButton: true
                            },
                            {
                                name: $$.lt("common.cancel"),
                                callback: function () {
                                    instance.deleteRepeat(child, true);
                                }
                            }
                        ]
                    };
                    $IU.clearAllError();
                    if (!$$.MOBILE) {
                        options.container = $$.params.renderForm;
                        options.overflow = "visible";
                        options.lowZindex = true;
                        options.maxWidth = "95%";
                        options.autoWidth = true;
                        options.autoHeight = true;
                        options.backgroundNoScroll = true;
                        var dialog = new InfoPlus.Render.Dialog(options);
                        dialog.show();
                        this.addDetailDialogScrollEvent(dialog);
                    } else {
                        options.onShow = function () {
                            instance.showingDetail = false;
                        };
                        this.showingDetail = true;
                        var page = new InfoPlus.Render.Mobile.Page(options);
                        page.show();
                    }

                } else {
                    //触发addingRepeat事件
                    $$.addingRepeat(this, child);
                    $$(this).addingRepeat(child);

                    //先做动态再显示
                    this.doDynamicsAfterCreate(controls);

                    //动态中可能设置dynamicInvisible,据此来判断是否需要显示,如果设置过动态不可见了，那么就不用显示了
                    if ($(child).data("dynamicInvisible") == null) {
                        this.showRepeatWithEffect(child, false, this.createAfterShowCallback(controls, child));
                    } else {
                        afterShowCallback = this.createAfterShowCallback(controls, child);
                        afterShowCallback();
                    }

                }
            }

            return child;
        },

        getDetailTitle: function () {
            if (this.groupInformation && !$IU.isEmptyStr(this.groupInformation.description)) {
                return this.groupInformation.description;
            } else {
                return $$.lt("repeatControl.detail");
            }
        },

        //对于master-detail的重复表，显示详细对话框
        showDetail: function (repeatSection) {

            if (this.showingDetail) {
                return;
            }
            var $repeatSection = $(repeatSection);

            if (this.isRepeatTable() && this.groupInformation.isMasterDetail) {
                var instance = this;
                var shouldShowDeleteButton = function () {
                    if (instance.readOnly === true) {
                        return false;
                    }
                    if ($repeatSection.data("isAdded") !== undefined) {
                        if ($repeatSection.data("isAdded") === true) return true;
                    }
                    return instance.power.deletePower;
                };
                var $detailCell = $(repeatSection).find("td.detailCell"),
                    $detailContent = $detailCell.children();
                $detailContent.css("height", "auto");
                $IU.clearAllError();


                var options = {
                    title: this.getDetailTitle(),
                    content: $detailContent,
                    onShow: function () {
                        //设置延时是为了让验证计算出来的位置正确，发现即使是在动画结束事件里做也会计算错误，必须等一下
                        setTimeout(function () {

                            instance.showingDetail = false;
                            //如果该行打上了显示详细错误的标记，那么就在打开详细页时候显示验证信息
                            if ($repeatSection.data("showDetailError") === true) {
                                $repeatSection.removeData("showDetailError");
                                var controls = $detailContent.find("*[class*='validate']").filter($IU.isValidateControlFilter);
                                $IU.checkControlValidation(controls, true, false);
                            }


                            var diffs = $detailContent.data("diffs");
                            if (diffs != null) {
                                var types = {
                                    'new': 'infoTip',
                                    'modify': 'warningTip',
                                    'delete': 'errorTip'
                                };

                                var onClose = function (control) {
                                    return function () {
                                        control.clearModified();
                                    };
                                };

                                for (var i = 0, len = diffs.length; i < len; i++) {
                                    var control = diffs[i].control,
                                        diffObj = diffs[i].diff;
                                    if ((control.controlContainer != null && $(control.controlContainer).is(":visible")) || $(control.element).is(":visible")) {
                                        var hoverText = null;
                                        if (diffObj['type'] === "delete" || diffObj['type'] === "modify") {
                                            hoverText = (diffObj.value === "" ? $$.lt("compare.previousValue.empty") : ($$.lt("compare.previousValue.previous") + diffObj.value));
                                        }
                                        diffs[i].tip = new InfoPlus.Render.PopTip({
                                            popper: control.controlContainer || control.element,
                                            container: !$$.MOBILE ? dialog.element : page.element,
                                            text: $$.lt("compare.compareType.type" + diffObj['type'].substr(0, 1).toUpperCase() + diffObj['type'].substr(1)),
                                            hoverText: hoverText,
                                            colorClass: types[diffObj['type']],
                                            placement: 'top',
                                            effect: "bounce",
                                            onClose: onClose(control)
                                        });
                                        control.markModified();
                                    }
                                }

                            }
                        }, 300);


                    },
                    onClose: function () {
                        var diffs = $detailContent.data("diffs");
                        if (diffs != null) {
                            for (var i = 0, len = diffs.length; i < len; i++) {
                                diffs[i].tip.close(true);
                            }
                        }
                    },

                    buttons: [
                        {
                            name: $$.lt("common.close"),
                            callback: function () {
                                $detailContent.detach().appendTo($detailCell);
                            },
                            callOnClose: true,
                            defaultButton: true
                        }
                    ]
                };

                if (!$$.MOBILE) {
                    options.container = $$.params.renderForm;
                    options.overflow = "visible";
                    options.lowZindex = true;
                    options.maxWidth = "95%";
                    options.autoWidth = true;
                    options.autoHeight = true;
                    options.backgroundNoScroll = true;
                    if (shouldShowDeleteButton()) {
                        options.buttons.push({
                            name: $$.lt("common.deleteText"),
                            className: "delete_detail_button",
                            preventDefault: true,
                            callback: function () {
                                if (instance.groupInformation != null && instance.groupInformation.minOccur != null && instance.groupInformation.minOccur > 0) {
                                    if (instance.getRepeatChildren().length <= instance.groupInformation.minOccur) {
                                        $IU.messageBox(null, $$.lt("popupMenu.minLimit"), null, 300);
                                        return false;
                                    }
                                }
                                $IU.yesNoBox(
                                    (instance.isRepeatSection() ? $$.lt("repeatControl.deleteSection") : $$.lt("repeatControl.deleteRow")), 300, function () {
                                        dialog.close();
                                        instance.deleteRepeat(repeatSection, true);
                                    });
                                return false;
                            }
                        });
                    }
                    var dialog = new InfoPlus.Render.Dialog(options);
                    dialog.show();
                    this.addDetailDialogScrollEvent(dialog);
                } else {
                    if (shouldShowDeleteButton()) {
                        options.buttons.push({
                            name: $$.lt("common.deleteText"),
                            className: "delete_detail_button",
                            preventDefault: true,
                            callback: function () {
                                if (instance.groupInformation != null && instance.groupInformation.minOccur != null && instance.groupInformation.minOccur > 0) {
                                    if (instance.getRepeatChildren().length <= instance.groupInformation.minOccur) {
                                        $IU.messageBox(null, $$.lt("popupMenu.minLimit"), null, 300);
                                        return false;
                                    }
                                }
                                $IU.yesNoBox(
                                    (instance.isRepeatSection() ? $$.lt("repeatControl.deleteSection") : $$.lt("repeatControl.deleteRow")), 300, function () {
                                        page.close();
                                        instance.deleteRepeat(repeatSection, true);
                                    });
                                return false;
                            }
                        });
                    }
                    this.showingDetail = true;
                    var page = new InfoPlus.Render.Mobile.Page(options);
                    page.show();
                }
            }
        },

        moveDownRepeatSection: function (repeatSection) {
            //检查是否有上下移的权限
            if (this.power.writePower === false) return;
            var $repeatSection = $(repeatSection),
                classSelectorName = "." + (this.isRepeatSection() ? InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION : InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW),
                $next = $repeatSection.next(classSelectorName);
            if ($next.length > 0) {

                //下移的节顶端超出屏幕，那么就滚动到该处
                var moveRepeatSectionTop = $repeatSection.offset().top + $next.outerHeight();
                if (moveRepeatSectionTop > $(document.body).scrollTop() + $(window).height()) {
                    setTimeout(function () {
                        $IU.scrollTo(moveRepeatSectionTop - $("#command_holder").outerHeight() - 10, 500);
                    }, 100);
                }

                $repeatSection.detach().insertAfter($next).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SELECTED).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_MENU_POPUPED);
                this.reorganizeRepeatableElement(true);

                var instance = this;
                //setTimeout(0)是想让隐藏的rowIndex字段先触发change，然后再showRepeatWithEffect,否则会在动画结束后恢复原来的颜色(highlight效果造成的)
                setTimeout(function () {
                    instance.showRepeatWithEffect(repeatSection, false);
                }, 0);

            }
        },

        moveUpRepeatSection: function (repeatSection) {
            //检查是否有上下移的权限
            if (this.power.writePower === false) return;
            var $repeatSection = $(repeatSection),
                classSelectorName = "." + (this.isRepeatSection() ? InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION : InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW),
                $prev = $repeatSection.prev(classSelectorName);
            if ($prev.length > 0) {

                //上移的节顶端超出屏幕，那么就滚动到该处
                var moveRepeatSectionTop = $prev.offset().top;
                if (moveRepeatSectionTop < $(document.body).scrollTop() + $("#command_holder").outerHeight()) {
                    setTimeout(function () {
                        $IU.scrollTo(moveRepeatSectionTop - $("#command_holder").outerHeight() - 10, 500);
                    }, 100);
                }

                $repeatSection.detach().insertBefore($prev).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SELECTED).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_MENU_POPUPED);
                this.reorganizeRepeatableElement(true);

                var instance = this;
                //setTimeout(0)是想让隐藏的rowIndex字段先触发change，然后再showRepeatWithEffect,否则会在动画结束后恢复原来的颜色(highlight效果造成的)
                setTimeout(function () {
                    instance.showRepeatWithEffect(repeatSection, false);
                }, 0);
            }
        },

        moveRow: function (oldIndex, newIndex) {
            if (oldIndex < 0 || newIndex < 0) return;
            if (this.power.writePower === false) return;
            var $children = this.getRepeatChildren();
            if (oldIndex >= $children.length) return;
            //超出原先行数，放在最后
            if (newIndex >= $children.length) {
                newIndex = $children.length - 1;
            }
            if (oldIndex === newIndex) return;
            var $moveRow = $($children[oldIndex]),
                $moveToRow = $($children[newIndex]);
            if (oldIndex < newIndex) {
                $moveRow.detach().insertAfter($moveToRow);
            } else {
                $moveRow.detach().insertBefore($moveToRow);
            }
            this.reorganizeRepeatableElement(true);
            this.showRepeatWithEffect($moveRow[0], oldIndex > newIndex);
        },

        getNewPath: function () {
            var repeatSection = this.popupMenu != null ? this.popupMenu.repeatSection : null,
                repeatChildrenClassName = "." + (this.isRepeatSection() ? InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION : InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW),
                subPath;
            if (repeatSection != null) {
                //insert new repeat section or table row after this.repeatSection element
                var repeatLevel = $(repeatSection).data($Control.DATA_PATH).split("_");
                subPath = this.path + '_' + (Number(repeatLevel[repeatLevel.length - 1]) + 1);
            } else {
                var childCount = $(this.repeatContentParentElement).children(repeatChildrenClassName).length;
                subPath = this.path + '_' + childCount;
            }
            return subPath;
        },


        getGroupIndexArray: function (groupObjArray) {
            var indexArray = [],
                len = groupObjArray.length;
            for (var i = 0; i < len; i++) {
                indexArray.push(groupObjArray["groupIndex"]);
            }
            return indexArray;
        },

        createFinishShowFlag: function (newChildren) {
            var flag = [];
            for (var newIndex = 0; newIndex < newChildren.length; newIndex++) {
                if (newChildren[newIndex] === undefined) {
                    flag[newIndex] = true;
                } else {
                    flag[newIndex] = !$(newChildren[newIndex]).data("isNew");
                }
            }
            return flag;
        },

        createAfterShowAllCallback: function (newRow, finishFlag, index) {
            var shouldShowAddLink = this.shouldShowAddLink(),
                repeatAddLink = this.repeatAddLink,
                repeatControl = this;

            return function () {

                //触发addedRepeat事件
                $$.addedRepeat(repeatControl, newRow);
                $$(repeatControl).addedRepeat(newRow);

                finishFlag[index] = true;
                var allDone = true;
                for (var i = 0; i < finishFlag.length; i++) {
                    if (finishFlag[i] === false) {
                        allDone = false;
                        break;
                    }
                }
                if (allDone) {
                    //rebind validation
                    //var $renderFrom = $("#renderForm");
                    $$.params.renderForm.validationEngine('detach');
                    $$.params.renderForm.validationEngine('attach');

                    if (repeatAddLink != null) {
                        if (!shouldShowAddLink) {
                            repeatAddLink.hideLink();
                        } else {
                            repeatAddLink.showLink();
                        }
                    }
                }
            };
        },


        //将fieldChange事件传过来的数据转换成新增重复节或者行需要用到的数据
        convertData: function (data) {
            var resultData = {};
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    //entityIndex不需要
                    if (key === "entityIndex") {
                        continue;
                    }
                    var value = data[key];
                    //如果是数组，说明是个重复表或者节，直接跳过，这些数据将在那些重复节或者重复表处理过程中使用
                    if ($IU.isArray(value)) {
                        continue;
                    }
                    if (key.length > 0) {
                        //获得field名称,转换出来的数据的key需要是这个名称
                        var newKey = "field" + key.substring(0, 1).toUpperCase() + key.substring(1),
                            field = $$.entity.fields[newKey];

                        if (value.hasOwnProperty("attributes")) {
                            resultData[newKey + "_Attr"] = value["attributes"];
                        }

                        if (field != null) {
                            var fieldType = field['type'].toLocaleLowerCase();
                            //如果是日期类型需要转换
                            if (fieldType === "date") {
                                if ($IU.isString(value)) {
                                    resultData[newKey] = $IU.dateStringToUnixTime(value);
                                } else {
                                    resultData[newKey] = value;
                                }
                                continue;
                            }
                            //如果是Code,User,Organize需要把field_displayText赋值
                            if (fieldType === "user" || fieldType === "organize" || fieldType === "code" || value["codeId"] != null) {
                                resultData[newKey] = value["codeId"] || '';
                                resultData[newKey + "_displayText"] = value["codeName"] || '';
                                continue;
                            }
                        }

                        resultData[newKey] = value;

                    }
                }
            }
            return resultData;
        },

        addChildren: function (newData, newChildren) {

            //给所有element打上非新增标记
            for (var newIndex = 0, len = newChildren.length; newIndex < len; newIndex++) {
                if (newChildren[newIndex] != null) {
                    $(newChildren[newIndex]).data("isNew", false);
                }
            }


            //将新增的数据创建相应的重复节或者行
            for (newIndex = 0, len = newData.length; newIndex < len; newIndex++) {
                var entityIndex = newData[newIndex]["entityIndex"];
                if (entityIndex === -1 || entityIndex === undefined) {
                    var newPath = this.path + "_" + newIndex;
                    newChildren[newIndex] = this.addRepeat(this.convertData(newData[newIndex]), newPath, false, false, false, false);
                    //如果是新增的打上新增标记
                    $(newChildren[newIndex]).data("isNew", true);
                }
            }

            //重新将newChildren中所有重复节或者行加载到dom中
            for (newIndex = 0; newIndex < newChildren.length; newIndex++) {
                var newChild = newChildren[newIndex];
                if (newChild !== undefined) {
                    this.appendChildToLast(newChild);

                    if ($(newChild).data("isNew") === true) {
                        //初始化select2控件,改到addedRepeat事件里去做了
                        /*
                        $(newChild).find(".infoplus_select2").each(function () {
                            var control = $(this).data($Control.DATA_CONTROL_OBJECT);
                            control.initSelect2();
                        });
                        */
                        $$.addingRepeat(this, newChild);
                        $$(this).addingRepeat(newChild);
                    }
                }
            }


        },

        //重复节或者表的数据因为fieldChange而改变时预处理所有子节或者子行
        //删除新数据中不包含的旧节或者行，新增新节或行，并按照新数据的顺序重新排序
        preprocessChangedDataGroup: function (newData) {

            $IU.clearErrorPrompt(this.repeatParentElement);

            // 在fieldChange返回后重新组织重复节表中的数据，先停止动画(这种情况只发生在add或者del一行后由计行数或者加总的字段发生fieldChange)
            // 如果不停止动画，下面的getRepeatChildren取当前的重复行会出问题
            if ($$.params.fieldChanging != null) {
                var $rows = $(this.repeatContentParentElement).find(this.isRepeatSection() ?
                    "." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION :
                    "." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW);
                $rows.each(function () {
                    var $row = $(this);
                    if ($row.is(":animated")) {
                        //将动画停止且跳到最后
                        $row.stop(true, true);
                    }
                });
            }

            var oldChildren = this.getRepeatChildren(),
                oldDataLen = oldChildren.length,
                newDataLen = newData.length,
                newChildren = [],
                notDeleted = [],
                shouldDeleted = [],
                newIndex;

            //寻找老的index的那条数据在新数据中的index位置，找不到返回-1
            var getNewDataIndex = function (oldGroupIndex) {
                for (var index = 0; index < newDataLen; index++) {
                    if (oldGroupIndex === newData[index]["entityIndex"]) {
                        return index;
                    }
                }
                return -1;
            };


            for (var oldIndex = 0; oldIndex < oldDataLen; oldIndex++) {
                var child = oldChildren[oldIndex];
                newIndex = getNewDataIndex(oldIndex);
                if (newIndex === -1) {
                    //在新数据里没找到，说明需要删除
                    if (this.power.deletePower === false) {
                        //没删除权限则先存着，最后添加到newChildren最后
                        notDeleted.push(child);
                    } else {
                        // this.deleteRepeat(child, false);
                        // 先放到shouldDeleted数组中，后面再循环删除
                        shouldDeleted.push(child);
                    }
                } else {
                    //找到了，说明是修改，先放到newChildren数组里
                    newChildren[newIndex] = child;
                }
            }

            // 循环删除行，如果是fieldChange状态中则只对最后一行做fieldRefer；若不是fieldChange状态，那还是都做fieldRefer
            // 本来考虑fieldChange状态可以都不做fieldRefer的(其中所有动作、样式、验证会在fieldChange后统一做，
            // 但是公式是删除时候需要做的(删除时候执行的公式应该是上层的一些聚合函数))，这些聚合函数会在下面代码(注释A)循环
            // 所有重复节表中的控件执行fieldReferEvent有机会执行到，但是如果这个重复节表如果是被清空了，那么就没可能执行了
            // 所以这里需要对删除的最后一行所有控件执行一次fieldReferEvent（即传递参数ignoreFieldRefer=false）
            for (var delIndex = 0, delLen = shouldDeleted.length; delIndex < delLen; delIndex++) {
                var child = shouldDeleted[delIndex],
                    isLast = (delIndex === delLen - 1),
                    isFieldChanging = ($$.params.fieldChanging != null);
                this.deleteRepeat(child, false, !isLast && isFieldChanging);
            }

            //没有删除权限，把没删除的添加到newChildren最后
            if (this.power.deletePower === false && notDeleted.length > 0) {
                for (var i = 0, len = newData.length; i < notDeleted.length; i++) {
                    newChildren[i + len] = notDeleted[i];
                }
            }

            //将newChildren里已经存放的重复节或者行从dom中取下来
            for (newIndex = 0; newIndex < newChildren.length; newIndex++) {
                var newChild = newChildren[newIndex];
                if (newChild !== undefined) {
                    $(newChild).detach();
                }
            }

            var formRender = this.formRender;

            //清formRender.data,以便addChildren时候从formRender.data取Attr
            formRender.save(null, false);

            this.addChildren(newData, newChildren);
            this.updateCountControl();

            //重新按照顺序设定path
            this.reorganizeRepeatableElement(false);
            formRender.initFieldReferedClass();

            //调整顺序完毕再存一份data
            formRender.save(null, false);

            var dynamicStyles = $$.dynamics.styles;
            //fieldRefer之前先重建cache
            $$.dynamics.cache.build();

            // A. 对于重复节或表中每个控件执行一次fieldReferEvent
            $(this.repeatContentParentElement).find("." + $Control.CLASSNAME_CONTROL).each(function () {
                var control = $(this).data($Control.DATA_CONTROL_OBJECT);
                if (control == null || control.field === undefined || control.element === undefined) return;
                var fieldName = control.field.name;

                if (control.onFieldRefer) {
                    control.fieldReferEvent(formRender, true, false, false, true, true);
                }

                if (dynamicStyles[fieldName] !== undefined) {
                    $IU.saveOriginStyles(this);
                }
            });

            var finishShowFlag = this.createFinishShowFlag(newChildren);

            for (newIndex = 0; newIndex < newChildren.length; newIndex++) {
                newChild = newChildren[newIndex];
                if (newChild !== undefined) {
                    if ($(newChild).data("isNew") === true) {
                        if ($$.params.fieldChanging == null) {
                            this.showRepeatWithEffect(newChild, false, this.createAfterShowAllCallback(newChild, finishShowFlag, newIndex));
                        } else {
                            $(newChild).show();
                            //触发addedRepeat事件
                            $$.addedRepeat(this, newChild);
                            $$(this).addedRepeat(newChild);
                        }
                    } else {
                        if ($IU.getComputedStyle(newChild, 'display') !== 'none') {
                            $(newChild).show();
                        }
                    }
                }
            }
        },

        //设置重复节或者重复表的数据(全部数据)
        setData: function (data) {

            //如果没有新增权限，将data中新增的行数据删除
            if (this.power.insertPower === false) {
                var d = [];
                for (var i = 0, len = data.length; i < len; i++) {
                    var repeatRow = data[i],
                        isNew = repeatRow["entityIndex"] === -1 || repeatRow["entityIndex"] === undefined;
                    if (!isNew) {
                        d.push(repeatRow);
                    }
                }
                data = d;
            }

            //预处理数据，将该删除的从dom中删除，该新增的添加到dom中，按照这份data准备好表单控件
            this.preprocessChangedDataGroup(data);

            for (i = 0, len = data.length; i < len; i++) {
                repeatRow = data[i];
                isNew = repeatRow["entityIndex"] === -1 || repeatRow["entityIndex"] === undefined;
                var newPath = this.path + "_" + i;
                $IU.setFormData(repeatRow, newPath, isNew);
            }
        },

        showPopupMenu: function (repeatable, isRepeatSection, isLastRow) {
            var popupMenu = this.popupMenu;
            if (popupMenu == null) return;
            //if (this.readOnly === true) return;
            var $menuDiv = $(popupMenu.menuDiv);
            popupMenu.repeatSection = repeatable;
            popupMenu.adjustMenuItemVisibility();
            //popupMenu.menuButton = this;
            //如果所有菜单项都不显示，那么菜单也不用显示了
            if (popupMenu.allMenuItemHide === true) return;

            if ($$.MOBILE) {
                var rootFontSize = parseFloat($("html").css("font-size"));
                var menuWidth = 8;//(padding+border)*2=8
                $menuDiv.find("." + InfoPlus.Repeat.RepeatControl.CLASS_MENU_ITEM).each(function () {
                    if ($(this).css("display") !== "none") {
                        menuWidth += parseFloat($(this).css("width"));
                    }
                });

                $menuDiv.css("width", (menuWidth / rootFontSize) + "rem");
            }


            if (!$$.MOBILE) {

                var inDetailDialog = ($(repeatable).parents(".detailSection").length > 0);
                if (inDetailDialog) {
                    var pos = $IU.getElementPosition(repeatable),
                        offsetLeft = pos.left + repeatable.offsetWidth,
                        offsetTop = pos.top;

                    offsetTop -= $(repeatable).parents(".dialog_content").scrollTop();
                    var minTop = parseInt($(repeatable).parents(".dialog_body").css("padding-top"), 10) + $(repeatable).parents(".dialog_body").children(".dialog_title").outerHeight();
                    if (offsetTop < minTop) {
                        offsetTop = minTop;
                    }
                    $menuDiv.css("position", "fixed");
                } else {
                    offsetLeft = repeatable.offsetLeft + repeatable.offsetWidth;
                    offsetTop = repeatable.offsetTop;
                }

                if (isRepeatSection === false) {
                    var tableElement = repeatable.parentNode.parentNode;
                    offsetLeft += tableElement.offsetLeft;
                    offsetTop += tableElement.offsetTop;
                }
            } else {
                offsetTop = repeatable.offsetTop + repeatable.offsetHeight;
                var menuBottom = $menuDiv.parent().offset().top + offsetTop + $menuDiv.outerHeight(),
                    screenBottom = $(document).scrollTop() + $(window).height();

                if ($$.params.mobileAutoView && isLastRow) {
                    offsetTop = repeatable.offsetTop - $menuDiv.outerHeight();
                } else {
                    if (menuBottom > screenBottom) {
                        if (menuBottom - screenBottom < $menuDiv.outerHeight()) {
                            offsetTop = repeatable.offsetTop + repeatable.offsetHeight - $menuDiv.outerHeight();
                        } else {
                            offsetTop = screenBottom - (menuBottom - offsetTop) - 2;
                        }
                    }
                }


                var $repeatable = $(repeatable);
                if ($repeatable.offset().left < 0 && ($repeatable.offset().left + $repeatable.width()) > $(window).width()) {
                    //重复节或行左右都超出屏幕，出现在屏幕中间
                    offsetLeft = ($(window).width() - $menuDiv.width()) / 2 - $repeatable.offset().left;
                } else {
                    if ($repeatable.offset().left < 0 || ($repeatable.offset().left + $repeatable.width()) > $(window).width()) {
                        if ($repeatable.offset().left < 0) {
                            //左边出屏幕，取屏幕左边缘到重复节或行右边缘的中间
                            offsetLeft = repeatable.offsetLeft - $repeatable.offset().left + ((repeatable.offsetWidth + $repeatable.offset().left) - menuWidth) / 2;
                        } else {
                            //右边出屏幕，取重复节或行左边缘到屏幕右边缘的中间
                            offsetLeft = repeatable.offsetLeft + (($(window).width() - $repeatable.offset().left) - menuWidth) / 2;
                        }
                    } else {
                        //出现在重复节或行的中间
                        offsetLeft = repeatable.offsetLeft + (repeatable.offsetWidth - menuWidth) / 2;
                    }
                    //如果菜单右边出了屏幕右边缘，那么贴着屏幕右边缘放
                    if (offsetLeft + $menuDiv.parent().offset().left + $menuDiv.outerWidth() > $(window).width()) {
                        offsetLeft = $(window).width() - $menuDiv.outerWidth() - $menuDiv.parent().offset().left;
                    }

                    //如果菜单出了屏幕左边缘，那么贴着屏幕左边缘放
                    if ($menuDiv.parent().offset().left < 0 && offsetLeft + $menuDiv.parent().offset().left < 0) {
                        offsetLeft = -$menuDiv.parent().offset().left;
                    }
                }
            }


            $menuDiv.css("left", offsetLeft).css("top", offsetTop);

            if (popupMenu.strategy !== undefined) {
                popupMenu.strategy.adjustShowPopupMenuPosition($menuDiv);
            }

            if ($$.MOBILE) {
                $menuDiv.slideDown(200);
            } else {
                $menuDiv.show();
            }
        },

        //设置重复表columnVisible
        setColumnVisible: function (index, visible) {
            if (this.repeatType !== repeatControl.REPEAT_TYPE_TABLE) return;
            var $table = $(this.repeatParentElement).children("table");
            if (visible) {
                $table.children("colgroup").children("col:nth-child(" + (index + 1) + ")").show();
                $table.children("tbody").children("tr").children("td:nth-child(" + (index + 1) + ")").show();
                $table.children("tr").children("td:nth-child(" + (index + 1) + ")").show();
            } else {
                $table.children("colgroup").children("col:nth-child(" + (index + 1) + ")").hide();
                $table.children("tbody").children("tr").children("td:nth-child(" + (index + 1) + ")").hide();
                $table.children("tr").children("td:nth-child(" + (index + 1) + ")").hide();
            }
            this.columnVisible[index] = visible;
        },

        //获取动态KEY，目的是以这个KEY来组织动态的数据结构，对于REPEAT CONTROL取this.groupName作为KEY
        getDynamicKeyName: function () {
            return this.groupName;
        },

        //获取在计算动态公式，样式，动作时候所需要的CONTEXT里，需要放的repeat control名字
        getDynamicContextControlName: function () {
            return this.groupName;
        },

        setDynamicStyle: function (render, fromInit) {
            this.dynamicProcessor.processDynamicStyle(this, render, undefined, undefined, fromInit);
        },

        doDynamicAction: function (render, fromInit) {
            this.dynamicProcessor.processDynamicAction(this, render, undefined, undefined, fromInit);
        },

        //返回控件所在行（定义为从这个控件向上找第一个tr或者第一个重复节的行或者第一个view）
        getRow: function () {
            var $repeat = $(this.repeatParentElement);
            return $repeat.parents("tr,.infoplus_repeatingSection,.infoplus_view").first();
        },

        setDynamicValue: function () {

        },

        setClass: function (className) {
            $(this.repeatParentElement).addClass(className);
        },

        removeClass: function (className) {
            $(this.repeatParentElement).removeClass(className);
            this.getRepeatChildren().removeClass(className);
        }

    };

    //全局变量，记录选中的重复表的一行，或者重复节中的一个节
    repeatControl.selectedRepeatRow = null;

    define("InfoPlus.Repeat.RepeatControl", repeatControl);

    var clearSelectedRow = function (row) {
        if (InfoPlus.Repeat.RepeatControl.selectedRepeatRow != null) {
            if (InfoPlus.Repeat.RepeatControl.selectedRepeatRow !== row || $$.MOBILE) {
                //清除选中状态
                var $selectedRepeatRow = $(InfoPlus.Repeat.RepeatControl.selectedRepeatRow);
                $selectedRepeatRow.removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SELECTED);

                //隐藏上次选中的重复节或者表（行）的菜单
                if ($selectedRepeatRow[0].popupMenu != null) {
                    $selectedRepeatRow[0].popupMenu.hideMenu();
                }
            }
        }
    };

    var selectRow = function (repeatCtrl, row, isRepeatSection, isLastRow) {
        $(row).addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SELECTED);

        //如果正在展示下拉的动画，就延时500毫秒再显示菜单
        if (!$(row).is(":animated")) {
            repeatCtrl.showPopupMenu(row, isRepeatSection, isLastRow);
        } else {
            setTimeout(function () {
                repeatCtrl.showPopupMenu(row, isRepeatSection, isLastRow);
            }, 500);
        }

        InfoPlus.Repeat.RepeatControl.selectedRepeatRow = row;
    };

    var repeatControlEvents = {

        /*
         onRepeatSectionMenuButtonClick: function () {
         $(this).addClass(InfoPlus.Repeat.RepeatControl.CLASS_MENUBUTTON_SELECTED);
         var repeatSection = $(this).parent()[0];
         $(repeatSection).addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_MENU_POPUPED);
         var repeatCtrl = $(repeatSection.repeatParentElement).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
         repeatCtrl.showPopupMenu(repeatSection, this, true);
         },
         */

        onRepeatSectionExpandButtonClick: function (withoutAnimate) {
            var $button = $(this),
                $repeatDiv = $($button.data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_DIV)),
                $repeatParentDiv = $($button.data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_SECTION_DIV));
            var expandRepeatSection = function () {
                $button.hide();
                $button.removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_EXPAND)
                    .addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_SHRINK)
                    .attr("title", $$.lt("repeatControl.shrink"));
                $repeatDiv.css("overflow-y", "");
                $repeatParentDiv.removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_SHRUNKEN);
                if (withoutAnimate === undefined) {
                    $repeatDiv.animate({ height: $button.data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_SECTION_EXPAND_HEIGHT) + "px" }, 500, function () {
                        $repeatDiv.css("height", "");
                        $button.show();
                    });
                } else {
                    $repeatDiv.css("height", "");
                    $button.show();
                }
            };

            var shrinkRepeatSection = function () {
                $button.hide();
                $button.data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_SECTION_EXPAND_HEIGHT, $repeatDiv.height());
                $repeatDiv.css("overflow-y", "hidden");
                $repeatParentDiv.addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_SHRUNKEN);
                $repeatDiv.animate({ height: InfoPlus.Repeat.RepeatControl.REPEAT_SECTION_SHRINK_HEIGHT + "px" }, 500, function () {
                    $button.removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_SHRINK)
                        .addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_EXPAND)
                        .attr("title", $$.lt("repeatControl.expand"))
                        .show();
                });
            };

            //hide all errors
            var $errors = $('.formError');
            if (withoutAnimate) {
                $errors.remove();
            } else {
                $errors.fadeTo("fast", 0.3, function () {
                    $(this).remove();
                });
            }


            if ($button.hasClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_EXPAND)) {
                expandRepeatSection();
            } else {
                shrinkRepeatSection();
            }
        },

        onRepeatSectionTouchStart: function (event) {
            if (this.popupMenu != null) {
                this.popupMenu.menuResetTimeout();
                clearSelectedRow(this);
                //不return false ,而只是停止事件冒泡，因为如果repeat里面有repeat，那么return false的话点击里面那个repeat的新增会没反应，同理也会影响其它一些控件（比如anchor,file等等）
                event.stopPropagation();
            }
        },

        onRepeatSectionTouchEnd: function (event) {
            if (this.popupMenu != null) {
                var repeatControl = $(this.repeatParentElement).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                //if (repeatControl.readOnly !== true) {
                selectRow(repeatControl, this, true);
                event.stopPropagation();
                //}
            }
        },

        onRepeatSectionMouseEnter: function () {
            //移动版用touchstart touchend替代mouseEnter
            if ($$.MOBILE) return false;

            if (this.popupMenu == null) return false;
            this.popupMenu.menuResetTimeout();
            clearSelectedRow(this);

            var repeatControl = $(this.repeatParentElement).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
            /*
             if (repeatControl.readOnly === true) {
             return false;
             }
             */
            selectRow(repeatControl, this, true);

            /*
             var $expandButton = $(this).children("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_EXPAND_BUTTON);
             if ($expandButton.length > 0) {
             $expandButton.removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_EXPAND_BUTTON_OPACITY);
             }
             */

            return false;
        },

        onRepeatSectionMouseLeave: function (event) {
            if (this.popupMenu == null) return false;
            //防止点了按钮，菜单出现后(此时会触发mouseleave事件)，选中状态消失
            /*
             if (this.popupMenu != null) {
             if (this.popupMenu.repeatSection == this && this.popupMenu.menuDiv.style.display != 'none') {
             return;
             }
             }
             */

            //为了防止点了下拉框后触发leave事件使下拉框消失
            /*
             if (document.all) {
             if (!event.toElement) {
             return;
             }
             } else {
             if (!event.relatedTarget) {
             return;
             }
             }
             */

            $(this).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SELECTED).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_MENU_POPUPED);
            //$(this).children("." + InfoPlus.Repeat.RepeatControl.CLASS_SECTION_BUTTON).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_MENUBUTTON_SELECTED).hide();
            //$(this.popupMenu.menuDiv).hide();

            if ($$.MOBILE && InfoPlus.Repeat.RepeatControl.selectedRepeatRow !== this) {
                return false;
            }

            //从本行离开时，选中上一层的重复节，显示菜单
            //移动版不用选中上一层
            var $repeatParentRow = $$.MOBILE ? null : $(this.repeatParentElement).parents("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION);

            if (this.popupMenu != null) {
                this.popupMenu.menuStartTimeout(this.popupMenu.menuTimeout, event.pageX, event.pageY, $repeatParentRow);
            }


            /*
             var $expandButton = $(this).children("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_EXPAND_BUTTON);
             if ($expandButton.length > 0) {
             $expandButton.addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_EXPAND_BUTTON_OPACITY);
             }
             */

        },

        onRepeatTableRowTouchStart: function (event) {
            if (this.popupMenu != null) {
                this.popupMenu.menuResetTimeout();
                clearSelectedRow(this);
                event.stopPropagation();
            }
        },

        onRepeatTableRowTouchEnd: function (event) {
            if (this.popupMenu != null) {
                var repeatControl = $($(this).parents("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_PARENT_ELEMENT)[0])
                    .data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                //if (repeatControl.readOnly !== true) {
                selectRow(repeatControl, this, false, $(this).next("tr").length === 0);
                event.stopPropagation();
                //}
            }
        },

        onRepeatTableRowMouseEnter: function () {
            //移动版用touchstart touchend替代mouseEnter
            if ($$.MOBILE) return false;

            if (this.popupMenu == null) return false;
            this.popupMenu.menuResetTimeout();
            clearSelectedRow(this);
            /*
             if (InfoPlus.Repeat.RepeatControl.selectedRepeatRow != null) {
             //清除选中状态
             var $selectedRepeatRow = $(InfoPlus.Repeat.RepeatControl.selectedRepeatRow);
             $selectedRepeatRow.removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SELECTED);

             //隐藏上次选中的重复节或者表（行）的菜单
             $selectedRepeatRow[0].popupMenu.hideMenu();

             //$selectedRepeatRow.children("." + InfoPlus.Repeat.RepeatControl.CLASS_SECTION_BUTTON).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_MENUBUTTON_SELECTED).hide();
             //$selectedRepeatRow.find("." + InfoPlus.Repeat.RepeatControl.CLASS_TABLE_BUTTON).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_MENUBUTTON_SELECTED).hide();
             }
             */
            //$(this).addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SELECTED);

            var repeatControl = $($(this).parents("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_PARENT_ELEMENT)[0])
                .data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
            /*
             if (repeatControl.readOnly === true) {
             return false;
             }
             */
            selectRow(repeatControl, this, false);

            /*
             if (repeatControl.readOnly === false) {
             repeatControl.showPopupMenu(this, false);
             }
             */

            //InfoPlus.Repeat.RepeatControl.selectedRepeatRow = this;
            return false;
        },

        onRepeatTableRowMouseLeave: function (event) {

            if (this.popupMenu == null) return false;
            //防止点了按钮，菜单出现后(此时会触发mouseout事件)，选中状态消失
            /*
             if (this.popupMenu != null) {
             if (this.popupMenu.repeatSection == this && this.popupMenu.menuDiv.style.display != 'none') {
             return;
             }
             }
             */
            $(this).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SELECTED).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_MENU_POPUPED);
            //$(this).find("." + InfoPlus.Repeat.RepeatControl.CLASS_TABLE_BUTTON).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_MENUBUTTON_SELECTED).hide();

            if ($$.MOBILE && InfoPlus.Repeat.RepeatControl.selectedRepeatRow !== this) {
                return false;
            }

            //从本行离开时，选中上一层的重复节，显示菜单
            var $repeatParentRow = $$.MOBILE ? null : $(this).parents("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION);
            if (this.popupMenu != null) {
                this.popupMenu.menuStartTimeout(this.popupMenu.menuTimeout, event.pageX, event.pageY, $repeatParentRow);
            }
        },

        /*
         onRepeatTableMenuButtonClick: function () {
         $(this).addClass(InfoPlus.Repeat.RepeatControl.CLASS_MENUBUTTON_SELECTED);
         var $repeatTableRow = $($(this).closest("tr")[0]);
         $repeatTableRow.addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_MENU_POPUPED);
         var repeatCtrl = $($repeatTableRow.parents("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_PARENT_ELEMENT)[0])
         .data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
         repeatCtrl.showPopupMenu($repeatTableRow[0], this, false);
         },
         */

        onAddLinkClick: function () {
            var repeatCtrl = $(this.repeatParentElement).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
            var popupMenu = repeatCtrl.popupMenu;
            if (popupMenu != null && repeatCtrl.readOnly === false) {
                popupMenu.repeatSection = null;
                popupMenu.onAddClick();
            }
            return false;
        },

        onMenuMouseLeave: function (event) {
            if ($$.MOBILE) return false;
            $(this).data("menu").menuStartTimeout($(this).data("menu").menuTimeout, event.pageX, event.pageY);
        },

        onMenuMouseEnter: function () {
            if ($$.MOBILE) return false;
            $(this).data("menu").menuResetTimeout();
        },

        onMenuItemMouseLeave: function () {
            if ($$.MOBILE) return false;
            if ($(this).data("menuType") !== InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_NO_ACTION) {
                $(this).removeClass("infoplus_repeatMenuOn");
            }
        },

        onMenuItemMouseEnter: function () {
            if ($$.MOBILE) return false;
            if ($(this).data("menuType") !== InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_NO_ACTION) {
                $(this).addClass("infoplus_repeatMenuOn");
                $(this).data("menu").menuResetTimeout();
            }
        },

        onMenuItemTouchStart: function (event) {
            event.stopPropagation();
        },

        onMenuItemTouchEnd: function (event) {
            var menu = $(this).data("menu");
            //移动版稍做延时，按菜单的动画效果出来后再让菜单消失
            setTimeout(function () {
                $(menu.menuDiv).hide();
            }, 100);


            $(menu.repeatSection).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SELECTED).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_MENU_POPUPED);

            switch ($(this).data("menuType")) {
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_MOVEUP:
                    menu.onMoveUpClick();
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_MOVEDOWN:
                    menu.onMoveDownClick();
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_ADD:
                    menu.onAddClick();
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_DELETE:
                    $IU.yesNoBox(
                        (menu.isRepeatSection() ? $$.lt("repeatControl.deleteSection") : $$.lt("repeatControl.deleteRow")), 300, function () {
                            menu.onDeleteClick();
                        });
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_NO_ACTION:
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_DETAIL:
                    menu.onDetailClick();
                    break;
            }
            event.stopPropagation();
        },

        onMenuItemClick: function () {
            if ($$.MOBILE) return false;
            var menu = $(this).data("menu");
            if ($$.MOBILE) {
                //移动版稍做延时，按菜单的动画效果出来后再让菜单消失
                setTimeout(function () {
                    $(menu.menuDiv).hide();
                }, 100);
            } else {
                $(menu.menuDiv).hide();
            }


            //$(menu.menuButton).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_MENUBUTTON_SELECTED).hide();
            $(menu.repeatSection).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SELECTED).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_MENU_POPUPED);
            /*
             if (menu.isRepeatSection()) {
             $(menu.repeatSection).children("." + InfoPlus.Repeat.RepeatControl.CLASS_SECTION_BUTTON).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_MENUBUTTON_SELECTED).hide();
             } else {
             $(menu.repeatSection).find("." + InfoPlus.Repeat.RepeatControl.CLASS_TABLE_BUTTON).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_MENUBUTTON_SELECTED).hide();
             }
             */
            switch ($(this).data("menuType")) {
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_MOVEUP:
                    menu.onMoveUpClick();
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_MOVEDOWN:
                    menu.onMoveDownClick();
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_ADD:
                    menu.onAddClick();
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_DELETE:
                    $IU.yesNoBox(
                        (menu.isRepeatSection() ? $$.lt("repeatControl.deleteSection") : $$.lt("repeatControl.deleteRow")), 300, function () {
                            menu.onDeleteClick();
                        });
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_NO_ACTION:
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_DETAIL:
                    menu.onDetailClick();
                    break;
            }
        }

    };


    repeatControlEvents.events = [
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION,
            type: "touchstart",
            handler: repeatControlEvents.onRepeatSectionTouchStart
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION,
            type: "touchend",
            handler: repeatControlEvents.onRepeatSectionTouchEnd
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION,
            type: "mouseenter",
            handler: repeatControlEvents.onRepeatSectionMouseEnter
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION,
            type: "mouseleave",
            handler: repeatControlEvents.onRepeatSectionMouseLeave
        },
        /*
         {
         selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_EXPAND_BUTTON,
         type: "click",
         handler: repeatControlEvents.onRepeatSectionExpandButtonClick
         },
         */
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW,
            type: "touchstart",
            handler: repeatControlEvents.onRepeatTableRowTouchStart
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW,
            type: "touchend",
            handler: repeatControlEvents.onRepeatTableRowTouchEnd
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW,
            type: "mouseenter",
            handler: repeatControlEvents.onRepeatTableRowMouseEnter
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW,
            type: "mouseleave",
            handler: repeatControlEvents.onRepeatTableRowMouseLeave
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_ADD_LINK,
            type: "click",
            handler: repeatControlEvents.onAddLinkClick
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_POPUP_MENU,
            type: "mouseenter",
            handler: repeatControlEvents.onMenuMouseEnter
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_POPUP_MENU,
            type: "mouseleave",
            handler: repeatControlEvents.onMenuMouseLeave
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_MENU_ITEM,
            type: "mouseenter",
            handler: repeatControlEvents.onMenuItemMouseEnter
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_MENU_ITEM,
            type: "mouseleave",
            handler: repeatControlEvents.onMenuItemMouseLeave
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_MENU_ITEM,
            type: "click",
            handler: repeatControlEvents.onMenuItemClick
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_MENU_ITEM,
            type: "touchstart",
            handler: repeatControlEvents.onMenuItemTouchStart
        },
        {
            selector: "." + InfoPlus.Repeat.RepeatControl.CLASS_MENU_ITEM,
            type: "touchend",
            handler: repeatControlEvents.onMenuItemTouchEnd
        }
    ];


    define("InfoPlus.Repeat.RepeatControl.Events", repeatControlEvents);

})(window);

﻿/**
 * RepeatPower
 * @Author yech
 * @Since 2011/07/20
 */
(function (window, undefined) {

    var repeatPower = function (groupInformation) {
        if (groupInformation == null || groupInformation.permission == null) {
            this.readPower = false;
            this.enforceReadPower = false;
            this.writePower = false;
            this.insertPower = false;
            this.deletePower = false;
        } else {
            var permission = (groupInformation.permission || "");
            this.readPower = (permission.indexOf("r") !== -1);
            this.enforceReadPower = (permission.indexOf("R") !== -1);
            this.writePower = (permission.indexOf("w") !== -1);
            this.insertPower = (permission.indexOf("i") !== -1);
            this.deletePower = (permission.indexOf("d") !== -1);
        }
    };


    repeatPower.prototype = {
        readPower: false,           //读权限
        enforceReadPower: false,    //强制读权限，配合动态并行
        writePower: false,          //写权限，现在用于标志是否可以数据改位置
        insertPower: false,         //增权限
        deletePower: false          //删权限
    };


    define("InfoPlus.Repeat.RepeatPower", repeatPower);

})(window);
﻿/**
 * RepeatAddLink
 * @Author yech
 * @Since 2011/07/06
 */

(function (window, undefined) {

    var repeatAddLink = function (repeatParentElement, offsetLeft, linkText) {
        this.repeatParentElement = repeatParentElement;
        if (linkText === "Insert item" || linkText === "插入项") {
            linkText = $$.lt("repeatAddLink.addText");
        }
        this.createLinkDiv(offsetLeft, linkText);
    };

    repeatAddLink.prototype = {
        repeatParentElement: null,
        linkDiv: null,

        createLinkDiv: function (offsetLeft, linkText) {
            var child = document.createElement("a");
            child.className = InfoPlus.Repeat.RepeatControl.CLASS_ADD_LINK;
            child.href = "javascript:void(0);";
            child.innerHTML = (linkText == null ? $$.lt("repeatAddLink.addText") : linkText);
            $(child).css("text-align", "left");
            child.repeatParentElement = this.repeatParentElement;
            var div = document.createElement("div");
            $(div).css("display", "none")
                .css("left", offsetLeft + "px")
                .addClass(InfoPlus.Repeat.RepeatControl.CLASS_ADD_LINK_DIV);

            div.appendChild(child);
            this.linkDiv = div;

            var container = document.createElement("div");
            $(container).addClass(InfoPlus.Repeat.RepeatControl.CLASS_ADD_LINK_CONTAINER_DIV).append(this.linkDiv);
            this.repeatParentElement.appendChild(container);

        },

        showLink: function () {
            $(this.linkDiv).show();
        },

        hideLink: function () {
            $(this.linkDiv).hide();
        }
    };

    define("InfoPlus.Repeat.RepeatAddLink", repeatAddLink);

})(window);
﻿/**
 * PopupMenu
 * @Author yech
 * @Since 2011/06/17
 */

(function (window, undefined) {

    var popupMenu = function (repeatControl) {
        this.repeatControl = repeatControl;
        this.render = repeatControl.formRender;
        this.repeatParentElement = repeatControl.repeatParentElement;
        this.createMenuDiv();
        this.strategy = new InfoPlus.Repeat.PopupMenu.Strategy();
    };


    popupMenu.MENU_ITEM_TYPE_MOVEUP = 0;
    popupMenu.MENU_ITEM_TYPE_MOVEDOWN = 1;
    popupMenu.MENU_ITEM_TYPE_ADD = 2;
    popupMenu.MENU_ITEM_TYPE_DELETE = 3;
    popupMenu.MENU_ITEM_TYPE_NO_ACTION = 4;
    popupMenu.MENU_ITEM_TYPE_DETAIL = 5;

    popupMenu.prototype = {
        menuDiv: null,
        menuButton: null,
        repeatParentElement: null,
        repeatSection: null,
        render: null,
        hideMenuTimer: null,
        menuTimeout: 200,
        menuItemMoveUp: null,
        menuItemMoveDown: null,
        menuItemAdd: null,
        menuItemDelete: null,
        menuItemNoAction: null,
        allMenuItemHide: false,

        menuOverMenuItem: function () {
            this.menuResetTimeout();
        },

        menuStartTimeout: function (hideTimeout, x, y, $repeatParentRow) {
            this.menuResetTimeout();
            //InfoPlus.Repeat.RepeatControl.hideMenuTimer = setTimeout($.proxy(this.hideMenuWithMousePosition, this, x, y, $repeatParentRow), hideTimeout);
            this.hideMenuTimer = setTimeout($.proxy(this.hideMenuWithMousePosition, this, x, y, $repeatParentRow), hideTimeout);
        },

        menuResetTimeout: function () {
            /*
             if (InfoPlus.Repeat.RepeatControl.hideMenuTimer) clearTimeout(InfoPlus.Repeat.RepeatControl.hideMenuTimer);
             InfoPlus.Repeat.RepeatControl.hideMenuTimer = null;
             */

            if (this.hideMenuTimer != null) clearTimeout(this.hideMenuTimer);
            this.hideMenuTimer = null;
        },

        createMenuDiv: function () {
            var menuDiv = document.createElement("ul");
            menuDiv.id = "" + Math.round(Math.random() * 100000);
            this.menuDiv = menuDiv;
            //menuDiv.menu = this;
            $(menuDiv).data("menu", this);
            menuDiv.style.display = "none";
            $(menuDiv).addClass(InfoPlus.Repeat.RepeatControl.CLASS_POPUP_MENU);
            this.menuItemDetail = this.createMenuItem(InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_DETAIL);
            this.menuItemMoveUp = this.createMenuItem(InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_MOVEUP);
            this.menuItemMoveDown = this.createMenuItem(InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_MOVEDOWN);
            this.menuItemAdd = this.createMenuItem(InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_ADD);
            this.menuItemDelete = this.createMenuItem(InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_DELETE);
            //this.menuItemNoAction = this.createMenuItem(InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_NO_ACTION);

            this.repeatParentElement.appendChild(this.menuDiv);
        },

        createMenuItem: function (menuItemType) {
            var menuItemDiv = document.createElement("li");
            $(menuItemDiv).addClass(InfoPlus.Repeat.RepeatControl.CLASS_MENU_ITEM);
            //menuItemDiv.menu = this;
            //menuItemDiv.menuType = menuItemType;
            $(menuItemDiv).data("menu", this).data("menuType", menuItemType);

            switch (menuItemType) {
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_MOVEUP:
                    $(menuItemDiv).text($$.lt("popupMenu.up"));
                    $(menuItemDiv).addClass("infoplus_menuUp");
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_MOVEDOWN:
                    $(menuItemDiv).text($$.lt("popupMenu.down"));
                    $(menuItemDiv).addClass("infoplus_menuDown");
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_ADD:
                    $(menuItemDiv).text($$.lt("popupMenu.add"));
                    $(menuItemDiv).addClass("infoplus_menuAdd");
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_DELETE:
                    $(menuItemDiv).text($$.lt("popupMenu.deleteText"));
                    $(menuItemDiv).addClass("infoplus_menuDelete");
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_NO_ACTION:
                    $(menuItemDiv).text($$.lt("popupMenu.noAction"));
                    $(menuItemDiv).addClass("infoplus_menuNoAction");
                    break;
                case InfoPlus.Repeat.PopupMenu.MENU_ITEM_TYPE_DETAIL:
                    $(menuItemDiv).text($$.lt("popupMenu.detail"));
                    $(menuItemDiv).addClass("infoplus_menuDetail");
                    break;
            }

            this.menuDiv.appendChild(menuItemDiv);

            return menuItemDiv;

        },

        hideMenuWithMousePosition: function (x, y, $repeatParentRow) {
            //debug("hide menu with x:" + x + ",y:" + y);
            if (this.repeatSection != null) {
                var $section = $(this.repeatSection);
                $section.removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_MENU_POPUPED);
                var pos = $IU.getElementPosition(this.repeatSection);
                //if the mouse point is still in the rect area of the repeat section(or repeat table row),keep this section(or repeat table row) and its menubutton selected
                if (!(x >= pos.left && x <= pos.left + this.repeatSection.scrollWidth && y >= pos.top && y <= pos.top + this.repeatSection.scrollHeight)) {
                    $section.removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SELECTED);
                    if (this.isRepeatSection()) {
                        //$section.children("." + InfoPlus.Repeat.RepeatControl.CLASS_SECTION_BUTTON).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_MENUBUTTON_SELECTED).hide();
                        //$section.children("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_EXPAND_BUTTON).addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION_EXPAND_BUTTON_OPACITY);
                    } else {
                        //$section.find("." + InfoPlus.Repeat.RepeatControl.CLASS_TABLE_BUTTON).removeClass(InfoPlus.Repeat.RepeatControl.CLASS_MENUBUTTON_SELECTED).hide();
                    }
                }
            }
            this.hideMenu();
            if ($repeatParentRow != null && $repeatParentRow.length > 0) {
                var repeatControl = $($repeatParentRow[0].repeatParentElement).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                //if (repeatControl.readOnly === false) {
                repeatControl.showPopupMenu($repeatParentRow[0], true);
                InfoPlus.Repeat.RepeatControl.selectedRepeatRow = $repeatParentRow[0];
                $($repeatParentRow[0]).addClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SELECTED);
                //}
            }
        },

        hideMenu: function () {
            $(this.menuDiv).hide();
            //this.repeatSection = null;
        },

        shouldShowDetailMenu: function () {
            if (this.repeatSection == null) return false;
            if (this.isRepeatSection()) return false;
            if (this.repeatControl.power.readPower === false) return false;
            return this.repeatControl.groupInformation.isMasterDetail === true;
        },

        shouldShowMoveUpMenu: function () {
            if (this.repeatSection == null) return false;
            //动态readOnly，不显示新增、删除、上下移
            if (this.repeatControl.readOnly === true) return false;
            if (this.repeatControl.power.writePower === false) return false;
            if (this.isRepeatSection()) {
                return $(this.repeatSection).prev("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION).length !== 0;
            } else {
                return $(this.repeatSection).prev("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW).length !== 0;
            }
        },

        shouldShowMoveDownMenu: function () {
            if (this.repeatSection == null) return false;
            //动态readOnly，不显示新增、删除、上下移
            if (this.repeatControl.readOnly === true) return false;
            if (this.repeatControl.power.writePower === false) return false;
            if (this.isRepeatSection()) {
                return $(this.repeatSection).next("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_SECTION).length !== 0;
            } else {
                return $(this.repeatSection).next("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW).length !== 0;
            }
        },

        shouldShowAddMenu: function () {
            if (this.repeatSection == null) return false;
            //动态readOnly，不显示新增、删除、上下移
            if (this.repeatControl.readOnly === true) return false;
            return this.repeatControl.power.insertPower;
        },

        shouldShowDeleteMenu: function () {
            if (this.repeatSection == null) return false;
            //动态readOnly，不显示新增、删除、上下移
            if (this.repeatControl.readOnly === true) return false;
            //如果是readOnly的，那么不能删除
            if ($(this.repeatSection).data("isReadOnly") === true) return false;
            //如果是此次操作新增的重复节或表，那么一定可以删除，不用判权限
            if ($(this.repeatSection).data("isAdded") !== undefined) {
                if ($(this.repeatSection).data("isAdded") === true) return true;
            }
            return this.repeatControl.power.deletePower;
        },

        adjustMenuItemVisibility: function () {
            var allHide = true;
            var adjustVisibility = function (menu, isShow) {
                if (isShow) {
                    $(menu).show();
                    allHide = false;
                } else {
                    $(menu).hide();
                }
            };

            adjustVisibility(this.menuItemDetail, this.shouldShowDetailMenu());
            adjustVisibility(this.menuItemMoveUp, this.shouldShowMoveUpMenu());
            adjustVisibility(this.menuItemMoveDown, this.shouldShowMoveDownMenu());
            adjustVisibility(this.menuItemAdd, this.shouldShowAddMenu());
            adjustVisibility(this.menuItemDelete, this.shouldShowDeleteMenu());

            this.allMenuItemHide = allHide;
        },

        //获取该重复节或重复表中的一行的所有可以onFieldRefer的控件fieldName数组
        getRepeatControlFieldNames: function (repeat) {
            var repeatControls = [];
            $(repeat).find("." + $Control.CLASSNAME_CONTROL).each(function () {
                var control = $(this).data($Control.DATA_CONTROL_OBJECT);
                if (control == null || control.field === undefined || control.element === undefined) return;
                if (control.onFieldRefer) {
                    repeatControls.push(control.field.name);
                }
            });
            return repeatControls;
        },

        onDetailClick: function () {
            this.repeatControl.showDetail(this.repeatSection);
        },

        onMoveUpClick: function () {
            this.repeatControl.moveUpRepeatSection(this.repeatSection);
        },

        onMoveDownClick: function () {
            this.repeatControl.moveDownRepeatSection(this.repeatSection);
        },

        onAddClick: function () {
            var repeatControl = this.repeatControl;
            if (repeatControl.groupInformation != null) {
                if (repeatControl.groupInformation.maxOccur > 0) {
                    if (repeatControl.getRepeatChildren().length >= repeatControl.groupInformation.maxOccur) {
                        $IU.messageBox(null, $$.lt("popupMenu.maxLimit"), null, 300);
                        return false;
                    }
                }
            }
            repeatControl.addRepeat(null, null, true, true, true, true);
        },

        onDeleteClick: function () {
            var repeatControl = this.repeatControl;
            if (repeatControl.groupInformation != null) {
                if (repeatControl.groupInformation.minOccur > 0) {
                    if (repeatControl.getRepeatChildren().length <= repeatControl.groupInformation.minOccur) {
                        $IU.messageBox(null, $$.lt("popupMenu.minLimit"), null, 300);
                        return false;
                    }
                }
            }
            this.repeatControl.deleteRepeat(this.repeatSection, true);
        },


        isRepeatSection: function () {
            return this.repeatControl.isRepeatSection();
        },

        isRepeatTable: function () {
            return this.repeatControl.isRepeatTable();
        }

    };

    define("InfoPlus.Repeat.PopupMenu", popupMenu);


    var strategy = function () {
    };

    strategy.prototype = {

        //调整显示菜单的位置
        adjustShowPopupMenuPosition: function ($menuDiv) {
        }

    };


    define("InfoPlus.Repeat.PopupMenu.Strategy", strategy);

})(window);
﻿/**
 * TableSorter
 * @Author yech
 * @Since 2011/07/11
 */

(function (window, undefined) {

    var tableSorter = function (repeatControl) {
        var instance = this;
        this.repeatTableBody = repeatControl.repeatTableBody;
        this.repeatControl = repeatControl;
        this.needReorganize = repeatControl.power.writePower === true || repeatControl.power.insertPower === true || repeatControl.power.deletePower === true;

        //没有写权限，就不让任何栏位排序了
        if (repeatControl.power.writePower === true) {
            var $headers = $(this.repeatTableBody).children(".infoplus_repeatingTableHeader");
            if ($headers.length > 0) {
                $IU.analysisTable($($headers[0]));

                for (var headerIndex = 0, len = $headers.length; headerIndex < len; headerIndex++) {
                    var header = $headers[headerIndex],
                        headRowCells = header.cells;
                    for (var i = 0; i < headRowCells.length; i++) {
                        var cell = headRowCells[i],
                            $cell = $(cell),
                            sortIndex = $cell.data("rawTdIndex");
                        this.sortType[sortIndex] = InfoPlus.Repeat.TableSorter.SORT_TYPE_NONE;

                        if ($cell.attr("colspan") == null) {
                            $cell.addClass("infoplus_table_sort").click(function (event) {
                                //不是只读才排序
                                if (!repeatControl.readOnly) {
                                    //如果是表头控件点击而传递过来的点击事件不用处理，不需要排序
                                    var $srcElement = $(event.srcElement);
                                    if ($srcElement.data($Control.DATA_CONTROL_OBJECT) == null) {
                                        instance.onHeaderClick($(this).data("rawTdIndex"));
                                    }
                                }
                            });
                        } else {
                            $cell.removeData("rawTdIndex");
                        }
                    }

                }
            }
        }
    };

    tableSorter.SORT_TYPE_NONE = 0;
    tableSorter.SORT_TYPE_ASC = 1;
    tableSorter.SORT_TYPE_DESC = 2;

    tableSorter.prototype = {

        repeatTableBody: null,
        sortType: {},
        render: null,
        needReorganize: false,

        sortColumn: function (columnIndex, sortType) {
            var columnCount = this.repeatTableBody.rows[0].cells.length;
            if (columnIndex >= columnCount) return;
            if (sortType === InfoPlus.Repeat.TableSorter.SORT_TYPE_DESC) {
                this.sortType[columnIndex] = InfoPlus.Repeat.TableSorter.SORT_TYPE_ASC;
            } else {
                this.sortType[columnIndex] = InfoPlus.Repeat.TableSorter.SORT_TYPE_DESC;
            }
            this.onHeaderClick(columnIndex);
        },

        onHeaderClick: function (columnIndex) {
            var getControlValue = function (sourceControls) {
                if (sourceControls.length === 0) return '';
                var firstControl = sourceControls[0];
                var controlType = $(firstControl).data($Control.DATA_CONTROL_TYPE);
                var control = $(firstControl).data($Control.DATA_CONTROL_OBJECT);
                if (controlType === $Control.CONTROL_TYPE_RADIO) {
                    var value = '';
                    var checkedRadio = $(sourceControls).filter("[name='" + firstControl.name + "']:checked");
                    if (checkedRadio.length > 0) {
                        value = $(checkedRadio[0]).val();
                    }
                    return value;
                }
                return control.getSortValue();
            };
            var isNumberControl = function (judgeControls) {
                if (judgeControls.length === 0) return false;
                var firstControl = judgeControls[0];
                var control = $(firstControl).data($Control.DATA_CONTROL_OBJECT);
                if (control == null) return false;
                var type = control.field.type;
                return (type === $Control.DATA_TYPE_BOOL || type === $Control.DATA_TYPE_INT || type === $Control.DATA_TYPE_DOUBLE || type === $Control.DATA_TYPE_DATE);
            };
            var $rows = $(this.repeatTableBody).children(".infoplus_repeatingTableRow");
            var rowsCount = $rows.length;
            var sortArray = new InfoPlus.QuickSortArray();
            var sortByNumber = false;
            for (var rowIndex = 0; rowIndex < rowsCount; rowIndex++) {
                var cell = $rows[rowIndex].cells[columnIndex];
                var controls = $(cell).find("*").filter($IU.isControlFilter);
                if (rowIndex === 1) {
                    sortByNumber = isNumberControl(controls);
                }
                sortArray.push({oldIndex: rowIndex, value: getControlValue(controls)});
            }
            if (this.sortType[columnIndex] === InfoPlus.Repeat.TableSorter.SORT_TYPE_NONE || this.sortType[columnIndex] === InfoPlus.Repeat.TableSorter.SORT_TYPE_DESC) {
                if (sortByNumber) {
                    sortArray.numberQuickSort();
                } else {
                    sortArray.sort(function (a, b) {
                        return $IU.localeCompare(a.value, b.value);
                        //return a.value.localeCompare(b.value);
                    });
                }
                this.sortType[columnIndex] = InfoPlus.Repeat.TableSorter.SORT_TYPE_ASC;
            } else {
                if (sortByNumber) {
                    sortArray.numberQuickSort();
                    sortArray.reverse();
                } else {
                    sortArray.sort(function (a, b) {
                        return -$IU.localeCompare(a.value, b.value);
                        //return -(a.value.localeCompare(b.value));
                    });
                }
                this.sortType[columnIndex] = InfoPlus.Repeat.TableSorter.SORT_TYPE_DESC;
            }

            var newRowsArray = [];
            for (var i = 0; i < rowsCount - 1; i++) {
                newRowsArray.push($rows[sortArray[i].oldIndex]);
            }

            var currentRow = $($rows[0]).prev();
            for (i = 0; i < newRowsArray.length; i++) {
                $(currentRow).after($(newRowsArray[i]));
                currentRow = newRowsArray[i];
            }

            if (this.needReorganize) {
                this.repeatControl.reorganizeRepeatableElement(true);
            } else {
                this.repeatControl.updateRepeatParentElementKeyIndex();
            }


            var $headers = $(this.repeatTableBody).children(".infoplus_repeatingTableHeader");
            for (i = 0; i < $headers.length; i++) {
                var header = $headers[i],
                    cells = header.cells;
                for (var cellIndex = 0; cellIndex < cells.length; cellIndex++) {
                    var $cell = $(cells[cellIndex]);
                    if ($cell.data("rawTdIndex") != null) {
                        if ($cell.data("rawTdIndex") === columnIndex) {
                            if (this.sortType[columnIndex] === InfoPlus.Repeat.TableSorter.SORT_TYPE_ASC) {
                                $cell.removeClass("infoplus_table_sort_desc");
                                $cell.addClass("infoplus_table_sort_asc");
                            } else {
                                $cell.removeClass("infoplus_table_sort_asc");
                                $cell.addClass("infoplus_table_sort_desc");
                            }
                        } else {
                            $cell.removeClass("infoplus_table_sort_desc");
                            $cell.removeClass("infoplus_table_sort_asc");
                        }
                    }
                }
            }
        }
    };

    define("InfoPlus.Repeat.TableSorter", tableSorter);

})(window);
/*
 * Params 函数参数
 * @Author yech
 * @Since 2020/03/30
 */
(function (window, undefined) {

    var parameters = function (params) {
        this.params = params;
    };

    parameters.prototype = {};

    define("InfoPlus.Dynamics.Params", parameters);

})(window);

/**
 * 这个文件里的函数用于动态公式
 */


(function (window, undefined) {

    var renderTools = {};

    renderTools.toFixed = function (number, fix) {
        var pr = parseInt(fix, 10);
        if (isNaN(pr)) {
            pr = 0;
        }
        var power = pr > 0 ? Math.pow(10, pr) : 1;
        return Math.round(number * power) / power;
    };


    renderTools._add = function (arg1, arg2) {
        var r1, r2, m;
        try {
            r1 = arg1.toString().split(".")[1].length;
        } catch (e) {
            r1 = 0;
        }
        try {
            r2 = arg2.toString().split(".")[1].length;
        } catch (e) {
            r2 = 0;
        }
        m = Math.pow(10, Math.max(r1, r2));
        return (arg1 * m + arg2 * m) / m;
    };

    renderTools._sum = function (value) {
        if ($IU.isNumberExactly(value)) {
            return { value: value, count: 1 };
        } else {
            if ($IU.isArray(value)) {
                var sum = 0,
                    count = 0,
                    len = value.length;
                for (var i = 0; i < len; i++) {
                    var s = InfoPlus.Dynamics.Functions._sum(value[i]);
                    sum = InfoPlus.Dynamics.Functions._add(sum, s.value);
                    count += s.count;
                }
                return { value: sum, count: count };
            } else {
                //It's Code Object
                if (value != null && value.hasOwnProperty('value')) {
                    value = value.value;
                }
                var parseValue = parseFloat(value);
                if (!isNaN(parseValue)) {
                    return { value: parseValue, count: 1 };
                }
            }
        }
        return { value: 0, count: 0 };
    };

    renderTools._sumByCondition = function (value, condition) {
        if ($IU.isNumberExactly(value)) {
            if (condition === undefined || condition === true) {
                return { value: value, count: 1 };
            }
        } else {
            if ($IU.isArray(value)) {
                var sum = 0,
                    count = 0,
                    len = value.length;
                for (var i = 0; i < len; i++) {
                    var s;
                    if (condition[i] === undefined) {
                        s = InfoPlus.Dynamics.Functions._sum(value[i]);
                    } else {
                        s = InfoPlus.Dynamics.Functions._sumByCondition(value[i], condition[i]);
                    }
                    sum = InfoPlus.Dynamics.Functions._add(sum, s.value);
                    count += s.count;
                }
                return { value: sum, count: count };
            } else {
                if (condition === undefined || condition === true) {
                    //It's Code Object
                    if (value != null && value.hasOwnProperty('value')) {
                        value = value.value;
                    }
                    var parseValue = parseFloat(value);
                    if (!isNaN(parseValue)) {
                        return { value: parseValue, count: 1 };
                    }
                }
            }
        }
        return { value: 0, count: 0 };
    };

    renderTools.sum = function (value, condition) {
        if (condition === undefined) {
            return InfoPlus.Dynamics.Functions._sum(value).value;
        } else {
            return InfoPlus.Dynamics.Functions._sumByCondition(value, condition).value;
        }
    };

    renderTools.avg = function (value, condition) {
        var sum;
        if (condition === undefined) {
            sum = InfoPlus.Dynamics.Functions._sum(value);
        } else {
            sum = InfoPlus.Dynamics.Functions._sumByCondition(value, condition);
        }

        if (sum.count === 0) return 0;
        return (sum.value / sum.count);
    };


    var _concat = function (value, gapString, property) {
        gapString = gapString || '';
        if (value == null) {
            return undefined;
        }
        if ($IU.isString(value)) {
            return value;
        }
        if ($IU.isBoolean(value)) {
            return (value === true) ? '1' : '0';
        }
        if ($IU.isNumberExactly(value)) {
            return value + '';
        }
        if (property !== undefined && value.hasOwnProperty(property)) {
            return value[property];
        }
        if ($IU.isArray(value)) {
            var result = "",
                len = value.length;
            for (var i = 0; i < len; i++) {
                var s = _concat(value[i], gapString, property);
                if (s !== undefined) {
                    result = result + s + ((i !== len - 1) ? gapString : '');
                }
            }
            return result;
        }

        return '';
    };

    renderTools.concat = function (value, gapString, property) {
        return _concat(value, gapString, property);
    };

    renderTools.reduce = function (value, repeat, gapString) {
        if ($IU.isNumberExactly(repeat) && $IU.isInt(repeat) && repeat > 1) {
            var valueArray = [];
            if ($IU.isArray(value)) {
                for (var i = 0, len = value.length; i < len; i++) {
                    var index = 0;
                    while (index++ < repeat) {
                        valueArray.push(value[i]);
                    }
                }
            } else {
                index = 0;
                while (index++ < repeat) {
                    valueArray.push(value);
                }
            }
            return _concat(valueArray, gapString);
        } else {
            return _concat(value, gapString);
        }

    };

    renderTools._length = function (value) {
        if (value == null) {
            return 0;
        }

        if ($IU.isString(value)) {
            return value.length;
        }

        if ($IU.isArray(value)) {
            var result = [],
                len = value.length;
            for (var i = 0; i < len; i++) {
                result[i] = InfoPlus.Dynamics.Functions._length(value[i]);
            }
            return result;
        }

        return 0;

    };

    renderTools.length = function (value) {
        return InfoPlus.Dynamics.Functions._length(value);
    };

    renderTools._countByCondition = function (value, condition) {
        if ($IU.isArray(value)) {
            var len = value.length,
                count = 0;
            for (var i = 0; i < len; i++) {
                if (condition[i] === undefined) {
                    count += InfoPlus.Dynamics.Functions._count(value[i]);
                } else {
                    count += InfoPlus.Dynamics.Functions._countByCondition(value[i], condition[i]);
                }
            }
            return count;
        } else {
            if (condition === undefined || condition === true) {
                return (value !== undefined) ? 1 : 0;
            }
        }
    };

    renderTools._count = function (value) {
        if ($IU.isArray(value)) {
            var len = value.length,
                count = 0;
            for (var i = 0; i < len; i++) {
                count += InfoPlus.Dynamics.Functions._count(value[i]);
            }
            return count;
        } else {
            return (value !== undefined) ? 1 : 0;
        }
    };

    renderTools.count = function (value, condition) {
        if (condition === undefined) {
            return InfoPlus.Dynamics.Functions._count(value);
        } else {
            return InfoPlus.Dynamics.Functions._countByCondition(value, condition);
        }
    };

    //计算dateFrom和dateTo之间的天数
    renderTools.dateSpan = function (dateFrom, dateTo) {
        if (dateFrom === "" || dateTo === "") return "";
        return parseInt(Math.abs(dateTo - dateFrom) / (60 * 60 * 24), 10) + 1;
    };

    //根据身份证号获取生日
    renderTools.getBirthday = function (id) {
        if (id === undefined || id === null) return null;
        if (!$IU.isString(id)) return null;
        if (id.length !== 15 && id.length !== 18) return null;
        var year, month, day;
        if (id.length === 15) {
            for (var i = 6; i <= 13; i++) {
                if (isNaN(parseInt(id.charAt(i), 10))) return null;
            }
            var y = parseInt(id.substr(6, 2), 10);
            if (y < 20) {
                year = 2000 + y;
            } else {
                year = 1900 + y;
            }
            month = parseInt(id.substr(8, 2), 10);
            if (!(month >= 1 && month <= 12)) return null;
            day = parseInt(id.substr(10, 2), 10);
            if (!(day >= 1 && day <= 31)) return null;
            return (new Date(year, month - 1, day)).getTime() / 1000;
        } else {
            for (i = 6; i <= 15; i++) {
                if (isNaN(parseInt(id.charAt(i), 10))) return null;
            }
            year = parseInt(id.substr(6, 4), 10);
            if (year < 1900 || year > 2100) return null;
            month = parseInt(id.substr(10, 2), 10);
            if (!(month >= 1 && month <= 12)) return null;
            day = parseInt(id.substr(12, 2), 10);
            if (!(day >= 1 && day <= 31)) return null;
            return (new Date(year, month - 1, day)).getTime() / 1000;
        }
    };


    renderTools.chineseAmount = function (num) {
        ///<summery>小写金额转化大写金额</summery>
        ///<param name=num type=number>金额</param>
        if (isNaN(num)) return "无效数值！";
        var strPrefix = "";
        if (num < 0) strPrefix = "(负)";
        num = Math.abs(num);
        if (num >= 1000000000000) return "无效数值！";
        var strOutput = "";
        var strUnit = '仟佰拾亿仟佰拾万仟佰拾元角分';
        var strCapDgt = '零壹贰叁肆伍陆柒捌玖';
        num += "00";
        var intPos = num.indexOf('.');
        if (intPos >= 0) {
            num = num.substring(0, intPos) + num.substr(intPos + 1, 2);
        }
        strUnit = strUnit.substr(strUnit.length - num.length);
        for (var i = 0; i < num.length; i++) {
            strOutput += strCapDgt.substr(num.substr(i, 1), 1) + strUnit.substr(i, 1);
        }
        return strPrefix + strOutput.replace(/零角零分$/, '整').replace(/零[仟佰拾]/g, '零').replace(/零{2,}/g, '零').replace(/零([亿|万])/g, '$1').replace(/零+元/, '元').replace(/亿零{0,3}万/, '亿').replace(/^元/, "零元");
    };

    //对uri进行编码，封装encodeURI
    renderTools.encodeURI = function (uri) {
        return encodeURI(uri);
    };

    //对uri进行编码，encodeURIComponent
    renderTools.encodeURIComponent = function (uri) {
        return encodeURIComponent(uri);
    };

    //判断一个字符串是否以prefix开头
    renderTools.startWith = function (str, prefix) {
        if (str == null || prefix == null) {
            return false;
        }
        return str.slice(0, prefix.length) === prefix;
    };

    //判断一个字符串是否以suffix结尾
    renderTools.endWith = function (str, suffix) {
        if (str == null || suffix == null) {
            return false;
        }
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    };

    //将函数参数包装起来，可以传递到动态方法里（用于解决目前动态方法只能有一个参数的问题）
    renderTools.params = function () {
        return new InfoPlus.Dynamics.Params(arguments);
    };

    renderTools.isNaN = isNaN;

    renderTools.parseInt = parseInt;

    renderTools.parseFloat = parseFloat;

    //所有Math对象的函数
    //Standard ECMA-262 3rd Edition
    var mathFunctionNames = ['abs', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos', 'exp', 'floor', 'log', 'max', 'min', 'pow', 'random', 'round', 'sin', 'sqrt', 'tan'];
    for (var i = 0, len = mathFunctionNames.length; i < len; i++) {
        var name = mathFunctionNames[i];
        if (typeof Math[name] === 'function') {
            renderTools[name] = Math[name];
        }
    }

    define("InfoPlus.Dynamics.Functions", renderTools);

})(window);

﻿/**
 * 工具类
 * @Author Du Jinbo
 * @Since 2010/10/11
 */
(function (window, undefined) {

    var utilities = {};

    utilities.DIALOG_ID = "_ID_INFOPLUS_MESSAGE_" + Math.round(Math.random() * 1000);

    //是否是对象类型
    utilities.isObject = function (obj) {
        return Object.prototype.toString.call(obj) === '[object Object]';
    };

    //是否是数组类型
    utilities.isArray = function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
    };

    //是否是日期类型
    utilities.isDate = function (obj) {
        return Object.prototype.toString.call(obj) === '[object Date]';
    };

    //是否是字符串类型
    utilities.isString = function (obj) {
        return Object.prototype.toString.call(obj) === '[object String]';
    };

    //是否是布尔类型
    utilities.isBoolean = function (obj) {
        return obj === true || obj === false || Object.prototype.toString.call(obj) === '[object Boolean]';
    };

    //精确判断是否是Number类型
    utilities.isNumberExactly = function (val) {
        return Object.prototype.toString.call(val) === '[object Number]';
    };

    //判读是否是int，可以是int类型，也可以是string类型，但内容可以转换成一个整数
    utilities.isInt = function (val) {
        return !isNaN(parseInt(val));
    };

    //判读是否是正整数，可以是int类型，也可以是string类型，但内容可以转换成一个整数
    utilities.isPositiveInt = function (val) {
        var reg = /^\+?[1-9][0-9]*$/;
        return reg.test(val);
    };

    //判读是否是number，可以是number类型，也可以是string类型，但内容可以转换成一个number
    utilities.isNumber = function (val) {
        return !isNaN(parseFloat(val));
    };

    //判断是否是url
    utilities.isUrl = function (testUrl) {
        if (!utilities.isString(testUrl)) return false;
        //url test regexp written by Diego Perini
        var pattern = new RegExp(
            "^" +
            // protocol identifier
            "(?:(?:https?|ftp)://)" +
            // user:pass authentication
            "(?:\\S+(?::\\S*)?@)?" +
            "(?:" +
            // IP address exclusion
            // private & local networks
            "(?!(?:10|127)(?:\\.\\d{1,3}){3})" +
            "(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})" +
            "(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})" +
            // IP address dotted notation octets
            // excludes loopback network 0.0.0.0
            // excludes reserved space >= 224.0.0.0
            // excludes network & broacast addresses
            // (first & last IP address of each class)
            "(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])" +
            "(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}" +
            "(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))" +
            "|" +
            // host name
            "(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)" +
            // domain name
            "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*" +
            // TLD identifier
            "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))" +
            // TLD may end with dot
            "\\.?" +
            ")" +
            // port number
            "(?::\\d{2,5})?" +
            // resource path
            "(?:[/?#]\\S*)?" +
            "$", "i"
        );
        return pattern.test(testUrl);
    };

    utilities.isEmptyStr = function (str) {
        return str == null || str === '';
    };

    utilities.cookie = {
        setCookie: function (name, value, days) {
            var exp = new Date();
            exp.setTime(exp.getTime() + days * 24 * 60 * 60 * 1000);
            document.cookie = name + "=" + encodeURI(value) + ";expires=" + exp.toGMTString() + ";path=/";
        },

        getCookie: function (name) {
            var arr = document.cookie.match(new RegExp("(^| )" + name + "=([^;]*)(;|$)"));
            if (arr != null) {
                return decodeURI(arr[2]);
            } else {
                return null;
            }
        },

        removeCookie: function (name) {
            var val = $IU.cookie.getCookie(name);
            if (val != null) {
                $IU.cookie.setCookie(name, val, -1);
            }
        }
    };


    //是否array数组包含对象obj
    utilities.arrayContains = function (array, obj) {
        if (this.isArray(array) === false) return false;
        var i = array.length;
        while (i--) {
            if (array[i] === obj) {
                return true;
            }
        }
        return false;
    };

    //是否arrayA包含了arrayB(arrayA长度大于等于arrayB长度，且前面n(n=arrayB.length)元素和arrayB的元素相同)
    utilities.arrayAContainArrayB = function (arrayA, arrayB) {
        if (!this.isArray(arrayA) || !this.isArray(arrayB)) return false;
        if (arrayB.length > arrayA.length) return false;
        for (var i = 0; i < arrayB.length; i++) {
            if (arrayA[i] !== arrayB[i]) return false;
        }
        return true;
    };


    utilities.arrayUnique = function (array) {
        var a = array.concat();
        for (var i = 0; i < a.length; ++i) {
            for (var j = i + 1; j < a.length; ++j) {
                if (a[i] === a[j])
                    a.splice(j--, 1);
            }
        }
        return a;
    };

    //计算含有中文的字符串长度，一个中文算2个字符
    utilities.chineseLength = function (str) {
        return str.replace(/[^\x00-\xff]/g, "**").length;
    };

    //string全部替换
    utilities.stringReplaceAll = function (originalString, searchString, replaceString, ignoreCase) {
        if (originalString == null) return null;
        if (searchString == null || replaceString == null) return null;
        return originalString.replace(new RegExp(searchString, (ignoreCase ? "gi" : "g")), replaceString);
    };

    utilities.getElementsByClassName = function (className) {

        var hasClassName = new RegExp("(?:^|\\s)" + className + "(?:$|\\s)");
        var allElements = document.getElementsByTagName("*");
        var results = [];

        var element;
        for (var i = 0; (element = allElements[i]) != null; i++) {
            var elementClass = element.className;
            if (elementClass && elementClass.indexOf(className) !== -1 && hasClassName.test(elementClass))
                results.push(element);
        }
        return results;
    };

    utilities.getDateIsoString = function (date) {
        if (date == null) return '';
        if (Date.prototype.toISOString !== undefined) {
            return date.toISOString();
        }

        var pad = function (number) {
            var r = String(number);
            if (r.length === 1) {
                r = '0' + r;
            }
            return r;
        };

        return date.getUTCFullYear()
            + '-' + pad(date.getUTCMonth() + 1)
            + '-' + pad(date.getUTCDate())
            + 'T' + pad(date.getUTCHours())
            + ':' + pad(date.getUTCMinutes())
            + ':' + pad(date.getUTCSeconds())
            + '.' + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)
            + 'Z';
    };

    //获取标准时区偏移值，无视是否该时区目前是否处于夏令时
    utilities.stdTimezoneOffset = function () {
        var date = new Date();
        var jan = new Date(date.getFullYear(), 0, 1);
        var jul = new Date(date.getFullYear(), 6, 1);
        return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    };

    /**
     *  从租户时间戳转换到本地时间(在本地浏览器中看到租户时间戳代表的租户服务器所在时区的时间)
     *  例如假设服务器在东八区，日期控件填写的是2016-01-01，传输到服务器的常整数1451577600，
     *  这个数字代表的时间是：2016/01/01 00:00:00 GMT+8（东八区2016年1月1号零点）对应的GMT时间: 2015/12/31 16:00:00 GMT (GMT0时区)
     *  假设客户端在西一区，则转换出来的时间是1451610000，这个数字代表的时间是：2016/01/01 00:00:00 GMT-1(西一区2016年1月1号0点)
     *  那么在西一区的客户端上显示的日期将和服务器上存的日期一致(2016/01/01)
     */
    utilities.unixTimeToDate = function (timestamp) {
        if (isNaN(timestamp)) return null;
        var date = new Date();
        //转成GMT时间
        date.setTime((timestamp + (infoCore.params.tenantTimeZoneOffset != null ? infoCore.params.tenantTimeZoneOffset : transformer.tenantTimeZoneOffset)) * 1000);
        var oldOffset = date.getTimezoneOffset();

        //转成本地时间
        date.setTime((date.getTime() / 1000 + date.getTimezoneOffset() * 60) * 1000);
        var newOffset = date.getTimezoneOffset();
        //新老偏移量不一致，说明正好是夏令时开始的那一天,需要将偏移量的差值再计算进去
        if (newOffset !== oldOffset) {
            date.setTime((date.getTime() / 1000 + (newOffset - oldOffset) * 60) * 1000);
        }
        return date;
    };

    //从租户时间戳(日期)转换到string
    utilities.unixTimeToDateString = function (timestamp) {
        var date = InfoPlus.Utilities.unixTimeToDate(timestamp);
        if (null == date) return null;
        return InfoPlus.Utilities.dateFormat(date, "yyyy-MM-dd");
    };

    //从租户时间戳转换到租户时间string
    utilities.unixTimeToString = function (timestamp) {
        var date = InfoPlus.Utilities.unixTimeToDate(timestamp);
        if (null == date) return null;
        return InfoPlus.Utilities.dateFormat(date, "yyyy-MM-dd hh:mm:ss");
    };

    //从时间类型(从0点开始的秒数)转换成string类型
    utilities.unixTimeToTimeString = function (timestamp) {
        if (isNaN(timestamp)) return null;
        var date = new Date();
        //转成GMT时间
        date.setTime(timestamp * 1000);
        //转成本地时间
        date.setTime((date.getTime() / 1000 + date.getTimezoneOffset() * 60) * 1000);
        return InfoPlus.Utilities.dateFormat(date, "hh:mm");
    };

    //从租户时间戳转换到本地时间
    utilities.unixTimeToLocalTime = function (timestamp) {
        if (isNaN(timestamp)) return null;
        var date = new Date();
        date.setTime(timestamp * 1000);
        return date;
    };

    //从租户时间戳转换到本地时间string
    utilities.unixTimeToLocalTimeString = function (timestamp) {
        if (isNaN(timestamp)) return null;
        var date = new Date();
        date.setTime(timestamp * 1000);
        return InfoPlus.Utilities.dateFormat(date, "yyyy-MM-dd hh:mm:ss");
    };

    //从string转换到租户时间戳（租户所在时区的那天的0点的unix时间戳）
    utilities.dateStringToUnixTime = function (date) {
        try {
            date = date.replace(/-/g, "/");
            date = date.substr(0, 10);
            var stamp = Date.parse(date);
            if (isNaN(stamp)) return null;
            return stamp / 1000 - (new Date(stamp)).getTimezoneOffset() * 60 - infoCore.params.tenantTimeZoneOffset;
            //return stamp / 1000 - $IU.stdTimezoneOffset() * 60 - infoCore.params.tenantTimeZoneOffset;
        } catch (exception) {
            return null;
        }
    };

    //从时间string转换成从0点开始的秒数(用于时间控件)
    utilities.timeStringToUnixTime = function (time) {
        try {
            var stamp = Date.parse("1970/01/01 " + time);
            if (isNaN(stamp)) return null;
            return stamp / 1000 - (new Date(stamp)).getTimezoneOffset() * 60;
        } catch (exception) {
            return null;
        }
    };

    //判断本地所在时区是否和服务器所在时区相同
    utilities.isSameTimezone = function () {
        var date = new Date();
        return (infoCore.params.tenantTimeZoneOffset / 60 === -date.getTimezoneOffset());
    };

    //获取本地时区字符
    utilities.getTimezoneString = function (offset) {
        var hour = parseInt(offset / 60, 10),
            minute = Math.abs(offset - hour * 60);
        var val = "UTC";
        if (hour === 0 && minute === 0) {
            return val;
        }
        if (hour >= 0) {
            val += "+";
        }
        val += hour.toString() + ":";
        if (minute > 0) {
            val += minute.toString();
        } else {
            val += "00";
        }
        if ($$.timezone[val] != null) {
            return $$.lt("timezone." + val) + $$.lt("timezone.time") + val;
        }
        return val;
    };

    //移动版展开所有的view，目前在提交或存盘验证时以及批注之前都需要先展开所有的view
    utilities.mobileExpandAllViews = function () {
        var expandedLabels = {};
        if (!$$.MOBILE) {
            return;
        }
        $$.params.holder.form.find("." + InfoPlus.Layout.View.CLASS_VIEW).each(function () {
            var view = $(this).data("viewControl"),
                label = view.label;
            if (label != null) {
                if (!label.isExpanded()) {
                    label.expand(false);
                    expandedLabels[label.getId()] = label;
                }
            }
        });
        return expandedLabels;
    };

    //移动版，对于为了检查而临时展开的view，在检查完毕后如果不包含错误（或者批注等等），那么需要再收拢起来
    utilities.mobileShrinkViewsWithNoTips = function (expandedViewLabelsForCheck) {

        if (!$$.MOBILE || expandedViewLabelsForCheck === undefined) {
            return;
        }

        var getContainTipViewLabels = function () {
            var containTipViewLabels = {};
            var $errorDivs = $("body").children('div.formError');
            $errorDivs.each(function () {
                var $element = $(this).data("element");
                if ($element != null) {
                    var label = $element.parents(".infoplus_view_wrap_outer").children(".infoplus_view_label").data("label");
                    if (label !== undefined) {
                        containTipViewLabels[label.getId()] = label;
                    }
                }
            });


            $("div.popTip").each(function () {
                var popTipControl = $(this).data(InfoPlus.Render.PopTip.DATA_TIP_CONTROL);
                if (popTipControl != null) {
                    var $popper = $(popTipControl.options.popper);
                    var label = $popper.parents(".infoplus_view_wrap_outer").children(".infoplus_view_label").data("label");
                    if (label !== undefined) {
                        containTipViewLabels[label.getId()] = label;
                    }
                }
            });

            return containTipViewLabels;
        };

        var containTipViewLabels = getContainTipViewLabels();
        for (var id in expandedViewLabelsForCheck) {
            if (expandedViewLabelsForCheck.hasOwnProperty(id) && containTipViewLabels[id] === undefined) {
                expandedViewLabelsForCheck[id].shrink(false);
            }
        }
    };

    //目前这个方法在三个地方会调用到 1.存盘 2.表单提交 3.发起按钮
    utilities.doValidate = function (fromSave, fromStartPage) {

        //在移动版为了验证，先将缩拢的view展开，验证完毕后，如果这个view里面没有出错的控件再将view缩起来
        //先设立一个是否需要处理移动版标签的标记
        var shouldProcessViewLabels = ($$.MOBILE && fromStartPage !== true);

        var getContainErrorViewLabels = function () {
            var containErrorViewLabels = {};
            var $errorDivs = $("body").children('div.formError');
            $errorDivs.each(function () {
                var $element = $(this).data("element");
                if ($element != null) {
                    var label = $element.parents(".infoplus_view_wrap_outer").children(".infoplus_view_label").data("label");
                    if (label !== undefined) {
                        containErrorViewLabels[label.getId()] = label;
                    }
                }
            });

            return containErrorViewLabels;
        };

        //将没有验证错误的view再收缩起来
        var shrinkViewsWithNoError = function (expandedViewLabelsForCheck) {
            if (!shouldProcessViewLabels) return;
            var containErrorViewLabels = getContainErrorViewLabels();
            if (expandedViewLabelsForCheck !== undefined) {
                for (var id in expandedViewLabelsForCheck) {
                    if (expandedViewLabelsForCheck.hasOwnProperty(id)) {
                        if (containErrorViewLabels[id] === undefined) {
                            expandedViewLabelsForCheck[id].shrink(false);
                        }
                    }
                }
            }
        };

        //先清除以前所有的验证错误气泡
        utilities.clearAllError();

        if (shouldProcessViewLabels) {
            var expandedViewLabelsForCheck = $IU.mobileExpandAllViews();
        }

        var checkRequire = (fromSave == null || fromSave === false),
            controls = $$.params.renderForm.find("*[class*='validate']").filter($IU.isValidateControlFilter);

        //验证前重建一下动态的cache，因为下面可能需要做动态验证
        $$.dynamics.cache.build();
        //存盘时候只验证内置的正则（目前包括日期，整型或者浮点型的文本框）
        if (fromSave) {
            controls = controls.filter(function () {
                var $control = $(this);
                if ($control.data($Control.DATA_ORIGIN_INPUT) != null) {
                    var validator = $($control.data($Control.DATA_ORIGIN_INPUT)).data($Control.DATA_VALIDATOR);
                } else {
                    validator = $control.data($Control.DATA_VALIDATOR);
                }
                if (validator != null) {
                    if (validator.builtIn) return true;
                    if (validator.dynamics != null) {
                        for (var i = 0, len = validator.dynamics.length; i < len; i++) {
                            if (validator.dynamics[i]['builtIn']) return true;
                        }
                    }
                    return false;
                } else {
                    return false;
                }
            });
        }

        if ($IU.checkControlValidation(controls, checkRequire, true) === false) {
            var scrollToError = function () {
                var minTop = null;
                var $errorDivs = $("body").children('div.formError');
                $errorDivs.each(function () {
                    var top = parseInt($(this).css("top"), 10);
                    if (!isNaN(top)) {
                        if (minTop == null) {
                            minTop = top;
                        } else {
                            if (top < minTop) {
                                minTop = top;
                            }
                        }
                    }
                });


                if (minTop != null && minTop > 60) {
                    $IU.scrollTo(minTop - 60, 500);
                }
            };

            if (shouldProcessViewLabels) {
                $IU.mobileShrinkViewsWithNoTips(expandedViewLabelsForCheck);
            }

            //var errorMessage = (fromStartPage !== true) ? $$.lt("validation.fail") + $$.lt("validation.ensure") : $$.lt("validation.ensure");
            var errorMessage = $$.lt("validation.ensure");
            var $errorContent = $(".formErrorContent");
            if ($errorContent.length === 1) {
                errorMessage = $errorContent.text();
                if (errorMessage.substr(0, 2) === "* ") {
                    errorMessage = errorMessage.substr(2);
                }
                if (fromStartPage !== true) {
                    var control = $errorContent.parent().data("element").data($Control.DATA_CONTROL_OBJECT);
                    if (control != null && control.field != null) {
                        if (control.field.label != null && $IU.trimString(control.field.label) !== '') {
                            errorMessage = $IU.trimString(control.field.label) + ":" + errorMessage;
                        }
                    }
                }
            }
            $IU.messageBox(null, errorMessage, null, 350, function () {
                $(".formError").effect("bounce", {}, 150);
            });
            //这里需要稍许延时，否则scrollToError时候计算top会有问题
            setTimeout(scrollToError, 1000);
            return false;
        } else {
            if (shouldProcessViewLabels) {
                $IU.mobileShrinkViewsWithNoTips(expandedViewLabelsForCheck);
            }
        }
        return true;
    };

    utilities.getPageScroll = function () {
        var x = 0, y = 0;
        if (window.pageYOffset) {
            // all except IE
            y = window.pageYOffset;
            x = window.pageXOffset;
        } else if (document.documentElement
            && document.documentElement.scrollTop) {
            // IE 6 Strict
            y = document.documentElement.scrollTop;
            x = document.documentElement.scrollLeft;
        } else if (document.body) {
            // all other IE
            y = document.body.scrollTop;
            x = document.body.scrollLeft;
        }
        return { X: x, Y: y };
    };

    utilities.getPageSize = function () {
        var scrW = 0, scrH = 0;
        if (window.innerHeight && window.scrollMaxY) {
            // Mozilla
            scrW = window.innerWidth + window.scrollMaxX;
            scrH = window.innerHeight + window.scrollMaxY;
        } else if (document.body.scrollHeight > document.body.offsetHeight) {
            // all but IE Mac
            scrW = document.body.scrollWidth;
            scrH = document.body.scrollHeight;
        } else if (document.body) { // IE Mac
            scrW = document.body.offsetWidth;
            scrH = document.body.offsetHeight;
        }

        var winW = 0, winH = 0;
        if (window.innerHeight) { // all except IE
            winW = window.innerWidth;
            winH = window.innerHeight;
        } else if (document.documentElement
            && document.documentElement.clientHeight) {
            // IE 6 Strict Mode
            winW = document.documentElement.clientWidth;
            winH = document.documentElement.clientHeight;
        } else if (document.body) { // other
            winW = document.body.clientWidth;
            winH = document.body.clientHeight;
        }

        // for small pages with total size less then the viewport
        var pageW = (scrW < winW) ? winW : scrW;
        var pageH = (scrH < winH) ? winH : scrH;

        return { PageW: pageW, PageH: pageH, WinW: winW, WinH: winH };
    };

    utilities.getElementPosition = function (element) {

        var msie = +((/msie (\d+)/.exec(navigator.userAgent.toLowerCase()) || [])[1]);
        if (isNaN(msie)) {
            msie = +((/trident\/.*; rv:(\d+)/.exec(navigator.userAgent.toLowerCase()) || [])[1]);
        }


        var t = element.offsetTop;
        var l = element.offsetLeft;
        element = element.offsetParent;
        while (element) {
            if (isNaN(msie) || msie === 9) {
                var cssTransform = $(element).css("transform");
                if (cssTransform !== "" && cssTransform !== "none" && cssTransform != null) {
                    break;
                }
            }

            t += element.offsetTop;
            l += element.offsetLeft;
            element = element.offsetParent;
        }
        return { top: t, left: l };
    };

    utilities.getDialog = function () {
        var dialog = $("#" + InfoPlus.Utilities.DIALOG_ID);
        if (dialog.length === 0) {
            var dialogDiv = document.createElement("div");
            dialogDiv.id = InfoPlus.Utilities.DIALOG_ID;
            document.body.appendChild(dialogDiv);
            dialog = $(dialogDiv);
        }
        return dialog;
    };


    utilities.setMessageBoxButtonText = function (buttonIndex, text) {
        var $dialogParentElement = $(InfoPlus.Utilities.getDialog()).parent();
        var $buttons = $dialogParentElement.find(".ui-dialog-buttonset").children();
        if ($buttons.length > 0) {
            if (buttonIndex < $buttons.length) {
                var childButton = $buttons[buttonIndex];
                var buttonSpan = childButton.childNodes[0];
                $(buttonSpan).text(text);
            }
        }
    };

    //处理回退，如果是个数字就回退几，否则就url跳转
    utilities.processBack = function (back) {
        if (utilities.isEmptyStr(back)) {
            return;
        }
        if (utilities.isPositiveInt(back)) {
            var goBack = -parseInt(back, 10);
            window.history.go(goBack);
        } else {
            window.location.href = back;
        }
    };

    //判断当前浏览器是否可关闭
    utilities.browserCloseable = function () {
        //如果是TaskCenter的移动端APP用WebView显示的，那么认为一定能关掉(调用window.close()让app自己监听处理)
        if (navigator.userAgent.match(/TaskCenterApp/)) {
            return true;
        }
        /*
         window.opener==null说明是该浏览器窗口是手工打开并输入URL的
         window.top!=window说明是在iframe里打开的
         这两种情况下是无法关闭当前窗口的
         */
        return !(window.opener == null || window.top !== window);

    };

    //关闭窗口
    utilities.closeWindow = function () {
        //如果是app里关闭，直接关
        if ($$.APP) {
            if (window['webViewInterface'] !== undefined && window['webViewInterface']['close'] !== undefined) {
                try {
                    window.webViewInterface.close();
                } catch (ignore) {
                    console.error('TaskCenterApp/webViewInterface.close exception:' + ignore);
                }
                return;
            }
            window.close();
            return;
        }
        // 微哨浏览器，直接关
        if(window['WhistleBrowser'] !== undefined && window['WhistleBrowser']['close'] !== undefined){
            try {
                window.WhistleBrowser.close();
            } catch (ignore) {
                console.error('WhistleBrowser.close exception:' + ignore);
            }
            return;
        }

        var back = $$.params.back || transformer.back;

        //如果是微信小程序里
        if ($$.MINIPROGRAM) {
            if (utilities.isEmptyStr(back)) {
                if (wx && wx.miniProgram && (typeof wx.miniProgram.navigateBack === "function")) {
                    wx.miniProgram.navigateBack();
                    return;
                }
            } else {
                if (utilities.isPositiveInt(back)) {
                    if (wx && wx.miniProgram && (typeof wx.miniProgram.navigateBack === "function")) {
                        wx.miniProgram.navigateBack({ delta: parseInt(back, 10) - window.history.length });
                        return;
                    }
                } else {
                    window.location.href = back;
                    return;
                }
            }
        }


        if ($IU.isPositiveInt(back)) {
            //如果是数字类型的back参数，如果数字大于等于history.length，说明是无效back参数，忽略
            if (parseInt(back, 10) >= window.history.length) {
                back = undefined;
                $$.params.back = undefined;
            }
        }

        //如果参数上带着back，就跳转到back
        //之所以要判transformer.back是因为当load时候出错,$$.params还没构造好，只能用transformer.back
        if (!utilities.isEmptyStr(back)) {
            utilities.processBack(back);
        } else {
            //如果是微信端打开的，调用WeixinJSBridge的closeWindow方法
            if (typeof window["WeixinJSBridge"] === "object" && typeof window["WeixinJSBridge"].invoke === "function") {
                window["WeixinJSBridge"].invoke("closeWindow");
            } else {
                //关不掉就重刷页面（已作废）
                //目前采取的策略是不管关的掉还是关不掉，先试着关一下，因为发现browserCloseable方法里面用window.opener来判是否可关，
                //结果发现如果办事大厅页面刷新了一下，在待办页面打开的渲染页的window.opener会变成null，这时候的判断就不准确了(此时应该还是可以关掉的，只有新开一个tab页这时候window.opener为null且无法关掉)
                //if (!utilities.browserCloseable()) {
                //    window.location.reload();
                //} else {
                //此处为了ie中关闭时候不再出一个提示框
                window.open('', '_self', '');
                window.close();

                //这个window.closed的判断在chrome,firefox下有效，在ie(所有版本，包括edge)下即使window.closed为false,实际窗口还是关掉了
                if (!window.closed) {
                    //关闭后再刷一下，为了防止没关掉但是提交或者工具按钮都可以按
                    setTimeout(function () {
                        window.location.reload();
                    }, 500);
                }


                //}
            }
        }
    };

    //延时显示的错误提示框，在连续执行的代码中调用，最后出错信息一起显示
    utilities.delayedErrorMessageBox = function (message) {
        if (utilities.errorMessage == null) {
            utilities.errorMessage = message;
            setTimeout(function () {
                utilities.errorMessageBox(utilities.errorMessage, null, $$.lt("error.error"), null, null, false, false, "#ff0000");
                utilities.errorMessage = null;
            }, 0);
        } else {
            utilities.errorMessage = utilities.errorMessage + "\n" + message;
        }
    };

    //showErrorTip控制是否显示发生错误这个标签，这个由errno决定，调用这个函数的地方自己控制
    utilities.errorMessageBox = function (message, detailMessage, title, entities, errorCode, showErrorTip, fromLoad, titleColor, maxWidth) {
        var dialogDiv;

        dialogDiv = $(document.createElement("div"));

        if (showErrorTip === true) {
            var span = document.createElement("span");
            span.style.color = "#FF0000";
            $(span).text($$.lt("error.occur"));
            dialogDiv.append(span);
        }
        span = document.createElement("span");
        $(span).addClass("error_message_content").html($IU.linkifyStr($IU.htmlEncode(message)));
        dialogDiv.append(span);
        if (detailMessage != null) {
            var spaceDiv = document.createElement("div");
            spaceDiv.style.height = "5px";
            var div = document.createElement("div");
            var link = document.createElement("a");
            link.href = "#";
            link.style.color = "#2446AB";
            link.title = $$.lt("error.showDetail");
            $(link).text($$.lt("error.detail")).addClass("moreDetail");
            $(link).one("click", { link: link, dialogDiv: dialogDiv }, InfoPlus.Utilities.moreDetailClick);
            //link.onclick = $.proxy(InfoPlus.Utilities.moreDetailClick, {link: link, dialogDiv: dialogDiv});

            var detailDiv = document.createElement("div");

            var detailMessageDiv = document.createElement("div");
            $(detailMessageDiv).html($IU.linkifyStr($IU.htmlEncode(detailMessage))).addClass("error_detail_message");
            $(detailDiv).addClass("error_detail_message_container").append(detailMessageDiv);

            detailDiv.style.display = "none";

            $(div).append(link);

            $(div).append(detailDiv);
            dialogDiv.append(spaceDiv);
            dialogDiv.append(div);
        }

        var buttons = [];
        //如果是load页出错，那么显示关闭按钮
        if (fromLoad) {
            buttons.push({
                name: $$.lt("common.close"),
                defaultButton: true,
                callOnClose: true,
                callback: function () {
                    $IU.closeWindow();
                }
            });
        }

        if (errorCode === 'ENTRUST_MOCK_NOT_ALLOWED' || errorCode === 'ENTRUST_MODE_NOT_ALLOWED') {
            if (entrusts != null && entrusts.app != null && entrusts.app.id != null) {
                var appId = entrusts.app.id,
                    entrustInterface = transformer.interface_entrust;//本来应该用$$.params.uriEntrust,但是调用可能在initCore之前，所以只能用transformer.interface_entrust

                var isEntrust = errorCode === 'ENTRUST_MODE_NOT_ALLOWED';
                buttons.push({
                    name: isEntrust ? $$.lt("entrust.abort.entrust") : $$.lt("entrust.abort.debug"),
                    callback: function () {
                        $$.blockUI({ message: (isEntrust ? $$.lt("entrust.request.abort.requesting.entrust") : $$.lt("entrust.request.abort.requesting.debug")) });
                        $$.ajax({
                            type: "POST",
                            url: entrustInterface,
                            data: {
                                entrusted: false,
                                app: appId
                            },
                            requestMsg: (isEntrust ? $$.lt("entrust.request.abort.request.entrust") : $$.lt("entrust.request.abort.request.debug")),
                            errorTitle: (isEntrust ? $$.lt("entrust.request.abort.fail.entrust") : $$.lt("entrust.request.abort.fail.debug")),
                            beforeShowErrorMsg: function () {
                                $.unblockUI();
                            }
                        }).done(function () {
                            if ($$.MOBILE) {
                                //等待动画结束
                                setTimeout(function () {
                                    window.location.reload();
                                }, 600);
                            } else {
                                window.location.reload();
                            }
                        });
                    }
                });
            }
        }

        if (errorCode === 'INSTANCE_START_EXCEEDED' && entities != null && entities.length > 0) {
            buttons = [{
                name: $$.lt("common.close")
            }, {
                defaultButton: true,
                name: $$.lt("start.viewInstance"),
                callback: function () {
                    window.location.href = utilities.processUrl(entities[0]);
                }
            }];
        }
        var dialog = new InfoPlus.Render.Dialog({
            title: title,
            titleColor: titleColor,
            content: dialogDiv,
            maxWidth: maxWidth != null ? maxWidth : 800,
            buttons: buttons
        });
        dialog.show();

        return false;
    };

    //获取比当前页面最大的zIndex大1的数值
    utilities.getMaxZIndex = function () {
        var $divs = $("div");
        var maxZIndex = 0;
        for (var i = 0; i < $divs.length; i++) {
            if (maxZIndex < $divs[i].style.zIndex) {
                maxZIndex = $divs[i].style.zIndex;
            }
        }
        return maxZIndex + 1;
    };

    //确认对话框
    utilities.confirmBox = function (text, title, okText, w, callback) {

        var cancelText = $$.lt("common.cancel");

        var dialog = new InfoPlus.Render.Dialog({
            title: title !== okText ? title : null,
            content: text,
            maxWidth: w,
            buttons: [
                {
                    name: okText,
                    defaultButton: true,
                    callback: callback
                },
                {
                    name: cancelText
                }
            ]
        });
        dialog.show();
    };

    //是否对话框
    utilities.yesNoBox = function (text, w, callback) {

        var dialog = new InfoPlus.Render.Dialog({
            title: null,
            content: text,
            maxWidth: w,
            buttons: [
                {
                    name: $$.lt("common.yes"),
                    defaultButton: true,
                    callback: callback
                },
                {
                    name: $$.lt("common.no")
                }
            ]
        });
        dialog.show();
    };

    //消息对话框，只有一个按钮
    utilities.messageBox = function (title, text, buttonText, maxWidth, callback) {
        if (buttonText == null || buttonText === '') {
            buttonText = $$.lt("common.ok");
        }
        var dialog = new InfoPlus.Render.Dialog({
            title: title,
            content: text,
            maxWidth: maxWidth,
            buttons: [
                {
                    name: buttonText,
                    defaultButton: true,
                    callback: callback,
                    callOnClose: callback != null
                }
            ]
        });
        dialog.show();
    };

    //debug模式发起时显示的消息对话框，release发起不显示对话框
    utilities.debugBox = function (title, text, buttonText, maxWidth, callback) {
        if ($$.params.isRelease === false) {
            utilities.messageBox(title, text, buttonText, maxWidth, callback);
        }
    };

    //在对话框里用iframe渲染uri地址
    utilities.iframeBox = function (uri, title, modal, allowOpenNewWindow, width, height) {
        var iframe = document.createElement("iframe");
        iframe.src = uri;
        iframe.setAttribute("width", "100%");
        iframe.setAttribute("height", (height === 0 || height == null ? $(window).height() * 0.75 : height) + "px");
        var dialog = new InfoPlus.Render.Dialog({
            title: title,
            content: iframe,
            maxWidth: (width == null || width === 0 ? $(window).width : width),
            openNewUrl: uri,
            showFooter: false,
            showCloseButton: true,
            showOpenNewButton: allowOpenNewWindow,
            showMinimiseButton: !modal,
            modal: modal
        });
        dialog.show();
    };

    //在窗口底部显示一个tip
    utilities.tip = function (text, type, position) {
        new InfoPlus.Tip({
            text: text,
            type: type,
            position: position
        });
    };

    utilities.debugTip = function (text, type) {
        if ($$.params.isRelease === false) {
            utilities.tip(text, type, "left");
        }
    };

    utilities.infoTip = function (text) {
        utilities.tip(text, "info", "right");
    };


    //是否需要弹出一个page显示suggester
    utilities.shouldShowSuggesterPage = function () {
        //移动版并且不是ipad设备，考虑ipad设备屏幕物理尺寸比较大，直接suggester里选择就可以了
        return $$.MOBILE && !(/iPad/i.test(navigator.userAgent));
    };

    // 对于特定originControl，仅弹出一次。
    // by marstone, 2018/08/31
    utilities.showSuggester2PageOnce = function (originControl) {
        var exists = false;
        $(".mobile_page_div").each(function () {
            if ($(this).data($Control.DATA_ORIGIN_CONTROL) === originControl) {
                exists = true;
                return false;
            }
        });
        if (!exists) {
            var page = utilities.showSuggester2Page(originControl);
            $(page.element).data($Control.DATA_ORIGIN_CONTROL, originControl);
        }
    };

    utilities.showSuggester2Page = function (originControl) {
        var originValue = originControl.getValue();
        var control = new $Controls.Suggester2(originControl.path, originControl.field, originControl.render,
            originValue.value, originValue.displayValue, originControl.parentValue, originControl.suggestService,
            originControl.getAttributes(), originControl);
        $(control.element).removeClass("xdTextBox");
        control.initSelect2();
        //onFieldChange和onFieldSync在控件初始化时候都有代码处理，onFieldRefer需要特殊处理
        //表单控件添加后是调用formRender.initFieldReferedClass()来处理的，这里需要自己处理
        control.onFieldRefer = originControl.onFieldRefer;

        var tooltip = originControl.tooltip,
            content = control.getControlContainer();
        if (tooltip != null && tooltip.tip != null && tooltip.tip !== '') {
            content = document.createElement("div");
            var tipDiv = document.createElement("div");
            $(tipDiv).text(tooltip.tip).addClass("infoplus_suggester_tooltip");
            $(content).append(tipDiv).append(control.getControlContainer());
        }
        var options = {
            title: originControl.field.label,
            content: content,
            onShow: function () {
                var select = $(control.element).data($Control.DATA_ORIGIN_INPUT);
                $(select).select2('open');
            },
            onClose: function () {
                var select = $(control.element).data($Control.DATA_ORIGIN_INPUT);
                $(select).select2('destroy');
                originControl.onSuggestPage = false;
            }
        };
        var page = new InfoPlus.Render.Mobile.Page(options);
        page.show();
        return page;
    };

    utilities.getTransitionEndEventName = function () {
        var el = document.createElement('fake'),
            transEndEventNames = {
                'WebkitTransition': 'webkitTransitionEnd',
                'transition': 'transitionend',
                'MozTransition': 'transitionend',
                'OTransition': 'oTransitionEnd',
                'msTransition': 'MSTransitionEnd'
            };

        for (var t in transEndEventNames) {
            if (transEndEventNames.hasOwnProperty(t)) {
                if (el.style[t] !== undefined) {
                    return transEndEventNames[t];
                }
            }
        }
        return null;
    };

    utilities.initValidationEngine = function () {
        $$.params.renderForm.validationEngine('attach', {
            validationEventTriggers: "blur",  //触发的事件  validationEventTriggers:"keyup blur",
            success: false, //为true时即使有不符合的也提交表单,false表示只有全部通过验证了才能提交表单,默认false
            promptPosition: $$.MOBILE ? "topLeft" : "topRight" //提示所在的位置，topLeft, topRight, bottomLeft,  centerRight, bottomRight
        });
    };

    utilities.rebindValidationEngine = function () {
        $$.params.renderForm.validationEngine('detach');
        utilities.initValidationEngine();
    };

    utilities.clearErrorPrompt = function (element) {
        //var $controls = $(element).find("*").filter(InfoPlus.Utilities.isValidateFilter);
        var $controls = $(element).find("*[class*='validate']");
        for (var i = 0; i < $controls.length; i++) {
            $($controls[i]).validationEngine('hidePrompt');
        }
    };

    utilities.clearAllError = function () {
        $("div.formError").stop(true, true).remove();
        $("div.ui-effects-wrapper").remove();
    };

    utilities.adjustRenderWidth = function () {
        if ($$.params.currentWidth == null) {
            $$.params.currentWidth = 0;
        }
        if ($$.MOBILE) {
            var width = $(window).width();
            if (width > 0) {
                $$.params.holder.remark.css("width", width + "px");
                $$.params.holder.form.css("width", width + "px");
                if (width !== $$.params.currentWidth) {
                    $$.params.currentWidth = width;
                    $$.resize(width);
                }
            }
        } else {
            width = $$.params.holder.form[0].clientWidth;
            if (width !== $$.params.currentWidth) {
                $$.params.currentWidth = width;
                $$.resize(width);
            }
        }
    };

    //更新所有提示信息,包括验证出错信息和气泡信息（气泡目前主要用于批注和比较）
    utilities.updateFormTips = function (animate) {
        $IU.updateErrorPromptPosition(animate);
        InfoPlus.Render.PopTip.fixPosition(animate);
    };

    utilities.updateFormTipsAndViews = function (animate) {
        $IU.checkViewVisibility();
        $IU.updateFormTips(animate);
    };

    //检查各view内部高度是否为0，如果是0就隐藏
    utilities.checkViewVisibility = function (fromInit) {
        //预览页不用调整，预览页本身就是分页显示，用上一页，下一页翻页，不是所有view同时显示
        if ($$.PREVIEW === true) return;
        var hideZeroHeightView = function (view, show) {
            var $view = $(view.element);
            if ($view.height() === 0 || $view.find("table").first().height() === 0) {
                view.hide();
            } else {
                if (show) {
                    view.show();
                }
            }
        };

        var views = $$.params.formRender.views;
        for (var i = 0, len = views.length; i < len; i++) {
            var view = views[i],
                $view = $(view.element),
                expandForCheck = false;
            if (fromInit === true) {
                hideZeroHeightView(view);
            } else {
                //如果是移动版，view是收拢状态，那么先展开再检查高度
                if ($$.MOBILE && (view.expanded === false)) {
                    view.expand(false, true);
                    expandForCheck = true;
                }
                if ($view.is(":visible")) {
                    hideZeroHeightView(view);
                } else {
                    //如果view动态设置过不可见，那么就不用再检查内部高度了，没设置过的才需要检查
                    if ($view.data("dynamicInvisible") == null) {
                        //对于原先不可见的，先设置可见，再判内部高度，否则不可见情况下内部高度一定是0
                        $view.show();
                        hideZeroHeightView(view, true);
                    }
                }
                //将前面为了检查而展开的view再次收拢
                if (expandForCheck) {
                    view.shrink(false, true);
                }
            }
        }
    };

    //更新错误验证提示气泡的位置
    utilities.updateErrorPromptPosition = function (animate) {
        var getElementId = function (elementClasses) {
            for (var index = 0; index < elementClasses.length; index++) {
                var className = elementClasses[index];
                if (className.indexOf("formError") !== -1 && className !== "formError") {
                    return className.substring(0, className.indexOf("formError"));
                }
            }
            return null;
        };
        var $errorDivs = $("body").children('div.formError');
        for (var i = 0; i < $errorDivs.length; i++) {
            var $errorDiv = $($errorDivs[i]),
                $element = $errorDiv.data("element");
            if ($element != null) {
                if ($element.is(":visible")) {
                    //var content = $errorDiv.children(".formErrorContent")[0].innerHTML;
                    $element.validationEngine('updatePromptPosition', animate);
                } else {
                    //如果冒泡的控件不可见，并且不是因为移动版多view折起来而不可见，那么就消失
                    if (!$errorDiv.hasClass("hideShrink")) {
                        $element.validationEngine('hide', true);
                    }
                }
            }
        }
    };

    utilities.setFocusToFirstEditableTextBox = function () {
        var windowHeight = document.documentElement.clientHeight,
            $text = $(".infoplus_editControl.infoplus_writable:visible,.infoplus_textareaControl.infoplus_writable:visible,.infoplus_richTextControl.infoplus_writable:visible").first();
        if ($text.length > 0 && $text.offset().top < windowHeight) {
            if ($text.hasClass("infoplus_richTextControl")) {
                var richText = $text.data("controlObject");
                if (richText.editor != null) {
                    //不延时光标出不来
                    setTimeout(function () {
                        richText.editor.focus();
                    }, 500);
                }
            } else {
                $text.focus();
            }
        }
    };

    var delayTimer;
    utilities.fixPopTipPosition = function (atOnce) {
        $($$.params.renderContainer).children(".popTip").each(function () {
            var tipControl = $(this).data("tipControl");
            if (tipControl != null) {
                tipControl.fixPosition();
            }
        });


        /*
        var fix = function () {
            $($$.params.renderContainer).children(".popTip.remarkTip").each(function () {
                var tipControl = $(this).data("tipControl");
                if (tipControl != null) {
                    tipControl.fixPosition();
                }
            });
        };
        clearTimeout(delayTimer);
        if (atOnce === true) {
            fix();
        } else {
            delayTimer = setTimeout(fix, 300)
        }
        */
    };

    utilities.isControlFilter = function () {
        //此处的判断是避免对ie9下flash的Object TAG进行判断，对object tag而言ie9下$(this).data($Control.DATA_IS_CONTROL)会报错，因为其不是domElement,没有getAttribute的function
        if (this.tagName === 'OBJECT') return false;
        var isControl = $(this).data($Control.DATA_IS_CONTROL);
        if (isControl == null) return false;
        return isControl === true;
    };

    utilities.isSuggesterFilter = function () {
        //此处的判断是避免对ie9下flash的Object TAG进行判断，对object tag而言ie9下$(this).data($Control.DATA_IS_CONTROL)会报错，因为其不是domElement,没有getAttribute的function
        if (this.tagName === 'OBJECT') return false;
        return ($(this).data($Control.DATA_SUGGESTER) != null);
    };

    //判断是否是需要验证的控件，并且现在visible为true
    utilities.isValidateControlFilter = function () {
        //此处的判断是避免对ie9下flash的Object TAG进行判断，对object tag而言ie9下$(this).data($Control.DATA_IS_CONTROL)会报错，因为其不是domElement,没有getAttribute的function
        if (this.tagName === 'OBJECT') return false;
        var $element = $(this);
        var isControl = $element.data($Control.DATA_IS_CONTROL);
        if (isControl == null) return false;
        if (isControl === false) return false;

        //如果没有写权限或者是动态readonly的，就不需要验证了
        var control = $element.data("controlObject");
        if (control == null) {
            //此处处理控件是suggester的情况
            var originInput = $element.data($Control.DATA_ORIGIN_INPUT);
            if (originInput != null) {
                control = $(originInput).data("controlObject");
                if (control.isDynamicReadonly() || (!control.isWritable())) {
                    return false;
                }
            }
        } else {
            if (control.isDynamicReadonly() || (!control.isWritable())) {
                return false;
            }
        }

        if ($element.parents(".detailCell").size() > 0) {
            //在详细td格子里，如果本身不可见那么返回false,否则就需要验证
            //似乎有问题，如果设置了rowVisible，那么自身display并不为none
            if ($element.css("display") === "none") {
                return false;
            }
        } else {
            if (!$element.is(":visible")) return false;
        }

        return true;
        /*
         var classValue = this.getAttribute("class");
         if (classValue == null) return false;
         return (classValue.indexOf("validate") != -1);
         */
    };

    utilities.isValidateFilter = function () {
        //此处的判断是避免对ie9下flash的Object TAG进行判断，对object tag而言ie9下$(this).data($Control.DATA_IS_CONTROL)会报错，因为其不是domElement,没有getAttribute的function
        if (this.tagName === 'OBJECT') return false;
        var classValue = this.getAttribute("class");
        if (classValue == null) return false;
        return (classValue.indexOf("validate") !== -1);
    };

    //为控件加上需要验证的class
    utilities.addElementValidateClass = function (element) {
        $(element).addClass("validate[funcCall[checkRenderFormFields]]");
    };

    //移除需要验证的class
    utilities.removeElementValidateClass = function (element) {
        $(element).removeClass("validate[funcCall[checkRenderFormFields]]");
    };

    //去除字符串的前后导空白
    utilities.trimString = function (str) {
        if (str == null) {
            return null;
        } else {
            return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
        }
    };

    utilities.clearSuggester = function (element) {
        var $controls = $(element).find("*").filter(InfoPlus.Utilities.isSuggesterFilter);
        for (var i = 0; i < $controls.length; i++) {
            var suggester = $($controls[i]).data($Control.DATA_SUGGESTER);
            suggester.dispose();
        }
    };

    /**
     * 高亮显示控件
     * @param element 控件element
     */
    utilities.highLightElement = function (element) {

        var controlType = $(element).data($Control.DATA_CONTROL_TYPE);

        if (controlType === $Control.CONTROL_TYPE_IFRAME) {
            return;
        }

        if (!(controlType === $Control.CONTROL_TYPE_SUGGESTER || controlType === $Control.CONTROL_TYPE_SUGGESTER2)
            && !$(element).is(":visible")) {
            return;
        }

        //在ie下，infopath自带出来的控件class里面的backgroundColor属性会是window之类的文本(如果没有设置控件背景色的话)，这样在用jqueryui的highlight效果时会出错
        //解决方案是在highlight控件之前，把所有控件的backgroundColor先设置一下
        //chrome,firefox下没有这个问题
        var updateControlBackgroundColor = function (effectElement) {
            if ($.browser.msie) {
                try {
                    var org = document.body.createTextRange();
                    org.moveToElementText(effectElement);
                    var iClr = org.queryCommandValue("BackColor");
                    effectElement.style.backgroundColor = (iClr == null ? "rgb(255,255,255)" : "rgb(" + (iClr & 0xFF) + "," + ((iClr & 0xFF00) >> 8) + "," + ((iClr & 0xFF0000) >> 16) + ")");
                } catch (e) {
                }

            }
        };

        var highlightEffect = function (effectElement) {
            //动画效果不重复
            if ($(effectElement).data("isEffecting") !== undefined) return;
            updateControlBackgroundColor(effectElement);
            $(effectElement).data("isEffecting", true).effect("highlight", {}, 1000, function () {
                $(this).removeData("isEffecting");
            });
        };


        //debug("type:" + controlType);
        if (controlType != null) {
            switch (controlType) {
                case $Control.CONTROL_TYPE_REMARK:
                case $Control.CONTROL_TYPE_ANCHOR:
                case $Control.CONTROL_TYPE_ACTION:
                case $Control.CONTROL_TYPE_HIDDEN:
                    //do nothing
                    break;
                case $Control.CONTROL_TYPE_LABEL:
                    var labelControl = $(element).data($Control.DATA_CONTROL_OBJECT);
                    if (labelControl != null) {
                        highlightEffect(labelControl.element);
                    }
                    break;
                case $Control.CONTROL_TYPE_SUGGESTER:
                    var suggester = $(element).data($Control.DATA_SUGGESTER);
                    if (suggester != null) {
                        highlightEffect(suggester.activeInput);
                    }
                    break;
                case $Control.CONTROL_TYPE_SUGGESTER2:
                    var select2 = $(element).data("select2Object");
                    if (select2 != null) {
                        highlightEffect($(element).siblings(".select2").find(".select2-selection")[0]);
                    }
                    break;
                default:
                    highlightEffect(element);
                    break;
            }

        }
    };


    utilities.htmlEncode = function (str) {
        var s = "";
        if (str.length === 0) return "";
        for (var i = 0; i < str.length; i++) {
            switch (str.substr(i, 1)) {
                case "<":
                    s += "&lt;";
                    break;
                case ">":
                    s += "&gt;";
                    break;
                case "&":
                    s += "&amp;";
                    break;
                case " ":
                    // 此处做过一次改动，用&ensp;替代&nbsp;
                    // 这样可以在全英文输出内容的时候有更好的word-break表现，&nbsp;会不换行造成word-break失效
                    s += "&ensp;";
                    break;
                case "\"":
                    s += "&quot;";
                    break;
                case "\n":
                    s += "<br>";
                    break;
                default:
                    s += str.substr(i, 1);
                    break;
            }
        }
        return s;
    };

    utilities.moreDetailClick = function (event) {
        var link = event.data.link;
        var siblingDiv = $(link).siblings("div")[0];
        var dialogDiv = event.data.dialogDiv;

        if (siblingDiv != null) {
            dialogDiv.dialog("option", "width", 850);
            dialogDiv.dialog("option", "position", 'center');
            siblingDiv.style.display = 'block';

            $(link).empty();
        }

        return false;

    };

    utilities.dateFormat = function (date, format) {
        var o = {
            "M+": date.getMonth() + 1, //month
            "d+": date.getDate(), //day
            "h+": date.getHours(), //hour
            "m+": date.getMinutes(), //minute
            "s+": date.getSeconds(), //second
            "q+": Math.floor((date.getMonth() + 3) / 3), //quarter
            "S": date.getMilliseconds() //millisecond
        };
        if (/(y+)/.test(format)) {
            format = format.replace(RegExp.$1,
                (date.getFullYear() + "").substr(4 - RegExp.$1.length));
        }
        for (var k in o) {
            if (o.hasOwnProperty(k)) {
                if (new RegExp("(" + k + ")").test(format)) {
                    format = format.replace(RegExp.$1,
                        RegExp.$1.length === 1 ? o[k] :
                            ("00" + o[k]).substr(("" + o[k]).length));
                }
            }
        }

        return format;
    };

    /**
     * 按照格式替换内容,目标是将format中的${variable}替换为contentList中该variable对应的值
     * @param format        格式（包含了${variable}）
     * @param contentList   variable对象，包含了变量内容
     */
    utilities.variablesFormat = function (format, contentList) {
        var matchList = format.match(/\${\w+}/g);
        if (matchList != null) {
            for (var i = 0; i < matchList.length; i++) {
                var matchContent = matchList[i];
                var contentName = matchContent.substring(2, matchContent.length - 1);
                if (contentList[contentName] != null) {
                    format = format.replace(matchContent, InfoPlus.Utilities.trimString(contentList[contentName]));
                } else {
                    format = format.replace(matchContent, "");
                }
            }
        }
        return InfoPlus.Utilities.trimString(format);
    };

    //if options is not defined then return true when the field is empty
    utilities.checkFieldEmpty = function (field, options) {
        var ruleName = "required";

        //richtext特殊处理
        if (field.hasClass("infoplus_richTextControl")) {
            if (!utilities.trimString(CKEDITOR.instances[field.attr("id") + '_text'].getData())) {
                return options ? options.allrules[ruleName].alertText : true;
            }
            if (!options) {
                return false;
            } else {
                return undefined;
            }
        }

        switch (field.attr("type")) {
            case "text":
            case "password":
            case "textarea":
            case "file":
            default:
                if (!utilities.trimString(field.val())) {
                    return options ? options.allrules[ruleName].alertText : true;
                }
                break;
            case "radio":
            case "checkbox":
                var name = field.attr("name");
                if ($("input[name='" + name + "']:checked").size() === 0) {
                    if ($("input[name='" + name + "']").size() === 1) {
                        return options ? options.allrules[ruleName].alertTextCheckboxe : true;
                    } else {
                        return options ? options.allrules[ruleName].alertTextCheckboxMultiple : true;
                    }
                }
                break;
            // required for <select>
            case "select-one":
                // added by paul@kinetek.net for select boxes, Thank you
                if (!field.val()) {
                    return options ? options.allrules[ruleName].alertText : true;
                }
                break;
            case "select-multiple":
                // added by paul@kinetek.net for select boxes, Thank you
                if (!field.find("option:selected").val()) {
                    return options ? options.allrules[ruleName].alertText : true;
                }
                break;
        }
        if (!options) {
            return false;
        } else {
            return undefined;
        }
    };


    /**
     *  获取controlPath所能影响到的path数组
     *  例如_0_1_0能影响到的path数组为["","_0","_0_1","_0_1_0"],其中"","_0","_0_1"为直系祖先,"_0_1_0"为兄弟和直系子孙path的起始path
     */
    utilities.getReferedControlPaths = function (controlPath) {
        var referedControlPaths = [],
            pathArray = controlPath.split("_"),
            len = pathArray.length;
        for (var i = 0; i < len; i++) {
            var path = pathArray[i];
            if (i === 0) {
                referedControlPaths.push(path);
            } else {
                referedControlPaths.push(referedControlPaths[referedControlPaths.length - 1] + "_" + path);
            }
        }
        return referedControlPaths;
    };

    /**
     * 根据2个path判断这两个控件是否是兄弟(同一个重复节表中的不同行)
     */
    utilities.isSibling = function (path1, path2) {
        if (path1 == null || path2 == null || path1 === "" || path2 === "") {
            return false;
        }
        var pathArray1 = path1.split("_"),
            pathArray2 = path2.split("_");
        if (pathArray1.length !== pathArray2.length) {
            return false;
        }
        //前面的path必须完全一致，最后一部分不一样才是兄弟
        for (var i = 0, len = pathArray1.length; i < len - 1; i++) {
            if (pathArray1[i] !== pathArray2[i]) {
                return false;
            }
        }
        return pathArray1[len - 1] !== pathArray2[len - 1];
    };

    //转换文件大小显示格式，把字节数转换成B,K,M,G的格式
    utilities.convertFileSize = function (size) {
        if (size == null || !InfoPlus.Utilities.isNumber(size)) return { size: "", unit: "" };
        if (size < 1024) return { size: size.toString(), unit: "B" };
        size = size / 1024;
        if (size < 1024) return { size: size.toFixed(1).toString(), unit: "K" };
        size = size / 1024;
        if (size < 1024) return { size: size.toFixed(1).toString(), unit: "M" };
        size = size / 1024;
        return { size: size.toFixed(1).toString(), unit: "G" };
    };

    utilities.getElementStyle = function (element, name) {
        var elementStyle = element.getAttribute("style");
        if (elementStyle == null) return null;
        var styles = elementStyle.split(";");
        //倒过来找，因为同名style，实际起作用的总是最后面的
        for (var i = styles.length - 1; i >= 0; i--) {
            var style = $IU.trimString(styles[i]);
            if (style !== "") {
                var styleSplit = style.split(":");
                if (styleSplit.length === 2) {
                    if ($IU.trimString(styleSplit[0].toLowerCase()) === $IU.trimString(name.toLowerCase())) {
                        return $IU.trimString(styleSplit[1]);
                    }
                }
            }
        }
        return null;
    };

    //保存控件原来的style,为的是设置动态style为null或''时候可以恢复原来的style
    utilities.saveOriginStyles = function (element) {
        if ($(element).data(InfoPlus.Controls.Control.DATA_ORIGIN_STYLE) !== undefined) return null;
        var originStyles = {},
            originStyle = $(element).attr("style");
        if (originStyle == null) {
            $(element).data(InfoPlus.Controls.Control.DATA_ORIGIN_STYLE, originStyles);
            return originStyles;
        }
        var originStyleArray = originStyle.split(";"),
            len = originStyleArray.length;
        for (var styleIndex = 0; styleIndex < len; styleIndex++) {
            var style = $IU.trimString(originStyleArray[styleIndex]);
            if (style !== "") {
                var styleSplit = style.split(":");
                if (styleSplit.length === 2) {
                    originStyles[$IU.trimString(styleSplit[0]).toLowerCase()] = $IU.trimString(styleSplit[1]);
                }
            }
        }
        //DATA_ORIGIN_STYLE保存控件最开始渲染时候style的map，key是style名称(转换成小写)，内容是style值
        $(element).data(InfoPlus.Controls.Control.DATA_ORIGIN_STYLE, originStyles);
        return originStyles;
    };


    utilities.setDynamicStyle = function (element, style, value) {
        var getElementStyle = function (ele, styleName) {
            styleName = styleName.toLowerCase();
            var attrStyle = ele.getAttribute("style"),
                styleArray = attrStyle.split(";"),
                len = styleArray.length;
            for (var i = 0; i < len; i++) {
                var s = InfoPlus.Utilities.trimString(styleArray[i]);
                if (s !== "") {
                    var styleSplit = s.split(":");
                    if (styleSplit.length === 2) {
                        if (styleSplit[0].toLowerCase() === styleName) {
                            return InfoPlus.Utilities.trimString(styleSplit[1]);
                        }
                    }
                }
            }
            return "";
        };

        var setElementStyle = function (ele, styleName, styleValue) {
            styleName = InfoPlus.Utilities.trimString(styleName.toLowerCase());
            styleValue = InfoPlus.Utilities.trimString(styleValue);
            var attrStyle = ele.getAttribute('style');
            if (attrStyle == null) {
                ele.setAttribute("style", styleName + ":" + styleValue);
            } else {
                var styleArray = attrStyle.split(";"),
                    len = styleArray.length,
                    newStyle = '';
                for (var i = 0; i < len; i++) {
                    var s = InfoPlus.Utilities.trimString(styleArray[i]);
                    if (s !== "") {
                        var styleSplit = s.split(":");
                        if (styleSplit.length === 2) {
                            if (styleSplit[0].toLowerCase() !== styleName) {
                                newStyle = newStyle + (newStyle !== '' ? ';' : '') + s;
                            } else {
                                if (styleValue !== "") {
                                    newStyle = newStyle + (newStyle !== '' ? ';' : '') + styleName + ':' + styleValue;
                                }
                            }
                        }
                    }
                }
                ele.setAttribute('style', newStyle);
            }

        };
        style = InfoPlus.Utilities.trimString(style.toLowerCase());
        //originStyles是控件最开始渲染时候style的map，key是style名称(转换成小写)，内容是style值
        var originStyles = $(element).data(InfoPlus.Controls.Control.DATA_ORIGIN_STYLE);
        if (originStyles === undefined) {
            originStyles = $IU.saveOriginStyles(element);
        }

        value = InfoPlus.Utilities.trimString(value);
        if (value === "null" || value === "") {
            //value为null或者空，代表需要抹掉以前动态设置的值，恢复最开始的值
            if (originStyles[style] !== undefined) {
                setElementStyle(element, style, originStyles[style]);
            } else {
                setElementStyle(element, style, "");
            }
        } else {
            $(element).css(style, value);
        }
    };

    //在fieldChange时候根据返回数据设置表单字段值（目前只在fieldChange时候调用，所以其中$$.params.fieldChanging.controls的代码适用）
    utilities.setElementValue = function (fieldName, fieldValue, fieldDisplayValue, attributes) {
        if (fieldValue == null) fieldValue = '';
        if (fieldDisplayValue == null) fieldDisplayValue = '';

        var elements = document.getElementsByName(fieldName);
        for (var index = 0; index < elements.length; index++) {
            var changeValueElement = elements[index],
                changeValueControl = $(changeValueElement).data($Control.DATA_CONTROL_OBJECT),
                changed = false;
            if (changeValueControl != null && changeValueControl.isWritable()) {
                var oldValue = changeValueControl.getValue();
                if (oldValue != null && oldValue.value !== undefined) {
                    oldValue = oldValue.value;
                }
                changed = oldValue !== fieldValue;
                //如果数据改变过则setValue
                if (changed) {
                    //如果是日期类型并且传过来的fieldValue是个string，那么需要转换(这种情况会在fieldChange中发生)
                    //也许以后代码会改变，希望传过来的就是日期类型的数据
                    if (changeValueControl.field.type === InfoPlus.Controls.Control.DATA_TYPE_DATE && $IU.isString(fieldValue)) {
                        var newValue = $IU.dateStringToUnixTime(fieldValue);
                        if (newValue !== oldValue) {
                            changeValueControl.setValue(newValue);
                        } else {
                            changed = false;
                        }
                    } else {
                        //always not from init
                        changeValueControl.setValue(fieldValue, fieldDisplayValue, $$.params.initializing, attributes);
                    }
                    //对于手动修改会自动触发change的控件，在setValue后需要手工触发一下change事件，对于原先就在代码里触发change的控件（label,hidden,remark,help等），不需要手工触发，setValue时候自己就会触发
                    if (changed && changeValueControl.autoTriggerFieldChangeEvent && (changeValueControl.onFieldChange || changeValueControl.onFieldRefer)) {
                        //自动触发change的控件是立马触发的，手工的也许也应该马上触发，马上触发有何缺点待观察，以前代码延时触发的原因待查
                        $(changeValueControl.element).change();
                        /*
                         setTimeout(function (control) {
                         return function () {
                         $(control.element).change();
                         }
                         }(changeValueControl), 0);
                         */
                    }
                } else {
                    //如果有attributes，无条件调用control.setValue.
                    //setElementValue是由fieldChange成功后回调时候调用的，在调fieldChange时候attributes是不会传到messenger的，
                    //所以如果messenger传回了attributes，那一定是有所改变
                    //在这里目前是特殊处理select的datasource，messenger可以通过设置attributes里的datasource,给下拉框重新设置options
                    if (attributes != null) {
                        changeValueControl.setValue(fieldValue, fieldDisplayValue, $$.params.initializing, attributes);
                    }
                }
                //记录fieldChanging时候所改变的控件
                if ($$.params.fieldChanging != null) {
                    $$.params.fieldChanging.controls.push(changeValueControl);
                }
            }
            if (changed) {
                $IU.highLightElement(changeValueElement);
            }
        }
    };

    utilities.getFieldNamesFromFieldChangeOldData = function (entities) {
        var names = {};
        for (var i = 0; i < entities.length; i++) {
            names[entities[i].fieldName] = null;
        }
        return names;
    };

    utilities.getFieldNamesFromFieldChangeData = function (data) {
        var names = {};
        var getFieldName = function (name) {
            if (name.length > 0) {
                return "field" + name.substring(0, 1).toUpperCase() + name.substring(1);
            }
            return null;
        };
        var getGroupName = function (name) {
            if (name.length > 0) {
                return "group" + name.substring(0, 1).toUpperCase() + name.substring(1);
            }
            return null;
        };
        var mergeNames = function (mNames) {
            for (var k in mNames) {
                if (mNames.hasOwnProperty(k)) {
                    addName(k);
                }
            }
        };
        var addName = function (name) {
            if (name != null) {
                if (!names.hasOwnProperty(name)) {
                    names[name] = null;
                }
            }
        };

        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                if (key === "entityIndex") {
                    continue;
                }
                var value = data[key];
                if (!$IU.isArray(value)) {
                    addName(getFieldName(key));
                } else {
                    addName(getGroupName(key));

                    //都循环一遍，防止不同的行里所含数据不一致，造成漏算（这行数据下面还可能有重复节表的数据，那些数据的行数可能为0，此时只看第一行数据的结构就会产生漏算）
                    for (var i = 0, len = value.length; i < len; i++) {
                        var rowFieldNames = $IU.getFieldNamesFromFieldChangeData(value[i]);
                        mergeNames(rowFieldNames);
                    }
                }
            }
        }
        return names;
    };

    /**
     *   data 表单数据
     *   path 数据的PATH
     *   isNew 是否是新增的数据,用于重复节或者重复表
     *   如果是新增的不用setElementValue，因为创建重复节或行时候已经将新数据写到新创的控件上,但是再嵌套在内的repeat部分需要创建,如果是修改的数据则需要setElementValue
     */
    utilities.setFormData = function (data, path, isNew) {
        var fields = $$.entity.fields;
        var getField = function (name) {
            if (name.length > 0) {
                return fields["field" + name.substring(0, 1).toUpperCase() + name.substring(1)];
            }
            return null;
        };
        var getFieldName = function (name, fieldPath) {
            if (name.length > 0) {
                return "field" + name.substring(0, 1).toUpperCase() + name.substring(1) + (fieldPath !== undefined ? fieldPath : "");
            }
            return null;
        };
        var getGroupName = function (name, groupPath) {
            if (name.length > 0) {
                return "group" + name.substring(0, 1).toUpperCase() + name.substring(1) + groupPath;
            }
            return null;
        };


        //判断fieldName1是否是fieldName2的祖先
        var isParent = function (fieldName1, fieldName2) {
            if (fields[fieldName2] == null) {
                return false;
            }
            var parentField = fields[fieldName2]['parent'];
            var parents = [];

            while (parentField !== undefined) {
                parents.push(parentField);
                if (fieldName1 === parentField) {
                    return true;
                }
                if (fields[parentField] == null) {
                    return false;
                }
                parentField = fields[parentField]['parent'];
                if (parentField !== undefined && $IU.arrayContains(parents, parentField)) {
                    utilities.errorMessageBox($$.lt("validation.selfLoop", fieldName1));
                    return false;
                }

            }
            return false;
        };

        //根据父子关系排数据赋值的次序，祖先在前，子孙在后，重复节表数据排最后
        var reindexData = function (data) {
            var indexedData = [];
            var groupData = [];
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    if (key === "entityIndex") {
                        continue;
                    }
                    var value = data[key],
                        field = key,
                        newData = { key: field, value: value };
                    if ($IU.isArray(value)) {
                        groupData.push(newData);
                        continue;
                    }
                    for (var i = 0, len = indexedData.length; i < len; i++) {
                        var dataField = indexedData[i].key;
                        if (isParent(getFieldName(field), getFieldName(dataField))) {
                            //如果field是目前比较字段的祖先，那么将其插入到当前字段前面
                            indexedData.splice(i, 0, newData);
                            break;
                        }
                    }
                    //如果field不适任何已经在indexedData中的字段的祖先，那么就放到最后面
                    if (len === indexedData.length) {
                        indexedData.push({ key: field, value: value });
                    }
                }
            }
            return indexedData.concat(groupData);
        };

        //重新排序后，父字段会先赋值，引起儿子的setParent动作也就不会影响接下来儿子的赋值了
        var reIndexedData = reindexData(data);


        for (var i = 0, len = reIndexedData.length; i < len; i++) {
            var key = reIndexedData[i].key,
                value = reIndexedData[i].value;
            if (!$IU.isArray(value)) {
                if (!isNew) {
                    //不是新增的数据才设置值
                    var fieldName = getFieldName(key, path);
                    var field = getField(key);
                    if (fieldName != null && field != null) {
                        if ($IU.isString(value)) {
                            $IU.setElementValue(fieldName, value);
                            continue;
                        }
                        if (value.hasOwnProperty("codeId")) {
                            $IU.setElementValue(fieldName, value["codeId"], value["codeName"], value["attributes"]);
                            continue;
                        }
                        /*
                         if (value.hasOwnProperty("account")) {
                         $IU.setElementValue(fieldName, value["account"], value["trueName"]);
                         continue;
                         }
                         */

                        if (field.type === $Control.DATA_TYPE_CODE) {
                            $IU.setElementValue(fieldName, value["codeId"], value["codeName"], value["attributes"]);
                            continue;
                        }

                        $IU.setElementValue(fieldName, value);
                    }
                }
            } else {
                //是数组表示是重复节或者表的数据
                var groupDivName = getGroupName(key, path);
                if (groupDivName != null) {
                    var $groupDiv = $("#" + groupDivName);
                    if ($groupDiv.length > 0) {
                        var repeatParentElement = $groupDiv[0];
                        var repeatControl = $(repeatParentElement).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                        if (repeatControl != null) {
                            repeatControl.setData(value);

                            if ($$.params.fieldChanging != null) {
                                $$.params.fieldChanging.controls.push(repeatControl);
                            }
                        }
                    }
                }
            }
        }
    };

    //设置焦点
    utilities.setFocusToElement = function (elementName) {
        //如果是移动版就不必设置焦点了
        if ($$.MOBILE) return;
        var controlElements = document.getElementsByName(elementName);
        if (controlElements.length > 0) {
            var controlElement = controlElements[0];

            var setFocus = function () {
                var suggester = $(controlElement).data($Control.DATA_SUGGESTER);
                if (suggester != null) {
                    suggester.containerClick();
                } else {
                    try {
                        document.getElementById(controlElement.id).focus();
                    } catch (e) {
                    }
                }
            };

            var isIe = (navigator.appVersion.indexOf("MSIE") !== -1);
            if (isIe) {
                //ie we delay 1000ms,or it cannot setfocus
                setTimeout(setFocus, 1000);
            } else {
                setFocus();
            }
        }
    };

    //获取元素当前计算样式
    utilities.getComputedStyle = function (element, style) {
        if (element == null || style == null) return null;
        if (window.getComputedStyle != null) {
            var styles = window.getComputedStyle(element);
            return styles[style];
        } else {
            //ie8
            if (element.currentStyle != null) {
                return element.currentStyle[style];
            }
        }
        return null;
    };

    //触发click事件,element可以是一个dom元素或者一个id
    utilities.fireClick = function (element) {
        if (typeof element === "string") {
            element = document.getElementById(element);
        }
        if (!element) return;

        if (document.dispatchEvent) { // W3C
            var oEvent = document.createEvent("MouseEvents");
            oEvent.initMouseEvent("click", true, true, window, 1, 1, 1, 1, 1, false, false, false, false, 0, element);
            element.dispatchEvent(oEvent);
        } else if (document.fireEvent) { // IE
            element.click();
        }
    };

    //模拟浏览器打开一个链接
    utilities.openLink = function (url, inNewWindow) {
        var a = document.createElement("a");
        if (inNewWindow) {
            a.setAttribute("target", "_blank");
        } else {
            a.setAttribute("target", "_self");
        }
        a.setAttribute("href", url);
        document.body.appendChild(a);
        $IU.fireClick(a);
        document.body.removeChild(a);
    };


    //将属性以数组格式返回，不同属性可能以\n或\r\n分割
    utilities.splitAttribute = function (attrs) {
        if (attrs == null) return [];
        var s = attrs.split("\r\n");
        if (s.length === 1) {
            return attrs.split("\n");
        } else {
            return s;
        }
    };

    //判断searchStr是否以beginStr开始
    utilities.beginWith = function (searchStr, beginStr) {
        if (searchStr == null || searchStr === '' || beginStr == null || beginStr === '') {
            return false;
        }
        if (beginStr.length > searchStr.length) {
            return false;
        }
        return (searchStr.substr(0, beginStr.length) === beginStr);

    };

    //判断searchStr是否以endStr结束
    utilities.endWith = function (searchStr, endStr) {
        if (searchStr == null || searchStr === '' || endStr == null || endStr === '') {
            return false;
        }
        if (endStr.length > searchStr.length) {
            return false;
        }
        return (searchStr.lastIndexOf(endStr) === (searchStr.length - endStr.length));
    };

    utilities.checkControlValidation = function (controls, checkRequire, showMasterError) {
        //var $renderForm = $("#renderForm");

        var getCheckControl = function (checkControl) {
            if (checkControl instanceof InfoPlus.Controls.Suggester) {
                return $(checkControl.element).data($Control.DATA_SUGGESTER).activeInput;
            } else {
                if (checkControl instanceof InfoPlus.Controls.Control) {
                    return checkControl.element;
                } else {
                    return checkControl;
                }
            }
        };

        var showMasterErrorPrompt = function ($repeatRow) {
            //$repeatRow.data("detailError", true);
            if ($repeatRow.is(":visible")) {
                $repeatRow.validationEngine("showPrompt", $$.lt("validation.detailError"), null, "row", true);
                $repeatRow.data("showDetailError", true);
            }
        };

        var checkValid = function (chkCtrl) {
            var validator,
                $control = $(chkCtrl),
                inDetailCell = $control.parents(".detailCell").size() > 0;

            var id = "#" + $control[0].id;

            //如果不用检查必填，则将validator.required临时赋值为false
            if (!checkRequire) {
                if ($control.data($Control.DATA_ORIGIN_INPUT) != null) {
                    validator = $($control.data($Control.DATA_ORIGIN_INPUT)).data($Control.DATA_VALIDATOR);
                } else {
                    validator = $control.data($Control.DATA_VALIDATOR);
                }
                var oldValidatorRequired = validator.required;
                validator.required = false;

                if ($$.params.renderForm.validationEngine("validateField", id, (!inDetailCell || !showMasterError)) === true) {
                    validator.required = oldValidatorRequired;
                    if (inDetailCell && showMasterError) {
                        showMasterErrorPrompt($control.parents(".detailCell").parent());
                    }
                    return false;
                }
                validator.required = oldValidatorRequired;
            } else {
                if ($$.params.renderForm.validationEngine("validateField", id, (!inDetailCell || !showMasterError)) === true) {
                    if (inDetailCell && showMasterError) {
                        showMasterErrorPrompt($control.parents(".detailCell").parent());
                    }
                    return false;
                }
            }
            return true;
        };

        var retValue = true;
        for (var i = 0, len = controls.length; i < len; i++) {
            var control = getCheckControl(controls[i]);
            if (checkValid(control) === false) {
                retValue = false;
            }
        }
        return retValue;
    };


    utilities.clacImgZoomParam = function (maxWidth, maxHeight, width, height) {
        var param = { top: 0, left: 0, width: width, height: height };
        if (width > maxWidth || height > maxHeight) {
            var rateWidth = width / maxWidth,
                rateHeight = height / maxHeight;

            if (rateWidth > rateHeight) {
                param.width = maxWidth;
                param.height = Math.round(height / rateWidth);
            } else {
                param.width = Math.round(width / rateHeight);
                param.height = maxHeight;
            }
        }

        param.left = Math.round((maxWidth - param.width) / 2);
        param.top = Math.round((maxHeight - param.height) / 2);
        return param;
    };

    /**
     * 判断这个动态公式，样式，动作是否涉及到control(是否引用到)
     */
    utilities.dynamicReferControl = function (dynamic, control) {
        var controlFieldName = control.getDynamicKeyName();
        var controlName = control.getDynamicContextControlName();
        //公式，样式，动作的references是否包含字段名称或者这个字段对应的控件名称(fieldXXX or fieldXXXRef or groupXXX)
        return utilities.arrayContains(dynamic.references, controlFieldName) || utilities.arrayContains(dynamic.references, controlName);
    };

    /**
     * 滚动页面到某位置
     * @param top   滚动高度
     * @param time  滚动时间
     * @param callback 回调函数
     */
    utilities.scrollTo = function (top, time, callback) {
        $('html,body').animate({ scrollTop: top }, time, callback);
    };

    //将width数组按coefficient放大或者缩小
    utilities.adjustWidth = function (widths, total, coefficient) {
        var adjustTotal = 0;
        for (var i = 0, len = widths.length; i < len; i++) {
            widths[i] = Math.round(widths[i] * coefficient);
            adjustTotal += widths[i];
        }
        if (adjustTotal !== total) {
            var deltaAvg = Math.ceil((total - adjustTotal) / widths.length);
            for (i = 0, len = widths.length; i < len; i++) {
                if (total === adjustTotal) {
                    break;
                }
                if ((deltaAvg > 0 && deltaAvg < (total - adjustTotal)) || (deltaAvg < 0 && deltaAvg > (total - adjustTotal))) {
                    widths[i] += deltaAvg;
                    adjustTotal += deltaAvg;
                } else {
                    widths[i] += (total - adjustTotal);
                    adjustTotal = total;
                }
                if ((adjustTotal !== total) && i === (len - 1)) {
                    widths[i] += (total - adjustTotal);
                }
            }
        }
    };

    utilities.addVariableControl = function (name, value, displayValue, attributes) {
        if (value == null) {
            value = '';
        }
        var $variableHidden = $("#" + name);
        if ($variableHidden.length > 0) {
            var hiddenControl = $variableHidden.data($Control.DATA_CONTROL_OBJECT);
            if (hiddenControl != null) {
                hiddenControl.setValue(value, displayValue, true, attributes);
            }
        } else {
            var $variablesDiv = $("#variables_container");
            var fakeField = {
                name: name,
                type: displayValue == null ? $Control.DATA_TYPE_STRING : $Control.DATA_TYPE_CODE,
                permission: "rw"
            };
            var fakeRender = {
                renderCategory: "Boundable",
                controlId: name,
                field: name
            };
            hiddenControl = new $Controls.Hidden("", fakeField, fakeRender, value, displayValue, attributes);
            $variablesDiv.append(hiddenControl.element);
            if ($IU.beginWith(name, '_VAR_')) {
                $(hiddenControl.element).addClass($Control.CLASSNAME_VAR);
            }
        }
        return hiddenControl;
    };

    /**
     * 获取表单上(parentElement下属)所有控件，包括一般控件和repeat控件,view控件
     * @param parentElement
     */
    utilities.getAllControls = function (parentElement) {
        if (parentElement === undefined) {
            parentElement = $$.params.renderForm;
        }
        var controls = [];
        $(parentElement).find("." + $Control.CLASSNAME_CONTROL + ",." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_PARENT_ELEMENT + ",." + InfoPlus.Layout.View.CLASS_VIEW).each(function () {
            var control = $(this).data($Control.DATA_CONTROL_OBJECT);
            if (control == null) {
                control = $(this).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                if (control == null) {
                    control = $(this).data(InfoPlus.Layout.View.DATA_CONTROL_OBJECT);
                    if (control == null) {
                        return;
                    }
                }
            }
            controls.push(control);
        });
        return controls;
    };

    /**
     * 检查是否path包含了includePath
     */
    utilities.pathInclude = function (path, includePath) {
        var pa = path.split('_'),
            ipa = includePath.split('_');
        if (ipa.length > pa.length) return false;
        for (var i = 0, len = ipa.length; i < len; i++) {
            if (ipa[i] !== pa[i]) return false;
        }
        return true;
    };

    /**
     * 处理url,使其带上back,membership,showRemark,theme,jsTestFile,lang,entrust参数
     */
    utilities.processUrl = function (url, skipParamName) {
        var containParameter = function (param) {
            return url.indexOf("&" + param + "=") !== -1 || url.indexOf("?" + param + "=") !== -1;
        };

        var addParam = function (paramName, urlName) {
            if (skipParamName === paramName) return;
            if (urlName === undefined) {
                urlName = paramName;
            }
            if ($$.params[paramName] != null && $$.params[paramName] !== '' && !containParameter(urlName)) {
                //back参数需要特殊处理
                if (paramName === "back") {
                    //如果back参数是正整数，就+1以后拼接到url上
                    if ($IU.isPositiveInt($$.params.back)) {
                        url += ((url.indexOf("?") !== -1) ? "&" : "?") + urlName + "=" + (parseInt($$.params.back, 10) + 1);
                    } else {
                        //back参数是回退url
                        url += ((url.indexOf("?") !== -1) ? "&" : "?") + urlName + "=" + encodeURIComponent($$.params[paramName]);
                    }
                } else {
                    url += ((url.indexOf("?") !== -1) ? "&" : "?") + urlName + "=" + encodeURIComponent($$.params[paramName]);
                }
            }

        };

        if ($$.getTestFile() != null) {
            url += ((url.indexOf("?") !== -1) ? "&" : "?") + "jsTestFile=" + $$.getTestFile();
        }

        addParam("back");
        addParam("membership");
        addParam("showRemark");
        addParam("theme");
        addParam("urlLang", "lang");
        addParam("entrust");

        return url;
    };

    /**
     * 从url上获取参数，组装成一个{}对象
     */
    utilities.getParamFromUrl = function (url) {
        var result = {};
        if (!utilities.isString(url) || url == null) return result;

        var paramStrings = [];
        var s = url.split("?");
        if (s.length > 1) {
            paramStrings = s[0].split("#").concat(s[1].split("#"));
            paramStrings.splice(0, 1);
        } else {
            paramStrings = s[0].split("#");
        }

        for (var i = 0, len = paramStrings.length; i < len; i++) {
            var ps = paramStrings[i].split("&");
            for (var pi = 0, pl = ps.length; pi < pl; pi++) {
                var nv = ps[pi].split("=");
                if (nv.length === 2) {
                    result[nv[0]] = decodeURIComponent(nv[1]);
                }
            }
        }
        return result;

    };

    /**
     * 打开一个链接
     * @param url
     * @param linkAppendToElement 不填就是body
     * @param target 不填就是self
     */
    utilities.openUrl = function (url, linkAppendToElement, target) {
        var link = document.createElement("a");
        link.href = url;
        link.target = (target === undefined ? "_self" : target);
        $(link).css("display", "none");
        if (linkAppendToElement != null) {
            $(linkAppendToElement).append(link);
        } else {
            $(document.body).append(link);
        }
        $IU.fireClick(link);
    };

    /**
     * 取屏幕窗口宽度，之所以要这么取是发现有时候浏览器过慢，会造成$(window).width()取出来是0
     * 实在取不到就取window.screen.width,在移动版这是手机宽度，在pc版这是桌面宽度
     */
    utilities.getWindowWidth = function () {
        var width = $(window).width();
        if (width === 0) {
            width = window.outerWidth;
        }
        if (width === 0) {
            width = window.screen.width;
        }
        return width;
    };


    /**
     * 获取打印一维码的url，如果没有width,isTextDrawn，那么就加上缺省的，如果有就不用处理了，将%s用一维码的内容替换
     */
    utilities.getBarcodePrintUrl = function (value) {
        if (value == null || value === "") return null;
        var url = $$.params.uriBarcode;
        if (url == null) return null;

        var DEFAULT_PRINT_PARAM_TEXT = 1,
            DEFAULT_PRINT_PARAM_WIDTH = 300;

        var paramString = url.split("?");
        if (paramString.length > 1) {
            var params = paramString[1].split("&");
            url = paramString[0] + "?";
            var foundWidth = false,
                foundText = false;
            for (var i = 0, len = params.length; i < len; i++) {
                var p = params[i].split("=");
                if (p.length > 1) {
                    if (p[0].toLocaleLowerCase() === "width") {
                        foundWidth = true;
                    }
                    if (p[0] === "isTextDrawn") {
                        foundText = true;
                    }
                }
                url += (i === 0) ? params[i] : "&" + params[i];
            }
            if (!foundWidth) {
                url += "&width=" + DEFAULT_PRINT_PARAM_WIDTH;
            }
            if (!foundText) {
                url += "&isTextDrawn=" + DEFAULT_PRINT_PARAM_TEXT;
            }
        } else {
            url = url + "?isTextDrawn=" + DEFAULT_PRINT_PARAM_TEXT + "&width=" + DEFAULT_PRINT_PARAM_WIDTH;
        }

        return url.replace("%s", value);
    };


    /**
     * 分析table,获取每个td的实际坐标（排除rowspan,colspan因素），存放在$td.data("rawTdIndex")里
     */
    utilities.analysisTable = function ($row) {
        var $table = $row.closest("table"),
            $trs = $row.parent().children("tr");
        if ($table.data("analysed") == null) {
            for (var trIndex = 0, trLen = $trs.size(); trIndex < trLen; trIndex++) {
                var $tr = $($trs[trIndex]),
                    $tds = $tr.children('td');
                for (var tdIndex = 0, tdLen = $tds.size(); tdIndex < tdLen; tdIndex++) {
                    var $td = $($tds[tdIndex]);

                    if ($td.attr("colspan") != null) {
                        var fakeCount = parseInt($td.attr("colspan"), 10) - 1;
                        for (var i = 0; i < fakeCount; i++) {
                            var fakeTd = document.createElement("td");
                            $(fakeTd).addClass("fake").css("display", "none");
                            $td.after(fakeTd);
                        }
                    }
                    if ($td.attr("rowspan") != null) {
                        var rowCount = parseInt($td.attr("rowspan"), 10) - 1;
                        fakeCount = $td.attr("colspan") != null ? parseInt($td.attr("colspan"), 10) : 1;

                        for (var rowIndex = 1; rowIndex <= rowCount; rowIndex++) {
                            if (trIndex + rowIndex < $trs.size()) {
                                var $nextTr = $($trs[trIndex + rowIndex]);
                                if ($td.index() > 0) {
                                    for (i = 0; i < fakeCount; i++) {
                                        fakeTd = document.createElement("td");
                                        $(fakeTd).addClass("fake").css("display", "none");
                                        var insertAfterIndex = $td.index() - 1,
                                            $nextTds = $nextTr.children("td");
                                        for (var nextTdIndex = 0, totalIndex = 0, nextTdLen = $nextTds.size(); nextTdIndex < nextTdLen; nextTdIndex++) {
                                            var $nextTd = $($nextTds[nextTdIndex]);
                                            if (totalIndex === insertAfterIndex) {
                                                $nextTd.after(fakeTd);
                                                break;
                                            } else {
                                                if ($nextTd.attr("colspan") != null) {
                                                    totalIndex += parseInt($nextTd.attr("colspan"), 10) - 1;
                                                }
                                            }
                                            totalIndex++;
                                        }
                                    }
                                } else {
                                    for (i = 0; i < fakeCount; i++) {
                                        fakeTd = document.createElement("td");
                                        $(fakeTd).addClass("fake").css("display", "none");
                                        $nextTr.prepend(fakeTd);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            $trs.each(function () {
                var log = $(this).index() + ":";
                $(this).children("td").each(function () {
                    log += $(this).index();
                    $(this).data("rawTdIndex", $(this).index());
                });
                $(this).children("td.fake").remove();
            });

            $table.data("analysed", true);
        }
    };

    /**
     * 处理rowVisible
     */
    utilities.processTrRowVisible = function ($row, isVisible, fromInit) {

        //根据$td的rowspan，从nextRows中移除以前添加出来的fake的td
        var removeNextRowsFakeTd = function ($nextRows, $td) {
            var affectRowCount = parseInt($td.attr("rowspan"), 10) - 1,
                rawIndex = $td.data("rawTdIndex"),
                nextRowNumber = 0,
                rowIndex = 0;

            while (nextRowNumber < affectRowCount && rowIndex < $nextRows.size()) {
                var $nextRow = $($nextRows[rowIndex]),
                    $nextRowTds = $nextRow.children("td");
                for (var tdIndex = 0, tdLen = $nextRowTds.size(); tdIndex < tdLen; tdIndex++) {
                    var $nextRowTd = $($nextRowTds[tdIndex]);
                    if ($nextRowTd.data("rawTdIndex") === rawIndex && $nextRowTd.hasClass("fake")) {
                        $nextRowTd.remove();
                    }
                }
                if (!$nextRow.hasClass("fake")) {
                    nextRowNumber++;
                }
                rowIndex++;
            }
        };

        //将当前操作行后面第一个可见行和之前的所有不可见行插入fake的td
        var processNextRows = function () {

            var foundFirstVisible = false,
                nextRows = [];
            //查找所有$row后面的row直到找到第一个可见行，这里没有用$row.nextAll("tr:visible:not(.fake)")来直接找是因为
            //初始化时候都不可见，用这个selector无效
            //需要将第一个可见行前所有不可见的行也插入fake的td是因为以后这些隐藏的行可能先于当前操作的行先显示出来，当显示时候需要有fake的有rowspan的td
            $row.nextAll("tr:not(.fake)").each(function () {
                if (!foundFirstVisible) {
                    nextRows.push($(this));
                    if ($(this).css("display") !== "none") {
                        foundFirstVisible = true;
                    }
                }
            });

            var $tds = $row.children("td");
            for (var i = 0, len = $tds.size(); i < len; i++) {
                var $td = $($tds[i]);
                if ($td.attr("rowspan") != null) {
                    insertNextRowFakeTd($td, nextRows);
                }
            }
        };

        //根据$td的rowspan，在nextRows中增加fake的td
        var insertNextRowFakeTd = function ($td, nextRows) {

            var appendTdToRow = function ($row, rowspanCount) {
                var $cloneTd = $td.clone();
                $cloneTd.attr("rowspan", rowspanCount);
                $cloneTd.data("rawTdIndex", $td.data("rawTdIndex"));
                $cloneTd.addClass("fake");
                var rawIndex = $td.data("rawTdIndex");

                var $nextTds = $row.children("td");
                for (var i = 0, len = $nextTds.size(); i < len; i++) {
                    var $nextTd = $($nextTds[i]);
                    if ($nextTd.data("rawTdIndex") != null) {
                        if ($nextTd.data("rawTdIndex") > rawIndex) {
                            $nextTd.before($cloneTd);
                            return;
                        }
                    }
                }
                $row.append($cloneTd);
            };

            var rowspanCount = parseInt($td.attr("rowspan"), 10);

            for (var rowIndex = 0, rowLen = nextRows.length; rowIndex < rowLen; rowIndex++) {
                if (rowspanCount > 1) {
                    var $nextRow = nextRows[rowIndex];
                    appendTdToRow($nextRow, --rowspanCount);
                }
            }

        };

        var processPrevRowsBorderBottom = function ($row, visible) {
            var prevNumber = 1;
            $row.prevAll("tr").not(".fake").each(function () {
                $(this).children("td").each(function () {
                    var $td = $(this);
                    var rowAffectNumber = $td.attr("rowspan") == null ? 1 : parseInt($td.attr("rowspan"), 10);
                    if (prevNumber === rowAffectNumber) {
                        if (visible) {
                            if ($td.data("oldBorderBottomStyle") != null) {
                                $td.css("border-bottom-style", $td.data("oldBorderBottomStyle"));
                            }
                        } else {
                            if ($td.data("oldBorderBottomStyle") == null) {
                                $td.data("oldBorderBottomStyle", $td.css("border-bottom-style"));
                            }
                            $td.css("border-bottom-style", "none");
                        }

                    }
                });
                prevNumber++;
            });
        };

        var insertFakeRow = function ($row) {
            var $fakeRow = $row.clone();
            $fakeRow.children("td").removeAttr("rowspan").css("border-width", "0").css("border-style", "none").css("padding", "0").empty();
            $fakeRow.addClass("fake").removeClass(InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_TABLE_ROW);
            //如果有min-height，那么在fake的tr里去掉这个css,防止ie里面fakeRow会有高度
            if ($fakeRow.css("min-height") != null) {
                $fakeRow.css("min-height", "");
            }
            //去除display
            if ($fakeRow.css("display") != null) {
                $fakeRow.css("display", "");
            }
            $row.before($fakeRow);
        };


        if ($row.closest("table").data("analysed") == null) {
            $IU.analysisTable($row);
        }

        //如果row是tr, 移除该tr时候如果有td存在rowspan,排版会出现问题
        //解决方案是
        //1 如果该TR不是第一行，那么增加一个假的tr，其高度为0，其内部td数量和移除的那个tr一致，并且将原本上面那行tr中所有td的border-bottom记下来
        //2 如果该TR是第一行，把带有rowspan的td所有内容加到下一行
        if (isVisible) {
            if ($row.css("display") === "none") {
                if ($row.prev("tr").size() > 0) {
                    //移除上一个fake行
                    $row.prev("tr.fake").remove();
                    //恢复border-bottom
                    //processPrevRowsBorderBottom($row, true);
                }
                var $nextRows = $row.nextAll("tr");
                $row.children("td").each(function () {
                    if ($(this).attr("rowspan") != null) {
                        removeNextRowsFakeTd($nextRows, $(this));
                    }
                });
            }
            $row.show();
            $row.removeData("visible");
            //如果显示的行是最后一行
            /*
             if ($row.nextAll("tr:visible:not(.fake)").size() == 0) {
             //将原本的最后一行恢复旧下底边框之前被替换的下底边框样式恢复
             $row.prevAll("tr:visible:not(.fake)").last().children("td").each(function () {
             if ($(this).data("oldBorderBottomStyleBeforeReplace") != null) {
             $(this).css("border-bottom-style", $(this).data("oldBorderBottomStyleBeforeReplace"));
             }
             });
             //上一行不可见（原先上一行隐藏时候因为是最后一个可见行，所以没有去除能影响到这行td的border-bottom,现在补充执行）
             var $prevRow = $row.prev("tr");
             if ($prevRow.css("display") == "none") {
             processPrevRowsBorderBottom($prevRow, false);
             }
             }
             */
        } else {
            //初始化时候$row.is(":visible")总是返回false,所以初始化时候不能用这个条件判断tr是否已经被隐藏了
            //if ($row.is(":visible") || fromInit) {
            //这个判断其实是为了不多增fake行，多增可能是由于一行上的多个控件都被设置了rowVisible,或者option控件本身会执行多遍
            //那么其实可以自己在row上面打标志来表示是否已经增加过fake行
            if ($row.data("visible") !== false) {
                //如果不是最后一个可见行,去除上面行能影响到这行的td的border-bottom
                /*
                 if (fromInit) {
                 var foundNextVisibleRow = false;
                 $row.nextAll("tr:not(.fake)").each(function () {
                 if ($(this).css("display") != "none") {
                 foundNextVisibleRow = true;
                 }
                 });
                 if (foundNextVisibleRow) {
                 processPrevRowsBorderBottom($row, false);
                 }
                 } else {
                 if ($row.nextAll("tr:visible:not(.fake)").size() > 0) {
                 processPrevRowsBorderBottom($row, false);
                 }
                 }
                 */
                //不是第一行，需要制造一个fake行
                if ($row.prev("tr").size() > 0) {
                    insertFakeRow($row);
                }
                processNextRows();

            }

            $row.hide();
            $row.data("visible", false);

            /*
             var processBottomBorder = function ($td) {
             if ($td.data("oldBorderBottomStyle") != null) {
             $td.data("oldBorderBottomStyleBeforeReplace", $td.css("border-bottom-style"));
             $td.css("border-bottom-style", $td.data("oldBorderBottomStyle"));
             }
             };
             //将表格显示的最后一行不是fake的行的下边框恢复为旧值
             if (!fromInit) {
             $row.parent().children("tr:visible:not(.fake)").last().children("td").each(function () {
             processBottomBorder($(this));
             });
             } else {
             var $siblings = $row.parent().children("tr:not(.fake)");
             for (var i = $siblings.length - 1; i >= 0; i--) {
             var $currentRow = $($siblings[i]);
             //找到倒数的第一行显示的行
             if ($currentRow.css("display") != "none") {
             $currentRow.children("td").each(function () {
             processBottomBorder($(this));
             });
             break;
             }
             }
             }
             */
        }
    };

    /**
     * 将平面化的表单数据转换成表单数据对象
     * @param data
     */
    utilities.convertData = function (data) {

        //返回排序的keys，目的是让_Name,_Attr排在原字段之后
        var getKeys = function () {
            var keys = [];
            for (var key in data) {
                if (data.hasOwnProperty(key) && !isGroup(key)) {
                    keys.push(key);
                }
            }
            keys.sort();
            return keys;
        };

        var isGroup = function (fieldName) {
            return $$.entity.groups.hasOwnProperty(fieldName);
        };

        var isAttr = function (fieldName) {
            return $IU.endWith(fieldName, "_Attr");
        };

        var isCode = function (fieldName) {
            return $IU.endWith(fieldName, "_Code") || $IU.endWith(fieldName, "_code");
        };

        var isCodes = function (fieldName) {
            return $IU.endWith(fieldName, "_Codes") || $IU.endWith(fieldName, "_codes");
        };

        var isName = function (fieldName) {
            return $IU.endWith(fieldName, "_Name") || $IU.endWith(fieldName, "_name");
        };

        var isNames = function (fieldName) {
            return $IU.endWith(fieldName, "_Names") || $IU.endWith(fieldName, "_names");
        };

        var findField = function (fieldName) {
            if (isAttr(fieldName) || isName(fieldName)) {
                fieldName = fieldName.substr(0, fieldName.length - 5);
            }
            return $$.entity.fields[fieldName];
        };

        var findFieldName = function (fieldName) {
            var field = findField(fieldName);
            return (field == null) ? null : field['name'];
        };

        var setCode = function (dat, fieldName, value) {
            if (dat[fieldName] == null) {
                dat[fieldName] = { value: value };
            } else {
                if ($IU.isObject(dat[fieldName])) {
                    dat[fieldName]['value'] = value;
                } else {
                    dat[fieldName] = { value: value };
                }
            }
        };

        var setCodes = function (dat, fieldName, value) {
            var codes = $IU.splitAttribute(value);
            if (dat[fieldName] != null) {
                if (!$IU.isArray(dat[fieldName])) {
                    dat[fieldName] = [];
                }
                for (var i = 0, len = codes.length; i < len; i++) {
                    if (dat[fieldName][i] == null) {
                        dat[fieldName][i] = { value: codes[i] };
                    } else {
                        if ($IU.isObject(dat[fieldName][i])) {
                            dat[fieldName][i]['value'] = codes[i];
                        } else {
                            dat[fieldName][i] = { value: codes[i] };
                        }
                    }
                }
            } else {
                dat[fieldName] = [];
                for (i = 0, len = codes.length; i < len; i++) {
                    dat[fieldName].push({ value: codes[i] });
                }
            }
        };

        var setNames = function (dat, fieldName, value) {
            var names = $IU.splitAttribute(value);
            if (dat[fieldName] != null) {
                if (!$IU.isArray(dat[fieldName])) {
                    dat[fieldName] = [];
                }
                for (var i = 0, len = names.length; i < len; i++) {
                    if (dat[fieldName][i] == null) {
                        dat[fieldName][i] = { name: names[i] };
                    } else {
                        if ($IU.isObject(dat[fieldName][i])) {
                            dat[fieldName][i]['name'] = names[i];
                        } else {
                            dat[fieldName][i] = {
                                value: dat[fieldName][i],
                                name: names[i]
                            };
                        }
                        //dat[fieldName][i]['name'] = names[i];
                    }
                }
            } else {
                dat[fieldName] = [];
                for (i = 0, len = names.length; i < len; i++) {
                    dat[fieldName].push({ name: names[i] });
                }
            }
        };

        var setCodeName = function (dat, fieldName, value) {
            if (dat[fieldName] != null) {
                if ($IU.isObject(dat[fieldName])) {
                    dat[fieldName]['name'] = value;
                } else {
                    //var oldValue = dat[fieldName];
                    dat[fieldName] = {
                        value: dat[fieldName],
                        name: value
                    };
                }
            }
            /*
             else {
             dat[fieldName] = {
             name: value
             }
             }
             */
        };

        var setCodeAttr = function (dat, fieldName, value) {

            var processAttr = function () {
                var attr = {},
                    obj = $.parseJSON(value);
                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        if (isCode(key)) {
                            var propName = key.substr(0, key.length - 5);
                            setCode(attr, propName, obj[key]);
                            continue;
                        }
                        if (isName(key)) {
                            propName = key.substr(0, key.length - 5);
                            setCodeName(attr, propName, obj[key]);
                            continue;
                        }
                        if (isNames(key)) {
                            propName = key.substr(0, key.length - 6);
                            setNames(attr, propName, obj[key]);
                            continue;
                        }
                        if (isCodes(key) || (obj.hasOwnProperty(key + "_Names") || obj.hasOwnProperty(key + "_names"))) {
                            propName = isCodes(key) ? key.substr(0, key.length - 6) : key;
                            setCodes(attr, propName, obj[key]);
                            continue;
                        }
                        if (obj.hasOwnProperty(key + "_Name") || obj.hasOwnProperty(key + "_name")) {
                            setCode(attr, key, obj[key]);
                            continue;
                        }

                        attr[key] = obj[key];
                    }
                }

                return attr;
            };


            if (dat[fieldName] != null) {
                if ($IU.isObject(dat[fieldName])) {
                    dat[fieldName]['attributes'] = processAttr();
                } else {
                    //var oldValue = dat[fieldName];
                    dat[fieldName] = {
                        value: dat[fieldName],
                        attributes: processAttr()
                    };
                }
            }
            /*
             else {
             dat[fieldName] = {
             attributes: processAttr()
             }
             }
             */
        };

        var setValue = function (dat, field, fieldName, value) {
            //只有以下四种数据类型才记录name,attr
            var fieldSupportNameAttr = (field.type === 'User' || field.type === 'Organize' || field.type === 'Code' || field.type === 'Thing');
            var isFieldName = fieldSupportNameAttr && isName(fieldName),
                isFieldAttr = fieldSupportNameAttr && isAttr(fieldName);
            if (!isFieldAttr && !isFieldName) {
                if (dat[fieldName] != null && $IU.isObject(dat[fieldName])) {
                    dat[fieldName]['value'] = value;
                } else {
                    dat[fieldName] = value;
                }
            } else {
                fieldName = findFieldName(fieldName);
                if (isFieldName) {
                    setCodeName(dat, fieldName, value);
                }
                if (isFieldAttr) {
                    setCodeAttr(dat, fieldName, value);
                }
            }
        };

        //全局变量需要考虑_Name,_Attr,_Codes,_Names
        var setGlobalVarValue = function (dat, fieldName, value) {
            var isFieldName = isName(fieldName),
                isFieldAttr = isAttr(fieldName),
                isFieldCodes = isCodes(fieldName),
                isFieldNames = isNames(fieldName);
            if (isFieldName || isFieldAttr) {
                fieldName = fieldName.substr(0, fieldName.length - 5);
                if (isFieldName) {
                    setCodeName(dat, fieldName, value);
                }
                if (isFieldAttr) {
                    setCodeAttr(dat, fieldName, value);
                }
                return;
            }
            if (isFieldCodes || isFieldNames) {
                fieldName = fieldName.substr(0, fieldName.length - 6);
                if (isFieldCodes) {
                    setCodes(dat, fieldName, value);
                }
                if (isFieldNames) {
                    setNames(dat, fieldName, value);
                }
                return;
            }
            if (dat[fieldName] != null && $IU.isObject(dat[fieldName])) {
                dat[fieldName]['value'] = value;
            } else {
                dat[fieldName] = value;
            }
        };


        var addValue = function (data, value, fieldName, group) {
            var isFieldName = isName(fieldName),
                isFieldAttr = isAttr(fieldName),
                field = findField(fieldName);

            var findNextGroup = function () {
                if (group == null) {
                    return field.groupArray[1];
                } else {
                    for (var i = 1, len = field.groupArray.length; i < len; i++) {
                        var groupName = field.groupArray[i];
                        if (group === groupName && i !== len - 1) {
                            return field.groupArray[i + 1];
                        }
                    }
                    return null;
                }
            };
            if (!$IU.isArray(value)) {
                setValue(data, field, fieldName, value);
            } else {
                var nextGroup = findNextGroup();
                if (data[nextGroup] == null) {
                    data[nextGroup] = [];
                }
                for (var i = 0, len = value.length; i < len; i++) {
                    if (data[nextGroup][i] == null) {
                        //如果是_Name,_Attr的字段那么不新增这个对象
                        //后台给出的数据可能原值不存在，但是_Name,_Attr却存在（实际上这时候说明这个字段的值不存在）
                        //这里加上这个判断用于在不给原值却给_Name值情况下不建立这个对象
                        if (!isFieldName && !isFieldAttr) {
                            data[nextGroup][i] = {};
                        }
                    }
                    var newData = data[nextGroup][i];
                    if (newData != null) {
                        addValue(newData, value[i], fieldName, nextGroup);
                    }
                }
            }
        };


        //将key排序
        var keys = getKeys(),
            d = {};
        for (var i = 0, len = keys.length; i < len; i++) {
            var key = keys[i],
                value = data[key],
                field = findField(key);
            //不是field，说明是全局参数，或者用户添加的变量
            if (field == null) {
                setGlobalVarValue(d, key, value);
            } else {
                //groupArray是processFields方法中预处理的，理论上不会没有
                var groupArray = field['groupArray'];
                if (groupArray == null) {
                    //加到根对象上
                    setValue(d, field, key, value);
                } else {
                    if (groupArray.length === 1) {
                        //加到根对象上
                        setValue(d, field, key, value);
                    } else {
                        addValue(d, value, key);
                    }
                }
            }
        }

        /*
         for (var key in data) {
         if (data.hasOwnProperty(key) && !isGroup(key)) {

         }
         }
         */
        return d;

    };

    //将文字中的http链接转换成为link，包括两种语法一种是wiki语法：[百度](http://baidu.com)，中括号中是链接文字，圆括号里面是链接地址
    //另一种语法是直接写http链接，产生的链接文字就是这个http地址
    utilities.linkifyStr = function (str) {
        //URLs starting with http://, https://
        //var pattern = /(\b(https?):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])\[([\u4e00-\u9fa5_A-Z0-9]+)\]/gim;
        //var pattern = /(\b(https?):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;

        var pattern = /\[([\u4e00-\u9fa5_A-Z0-9]+)\]\((\b(https?):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])\)/gim;


        if (str.match(pattern)) {
            return str.replace(pattern, '<a href="$2" target="_blank">$1</a>');
        } else {
            pattern = /(\b(https?):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
            return str.replace(pattern, '<a href="$1" target="_blank">$1</a>');
        }

    };


    utilities.createReviewPopTip = function (container, popper, data) {

        var containerDiv = document.createElement("div"),
            $containerDiv = $(containerDiv),
            contentDiv = document.createElement("div"),
            $contentDiv = $(contentDiv);
        $contentDiv.attr("contenteditable", "true").addClass("memo_input_div");
        /*
        $containerDiv.on("contextmenu", function () {
            return false;
        }).on("keydown", function (event) {
            if (event.ctrlKey && event.keyCode === 86) {
                return false;
            }
        });
        */

        if (data != null) {
            if (data.html != null) {
                $contentDiv.html(data.html);
            }
            if (data.remark != null) {
                $contentDiv.html($IU.htmlEncode(data.remark));
            }
        }

        $containerDiv.append(contentDiv);

        var tip = new InfoPlus.Render.PopTip({
            popper: popper,
            container: container,
            content: containerDiv,
            colorClass: 'remarkTip',
            placement: 'top',
            //location: 'bottom',
            location: 'top',
            unclearable: true,
            onMaximized: function () {
                popMenu.showMenuItems(["minimize", "remove"]);
            },
            onClose: $IU.refreshReviewByForm
        });

        var popMenu = new InfoPlus.Render.PopMenu({
            container: tip.element,
            items: [{
                id: "maximize",
                text: $$.lt("review.menu.maximize"),
                iconClass: "i-icon-triangle-up",
                initVisible: false,
                switchItems: ["minimize", "remove"],
                click: function () {
                    tip.maximize();
                    popMenu.show();
                }
            }, {
                id: "minimize",
                text: $$.lt("review.menu.minimize"),
                iconClass: "i-icon-triangle-down",
                switchItems: ["maximize"],
                click: function () {
                    tip.minimize();
                }
            }, {
                id: "remove",
                text: $$.lt("review.menu.remove"),
                iconClass: "i-icon-delete",
                click: function () {
                    tip.close(true);
                    //$IU.refreshReviewByForm();
                    //$IU.refreshFormReviews(true);
                }
            }]
        });
    };

    //用表单上的批注刷新$$.params.review及批注按钮上的提示
    utilities.refreshReviewByForm = function ($renderContainer) {
        var data = [];
        if ($renderContainer == null) {
            $renderContainer = $$.params.renderContainer;
        }
        $renderContainer.find(".memo_input_div").each(function () {
            if (utilities.trimString(this.innerText) !== '') {
                var tipControl = $(this).parents(".popTip").data("tipControl");
                var control = $(tipControl.options.popper).data($Control.DATA_CONTROL_OBJECT);
                if (control != null) {
                    //如果这个tip是因为收拢view而隐藏起来的，那么也需要计算在内
                    if (tipControl.isHideByShrinkView()) {
                        data.push({
                            field: control.field.name,
                            path: control.path,
                            remark: utilities.trimString(this.innerText),
                            html: this.innerHTML
                        });
                    } else {
                        if ((control.controlContainer != null && $(control.controlContainer).is(":visible")) || $(control.element).is(":visible")) {
                            data.push({
                                field: control.field.name,
                                path: control.path,
                                remark: utilities.trimString(this.innerText),
                                html: this.innerHTML
                            });
                        }
                    }
                }
            }
        });
        $$.params.review = data;
        $IU.refreshReviewButton(data.length);
    };

    //用$$.params.review刷新表单上的批注
    utilities.refreshFormReviews = function () {
        var total = 0;
        if ($$.params.review.length > 0) {
            for (var i = 0, len = $$.params.review.length; i < len; i++) {
                var review = $$.params.review[i];
                if (review.remark == null || review.remark === '') {
                    continue;
                }
                var $$control = $$("&" + review.field).filter({ path: review.path });
                if ($$control.length > 0) {
                    var control = $$control[0].control;
                    if ((control.controlContainer != null && $(control.controlContainer).is(":visible")) || $(control.element).is(":visible")) {
                        var popper = control.controlContainer || control.element;
                        $IU.createReviewPopTip($$.params.renderContainer[0], popper, review);
                        total++;
                    }
                }
            }
        }
        return total;
    };

    //刷新批注按钮外观，当有批注时候显示小红圆点，在提示tip中提示已经批注数量
    utilities.refreshReviewButton = function (total) {
        var reviewToolButton = $("#FormCommandReview").data("buttonControl");
        if (reviewToolButton != null) {
            if (total > 0) {
                reviewToolButton.mark();
                reviewToolButton.setTip($$.lt("review.buttonTip") + "<br>" + $$.lt("review.tipCount", total));
            } else {
                reviewToolButton.removeMark();
                reviewToolButton.setTip($$.lt("review.buttonTip"));
            }
        }
    };

    //创建表单上已经打的批注（本步骤存盘下来的批注，不是上一步别人提交的批注）
    utilities.createFormReviews = function (step) {
        //如果不可执行，那么就不用显示存盘下来的批注了
        if (!$$.params.readOnly && step != null && step.review != null) {
            var review;
            try {
                review = $.parseJSON(step.review);
            } catch (e) {
            }
            if (review != null && review['remarks'] != null && $IU.isArray(review['remarks'])) {
                $$.params.review = review['remarks'];
                var total = $IU.refreshFormReviews();
                $IU.refreshReviewButton(total);
            }
        }
    };

    utilities.getReviewData = function () {
        var data = $$.params.review;
        if (data == null) return null;
        if ($IU.isArray(data) && data.length > 0) {
            var remarks = [];
            for (var i = 0, len = data.length; i < len; i++) {
                remarks.push({
                    field: data[i].field,
                    path: data[i].path,
                    remark: data[i].remark
                });
            }
            return { remarks: remarks };
        } else {
            return null;
        }
    };

    utilities.clearStack = function () {
        utilities.stack = null;
    };

    utilities.pushStack = function (o) {
        if (utilities.stack == null) {
            utilities.stack = [];
        }
        utilities.stack.push(o);
    };

    utilities.popStack = function () {
        if (utilities.stack == null) {
            return null;
        } else {
            return utilities.stack.pop();
        }
    };

    //在打印页，如果一个view的高度为0，那么就删除这个view
    utilities.removePrintZeroHeightView = function () {
        if (!$$.PRINT) return;
        $$.params.holder.form.find(".infoplus_view").each(function () {
            if ($(this).find("table").first().height() === 0) {
                $(this).remove();
            }
        });
    };

    /**
     * 部分安卓手机调用String.localeCompare时会发生错误，为此打了这个补丁
     * catch中的代码只比较了第一个字符，用于粗略的排序
     */
    utilities.localeCompare = function (a, b) {
        try {
            return a.localeCompare(b);
        } catch (e) {
            a = a || "";
            b = b || "";
            if (a.length === 0 || b.length === 0) {
                if (a.length === b.length) return 0;
                return a.length === 0 ? -1 : 1;
            }
            return (a.charAt(0) === b.charAt(0)) ? 0 : (a.charAt(0) > b.charAt(0) ? 1 : -1);
        }
    };

    //移除结尾不必要的空div(只包含空格)，使这些空div不占高度
    utilities.processEmptyDiv = function (render, parentRenders) {

        /*
        这个版本是将空div一起移除
        //判断是否是叶子节点
        var isLeaf = function (render) {
            //没儿子节点或者只有一个没有儿子节点，且这个儿子节点没儿子
            return render.renders == null || render.renders.length === 0 ||
                (render.renders.length === 1 && (render.renders[0].renders == null || render.renders[0].renders.length === 0));
        };

        var isEmptyDiv = function (render) {
            if (render['renderType'] === 'DisplayText' && utilities.trimString(render['text']) === '') {
                return true;
            }
            if (render['renderType'] === 'LayoutDivision' && render.renders != null && render.renders.length === 1) {
                var child = render.renders[0];
                return child['renderType'] === 'DisplayText' && utilities.trimString(child['text']) === '';
            }
            return false;
        };
        */

        /*这个版本是将空格移除，同样也能使空div不占高度，从代码上这个版本更清晰*/
        var isLeaf = function (render) {
            return render.renders == null || render.renders.length === 0;
        };

        var isSpace = function (render) {
            return render['renderType'] === 'DisplayText' && utilities.trimString(render['text']) === '';
        };


        //逆序遍历每一个叶节点，找到空格叶节点就移除空格，找到第一个不为空格的叶节点就结束遍历
        if (isLeaf(render)) {
            //if (isEmptyDiv(render)) {
            if (isSpace(render)) {
                if (parentRenders != null) {
                    parentRenders.length = parentRenders.length - 1;
                }
                var o = utilities.popStack();
                if (o != null) {
                    utilities.processEmptyDiv(o.renders[o.index], o.renders);
                } else {
                    utilities.clearStack();
                }
            } else {
                //如果找到第一个不是空div的叶节点，那么结束遍历，移除空div工作完成
                utilities.clearStack();
            }
        } else {
            //将前len-1个叶节点压栈，处理最后一个(从最后一个开始遍历)
            for (var i = 0, len = render.renders.length; i < len - 1; i++) {
                utilities.pushStack({
                    index: i,
                    renders: render.renders
                });
            }
            utilities.processEmptyDiv(render.renders[render.renders.length - 1], render.renders);
        }


    };

    /**
     * 处理步骤名称
     */
    utilities.processStepName = function (stepName) {
        return "<span class='color_b2'>" + stepName + "</span>";
    };


    /**
     * 查询后续步骤人员列表
     * @param actionId
     * @param hideConfirmWhenNoNextStep
     */
    utilities.listSteps = function (actionId, hideConfirmWhenNoNextStep) {
        var defer = $.Deferred();

        if (actionId == null) {
            return defer.reject({ error: $$.lt("submit.needAction") });
        }


        // distinguish endStep from manual ones.
        var distinguishSteps = function (steps) {
            // if workflow is joining, there must be no any mannual steps or auto step
            // currently useless.
            // by marstone, 2011/07/26
            //var waitingJoin = true;
            var endStep = null;
            if (null != steps && 0 < steps.length) {
                //waitingJoin = false;
                for (var i = 0; i < steps.length; i++) {
                    var step = steps[i];
                    if (step.type === InfoPlus.Settings.STEP_TYPE_AUTO) {
                        endStep = step;
                        steps.splice(i, 1);
                        break;
                    }
                }
            }
            return endStep;
        };

        var data = $$.params.formRender.save(null, false);

        var jsonData = $.toJSON(data);


        $$.blockUI({ message: "<span class='loading'>" + $$.lt("submit.prepare") + "</span>" });

        $$.ajax({
            type: "POST",
            url: $$.params.uriListNextSteps,
            data: {
                stepId: $$.params.formStepId == null ? -1 : $$.params.formStepId,
                actionId: actionId,
                formData: jsonData,
                timestamp: $$.params.timestamp,
                rand: Math.random() * 999,
                boundFields: $$.params.boundFields.toString()
            },
            requestMsg: $$.lt("submit.request"),
            errorTitle: "",
            beforeShowErrorMsg: function () {
                $.unblockUI();
            }
        }).always(function () {
            $.unblockUI();
        }).done(function (result) {
            var steps = result.entities,
                len = steps.length,
                skipSelectUser = false,
                endStep = distinguishSteps(steps);

            if (endStep == null && len > 0) {
                //如果所有后继步骤都是强制不选人，那么就不弹出选人对话框(skipSelectUser=true)
                skipSelectUser = true;
                for (var i = 0; i < len; i++) {
                    if (steps[i].executorSelection !== 3) {
                        skipSelectUser = false;
                        break;
                    }
                }
            } else {
                //后续步骤是结束(endStep!=null)或者无后续步骤(len===0)时，如果勾选了无后续步骤时隐藏确认框，那么就不弹出选人确认框
                skipSelectUser = hideConfirmWhenNoNextStep;
            }


            //备注的初值是通过error传过来的...
            if (skipSelectUser === true) {
                defer.resolve({ showSelectUser: false, steps: [], jsonData: jsonData, remark: result.error });
            } else {
                defer.resolve({
                    showSelectUser: true,
                    steps: steps,
                    isEndStep: endStep != null,
                    jsonData: jsonData,
                    remark: result.error
                });
            }
        }).fail(function (error) {
            defer.reject(error);
        });

        return defer.promise();
    };

    //关闭所有doc控件的iframe（在还有doc控件开着编辑状态时，提交会报错）
    //iframe关闭后office365服务器会调用原来打开时注册的回调函数(infoplus后端注册)，infoplus后端会将文件从office服务器取一次存回fileApi
    utilities.closeAllDoc = function () {
        var closed = false;
        $$("*doc").each(function () {
            var docControl = this.control;
            if (docControl.hasFile() && (docControl.isWritable() || docControl.isEditable())) {
                docControl.closeIframe();
                closed = true;
            }
        });
        return closed;
    };

    //重新打开所有在提交前关闭的doc控件的iframe
    utilities.reopenAllDoc = function () {
        $$("*doc").each(function () {
            var docControl = this.control;
            docControl.reopenIframe();
        });
    };

    /**
     * 显示提交选人对话框
     * @param $button           提交按钮
     * @param listUserResult
     * @returns {boolean}
     */
    utilities.showDoAction = function ($button, listUserResult) {
        var title = $button.children("nobr").text(),
            description = $button.data("description"),
            //initRemark = $button.data("lastRemark") !== "" ? $button.data("lastRemark") : listUserResult.remark,
            initRemark = $IU.isEmptyStr(listUserResult.remark) ? $button.data("lastRemark") : listUserResult.remark,//现在的逻辑是如果有默认备注值就用默认的，否则用上次用户填的
            remarkRequired = $button.data("remarkRequired"),
            remarkRequiredTip = $button.data("remarkRequiredTip"),
            actionPrintable = $button.data("actionPrintable"),
            actionId = $button.data("actionId"),
            jsonData = listUserResult.jsonData,
            steps = listUserResult.steps,
            isEndStep = listUserResult.isEndStep,
            $formDoActionRemark = $("#form_do_action_remark"),
            $formDoActionDialog = $("#form_do_action_dialog");

        //读取是否必须输入备注
        var mustInputRemark = remarkRequired == null ? false : remarkRequired;
        var remarkTip = $IU.trimString(remarkRequiredTip);
        if (remarkTip == null || remarkTip === "") {
            remarkTip = "*";
        }

        //目前看这段代码不可能执行到
        if (actionId == null) {
            $IU.messageBox(null, $$.lt("submit.noAction"), null, 300);
            return false;
        }

        var $showRemark = $("#form_do_action_show_remark"),
            $remarkTip = $("#form_do_action_remark_tip"),
            $remarkDiv = $("#form_do_action_remark_div");
        $showRemark.empty().html("<span class='form_do_action_info ui-icon ui-icon-info'></span><span>" + $$.lt("submit.clickComment") + "</span>" +
            "<a href='#' class='show_comment'>" + $$.lt("submit.linkComment") + "</a><span>" + $$.lt("submit.orComment") + "</span>" +
            "<a class='make_remark' href='#'>" + $$.lt("submit.makeRemark") + "</a><span class='form_do_action_remark_made'></span><span>" + $$.lt("submit.remarkInForm") + "</span></span>");

        $(".form_do_action_next_steps").html($$.lt("submit.nextSteps"));

        if (initRemark != null) {
            $formDoActionRemark.val(initRemark);
        } else {
            $formDoActionRemark.val("");
        }

        if (remarkRequired === true) {
            $remarkTip.html($$.lt("submit.inputRemark") + "<span>" + $$.lt("submit.orComment") + "</span><a href='#' class='make_remark'>" + $$.lt("submit.makeRemark") + "</a><span class='form_do_action_remark_made'></span><span>" + $$.lt("submit.remarkInForm") + "</span><span style=\"color:red\">(" + remarkTip + ")</span><span class=\"form_do_action_must_input_remark\" style=\"display:none\">" + $$.lt("submit.mustInputRemark") + "</span>");
        } else {
            $remarkTip.html($$.lt("submit.inputRemark"));
        }


        if (!$IU.isEmptyStr($button.data("lastRemark")) && !$IU.isEmptyStr(listUserResult.remark) && ($button.data("lastRemark") !== listUserResult.remark)) {
            if ($remarkDiv.find(".hint_div").length === 0) {
                var hintDiv = document.createElement("div"),
                    $hintDiv = $(hintDiv),
                    hintLink = document.createElement("a"),
                    $hintLink = $(hintLink);

                $hintDiv.addClass("hint_div");
                $hintLink.attr("href", "#").text($$.lt("submit.lastRemark")).addClass("last_remark_link");
                $hintLink.attr("original-title", $IU.htmlEncode($button.data("lastRemark")));
                $hintDiv.html($$.lt("submit.lastRemarkDiff", $hintLink[0].outerHTML));
                $remarkDiv.append(hintDiv);
                $hintLink = $hintDiv.find(".last_remark_link");
                $hintLink.tipsy({
                    html: true,
                    fade: true,
                    gravity: 'n',
                    trigger: 'manual',
                    opacity: 0.8
                }).data("lastRemark", $button.data("lastRemark")).data("copied", false).click(function () {
                    if (!$$.MOBILE) {
                        $(this).tipsy("show");
                    }
                    if (!$(this).data("copied")) {
                        $formDoActionRemark.val($formDoActionRemark.val() + "\n" + $button.data("lastRemark"));
                        $(this).data("copied", true);
                    }
                });
                if (!$$.MOBILE) {
                    $hintLink.mouseenter(function () {
                        $(this).tipsy("show");
                    }).mouseleave(function () {
                        $(this).tipsy("hide");
                    });
                }
            } else {
                $remarkDiv.find(".last_remark_link").attr("original-title", $IU.htmlEncode($button.data("lastRemark"))).data("copied", false);
                $remarkDiv.find(".hint_div").show();
            }
        } else {
            $remarkDiv.find(".hint_div").hide();
        }

        if ($$.params.review != null && $$.params.review.length > 0) {
            $(".form_do_action_remark_made").html($$.lt("submit.remarkDone", $$.params.review.length));
        }

        //if (remarkRequired === true || (initRemark != null && initRemark !== '')) {
        if (remarkRequired === true) {
            $showRemark.hide();
            $remarkDiv.show();
        } else {
            if (initRemark != null && initRemark !== '') {
                $showRemark.show();
                $remarkDiv.show();
            } else {
                $showRemark.show();
                $remarkDiv.hide();
            }
        }

        var $descriptionDiv = $("#form_do_action_message_description");
        if (description == null || description === "") {
            $descriptionDiv.hide().text("");
        } else {
            $descriptionDiv.text(description).show();
        }


        var doAction = function (actionId, jsonData) {

            //check and get nextUsers
            var nextUsers = {},
                foundSelectUserError = false,
                selectUserMessenger = '',
                remark = '';

            if ($("#form_do_action_next_steps").css("display") !== "none") {
                var $userList = $('#form_do_action_user_list');
                $userList.find('select').each(function () {
                    var val = $(this).val();
                    if (val === InfoPlus.Settings.NOBODY_ACCOUNT) {
                        if ($(this).data("mustSelectNextUser")) {
                            if (!$$.MOBILE) {
                                var $selectUserTip = $(this).parent().siblings(".form_do_action_must_select_user");
                                if (!$selectUserTip.is(":visible")) {
                                    $selectUserTip.show().effect('highlight');
                                } else {
                                    $selectUserTip.effect('pulsate');
                                }
                            }
                            selectUserMessenger += (selectUserMessenger !== "" ? "<br>" : "") + $$.lt("submit.chooseStepExecutor", $(this).data("stepName"));
                            foundSelectUserError = true;
                            return;
                        }
                        val = "";
                    }
                    nextUsers[$(this).data("stepId")] = val;
                });
                $userList.find('input[type*=hidden]').each(function () {
                    nextUsers[$(this).data("stepId")] = $(this).val();
                });

                if (foundSelectUserError) {
                    if ($$.MOBILE) {
                        $IU.messageBox($$.lt("common.choose"), selectUserMessenger, null, 400);
                    }
                    return false;
                }

                //remark = $("#next_step_form_action_comment").val();
            } else {
                //remark = $("#last_step_form_action_comment").val();
            }
            var $remark = $("#form_do_action_remark");
            if ($$.MOBILE) {
                if ($remark.is(":visible")) {
                    remark = $remark.val();
                }
            } else {
                if ($("#form_do_action_remark_div").css("display") === "block") {
                    remark = $remark.val();
                }
            }

            if (mustInputRemark === true && $IU.trimString(remark).length === 0) {
                if ($$.MOBILE) {
                    $IU.messageBox(null, remarkTip, null, 300);
                    return false;
                } else {
                    var $inputRemarkTip = $("#form_do_action_remark_tip").children(".form_do_action_must_input_remark");
                    if (!$inputRemarkTip.is(":visible")) {
                        $inputRemarkTip.show().effect('highlight');
                    } else {
                        $inputRemarkTip.effect('pulsate');
                    }
                    return false;
                }
            }

            var review = $IU.getReviewData();

            var beforeAction = function () {
                var docClosed = $IU.closeAllDoc();
                $$.blockUI({ message: "<span class='loading'>" + $$.lt("submit.submitting") + "</span>" });
                if (docClosed) {
                    //如果有关闭的Doc控件就延时3秒提交
                    return 3000;
                }
            };
            var afterAction = function () {
                $IU.reopenAllDoc();
                $.unblockUI();
            };
            var actionData = {
                actionId: actionId,
                formData: jsonData,
                remark: remark,
                rand: Math.random() * 999
            };
            if (review != null) {
                actionData['review'] = $.toJSON(review);
            }
            $$.doAction(actionData, nextUsers, false, beforeAction, afterAction);

        };

        var buttons = [];

        if ($$.params.printable && actionPrintable === true) {
            buttons.push({
                name: $$.lt("common.print"),
                callback: function () {
                    $("#linkPrint").attr("href", $IU.processUrl($$.params.printUrl));
                    $IU.fireClick("linkPrint");
                }
            });
        }
        buttons = buttons.concat([
            {
                name: $$.lt("common.confirmAction"),
                callback: function () {
                    return doAction(actionId, jsonData);
                },
                preventDefault: true,
                defaultButton: true
            },
            {
                name: $$.lt("common.cancel"),
                callback: function () {
                    $button.data("lastRemark", $formDoActionRemark.val());
                },
                callOnClose: true
            }
        ]);


        var $nextStepDiv = $("#form_do_action_next_steps");

        $nextStepDiv.hide();

        var stepList = $("#form_do_action_user_list")[0];
        $(stepList).empty();

        if (isEndStep === true) {
            // End the instance when no step is given.
            //$lastStepDiv.show();
        } else {
            if (steps.length > 0) {
                var createSelect = function (thisStep, createUsers, mustSelectUser) {
                    var buildUserDisplayName = function () {
                        var changeDisplayName = function (u) {
                            if (u.tenantUserId != null) {
                                u["displayName"] = u.trueName + "(" + u.tenantUserId + ")";
                            } else {
                                u["displayName"] = u.trueName;
                            }
                        };
                        var userNames = {};
                        for (var n = 0, l = createUsers.length; n < l; n++) {
                            var u = createUsers[n];
                            if (userNames.hasOwnProperty(u.trueName)) {
                                var dpUser = userNames[u.trueName];
                                changeDisplayName(dpUser);
                                changeDisplayName(u);
                            } else {
                                userNames[u.trueName] = u;
                                u["displayName"] = u.trueName;
                            }
                        }
                    };
                    buildUserDisplayName();
                    var select = document.createElement("select");
                    for (var n = 0; n < createUsers.length; n++) {
                        var thisUser = createUsers[n];
                        var text = thisUser.displayName;
                        var org = thisUser.organizeName;
                        if (org != null && org !== "") text = text + "(" + org + ")";
                        var option = new Option(text, thisUser.userId);
                        if ($.browser.msie)
                            select.add(option);
                        else
                            select.add(option, null);
                    }
                    var identifier = (thisStep.splitIdentifier) == null ? '' : thisStep.splitIdentifier;
                    $(select).data("stepId", thisStep.stepId + ',' + identifier).data("stepName", thisStep.name).data("mustSelectNextUser", mustSelectUser);

                    var span = document.createElement("span");
                    $(span).append(select).addClass("userSpan");
                    return span;
                };

                var sortUsers = function (users) {
                    var sortArray = new InfoPlus.QuickSortArray();
                    for (var i = 0, len = users.length; i < len; i++) {
                        sortArray.push(users[i]);
                    }
                    sortArray.sort(function (u1, u2) {
                        return $IU.localeCompare(u1.trueName, u2.trueName);
                        //return u1.trueName.localeCompare(u2.trueName);
                    });
                    return sortArray;
                };

                var pleaseSelect = {
                    trueName: $$.lt("submit.choose"),
                    userId: InfoPlus.Settings.NOBODY_ACCOUNT
                };
                var allUsers = {
                    trueName: $$.lt("submit.allUser"),
                    userId: InfoPlus.Settings.NOBODY_ACCOUNT
                };

                var user, hiddenInput, helpSpan;

                for (var i = 0, len = steps.length; i < len; i++) {
                    var step = steps[i],
                        users = sortUsers(step.users),
                        stepLi = document.createElement("li");

                    stepLi.innerHTML = "<span class='stepName'>" + step.name + "：</span>" + $$.lt("submit.executor") + "&nbsp;";
                    $(stepLi).addClass("userLi");
                    switch (step.executorSelection) {
                        case 0: //可选
                            users.splice(0, 0, allUsers);
                            stepLi.appendChild(createSelect(step, users, false));
                            helpSpan = document.createElement("span");
                            $(helpSpan).attr("class", "tip_help")
                                .attr("original-title", $$.hlt("submit.helper.title"))
                                .data("selectUser", step.executorSelection)
                                .data("tipContent", $$.lt("submit.helper.content"));
                            stepLi.appendChild(helpSpan);
                            break;
                        case 1: //必选
                            if (users.length === 1) {
                                //只有一个可选的人
                                user = users[0];
                                stepLi.innerHTML = stepLi.innerHTML + ("<b>" + user.trueName + "</b>");
                                hiddenInput = document.createElement("input");
                                hiddenInput.type = "hidden";
                                hiddenInput.value = user.userId;
                                stepLi.appendChild(hiddenInput);
                                var identifier = (step.splitIdentifier) == null ? '' : step.splitIdentifier;
                                $(hiddenInput).data("stepId", step.stepId + ',' + identifier);
                            } else {
                                users.splice(0, 0, pleaseSelect);
                                stepLi.appendChild(createSelect(step, users, true));
                                var span = document.createElement("span");
                                $(span).text("(*)").css("color", "red");
                                stepLi.appendChild(span);
                                span = document.createElement("span");
                                $(span).text($$.lt("submit.helper.mustChoose")).addClass("form_do_action_must_select_user").css("display", "none");
                                stepLi.appendChild(span);
                                helpSpan = document.createElement("span");
                                $(helpSpan).attr("class", "tip_help")
                                    .attr("original-title", $$.lt("submit.helper.mustChoose"))
                                    .data("selectUser", step.executorSelection)
                                    .data("tipContent", $$.lt("submit.helper.mustChoose"));
                                stepLi.appendChild(helpSpan);
                            }
                            break;
                        case 2: //强制不选人(不可选)
                        case 3: //强制不弹框
                            stepLi.innerHTML = stepLi.innerHTML + "<b>" + $$.lt("submit.helper.chooseBySystem") + "</b>";
                            break;
                        case 4: //随机指定
                            stepLi.innerHTML = stepLi.innerHTML + "<b>" + $$.lt("submit.helper.chooseOneBySystem") + "</b>";
                            break;
                    }
                    stepList.appendChild(stepLi);
                }

                $(helpSpan).tipsy({
                    html: true,
                    fade: true,
                    gravity: 'w',
                    trigger: 'manual',
                    opacity: 0.8
                });
                $("#form_do_action_show_next_steps").show();
            } else {
                //等待合并(无后继步骤且不是最后一步)
                $("#form_do_action_show_next_steps").hide();
            }
            $nextStepDiv.show();
        }

        var $tipHelp = $(".tip_help");

        $(".show_comment").one("click", function () {
            $("#form_do_action_remark_div").show();
            return false;
        });


        if ($$.MOBILE) {

            // 在ios版微信中，如果表单滑动到了最底端，当提交对话BottomSheet弹出后，如果点击了备注栏弹出了输入法，或者点击了下拉选人框(这两者共通点是都会在底部弹出一块内容(输入法或者下拉选择内容项))
            // 此时当输入法中点了完成或者下拉内容选择好后，这个底部弹出的部分收回去，但是却没让原先的BottomSheet回到正确的位置上，页面上会观察到又向下滚动了一小段，
            // 此时BottomSheet上的内容都无法点击(其能实际点击的位置在其上方)，如果能让页面滚动回原来正确的位置，这个bug就消失，所以以下代码在备注框和下拉选人框blur的时候让页面滚动到原先的位置
            if ($$.WECHAT && /(iPhone|iPad)/i.test(navigator.userAgent)) {
                $formDoActionRemark.blur(function () {
                    //看上去什么都没做，其实位置正确了
                    document.body.scrollTop = document.body.scrollTop;
                });

                $("#form_do_action_user_list").on("blur", "select", function () {
                    //看上去什么都没做，其实位置正确了
                    document.body.scrollTop = document.body.scrollTop;
                });
            }

            var sheet = new InfoPlus.Render.Mobile.BottomSheet({
                content: $formDoActionDialog,
                onClose: function () {
                    $formDoActionDialog.detach().hide().appendTo(document.body);
                },
                buttons: buttons
            });
            sheet.show();

            $tipHelp.click(function () {
                var div = document.createElement("div");
                $(div).html($(this).data("tipContent")).css("display", "none");
                var $span = $(this);
                if ($span.data("selectUser") === 0) {
                    $(div).css("color", "#616161");
                } else {
                    $(div).css("color", "red");
                }
                $span.parent().append(div);
                $span.hide();
                $(div).slideDown("slow");
            });

        } else {
            var dialog = new InfoPlus.Render.Dialog({
                title: title,
                content: $formDoActionDialog,
                maxWidth: 620,
                onClose: function () {
                    $formDoActionDialog.detach().hide().appendTo(document.body);
                },
                buttons: buttons
            });
            dialog.show();

            $tipHelp.click(function () {
                $(this).tipsy("show");
            }).mouseenter(function () {
                $(this).tipsy("show");
            }).mouseleave(function () {
                $(this).tipsy("hide");
            });
        }


        $(".make_remark").click(function () {
            var $remarkMade = $(".form_do_action_remark_made");
            if ($$.MOBILE) {
                //先展开所有的view再批注
                $IU.mobileExpandAllViews();
                var memoMaker = new InfoPlus.MemoMaker({
                    data: $$.params.review,
                    onFinish: function () {
                        $IU.refreshReviewByForm($(memoMaker.maskDiv));
                        var remark = $formDoActionRemark.val() || '';
                        if ($$.params.review.length > 0) {
                            $remarkMade.html($$.lt("submit.remarkDone", $$.params.review.length));
                        } else {
                            $remarkMade.empty();
                        }
                        if ($IU.trimString(remark) === '' && $$.params.review.length > 0) {
                            $formDoActionRemark.val($$.lt("submit.viewRemarks"));
                            $("#form_do_action_remark_div").show();
                        }
                        memoMaker.close();
                        sheet.animateShow();
                        $IU.refreshFormReviews();
                    },
                    onCancel: function () {
                        memoMaker.close();
                        sheet.animateShow();
                        $IU.refreshFormReviews();
                    }
                });
                memoMaker.render();
                sheet.animateHide(memoMaker.getMenuDivPosition(["left", "bottom", "width", "height"]), function () {
                    memoMaker.show();
                });
            } else {
                memoMaker = new InfoPlus.MemoMaker({
                    data: $$.params.review,
                    onFinish: function () {
                        $IU.refreshReviewByForm($(memoMaker.maskDiv));
                        var remark = $formDoActionRemark.val() || '';
                        if ($$.params.review.length > 0) {
                            $remarkMade.html($$.lt("submit.remarkDone", $$.params.review.length));
                        } else {
                            $remarkMade.empty();
                        }

                        if ($IU.trimString(remark) === '' && $$.params.review.length > 0) {
                            $formDoActionRemark.val($$.lt("submit.viewRemarks"));
                            $("#form_do_action_remark_div").show();
                        }
                        memoMaker.close();
                        dialog.animateShow();
                        $IU.refreshFormReviews();
                    },
                    onCancel: function () {
                        memoMaker.close();
                        dialog.animateShow();
                        $IU.refreshFormReviews();
                    }
                });
                memoMaker.render();
                dialog.animateHide(memoMaker.getMenuDivPosition(["margin-top", "margin-left", "width", "height"]), function () {
                    memoMaker.show();
                });
            }

            return false;
        });


        return false;
    };

    /**
     * 委托(调试)办理对话框(这份代码在Start.js中也有，注意同步修改)
     * @param entrusts              委托对象
     * @param error                 错误
     * @param continueCallback      点击继续后回调函数
     * @param uriEntrust            委托接口地址(这个地址应该存在$$.params.uriEntrust里，但是由于url带有entrust=true参数而发生调用时全局$$.params还没初始化，所以这里再传一个参数进来)
     */
    utilities.chooseEntrust = function (entrusts, error, continueCallback, uriEntrust) {
        var appId = entrusts.app.id,
            entrustInterface = ($$.params.uriEntrust !== undefined) ? $$.params.uriEntrust : uriEntrust;

        var buttons = [{
            defaultButton: true,
            preventDefault: true,
            name: $$.lt("entrust.continueButton"),
            callback: function () {
                var $checkedRadio = $chooseUserListDiv.find("input[type=radio]:checked");
                if ($checkedRadio.length === 0) {
                    if (continueCallback != null && (typeof continueCallback === 'function')) {
                        continueCallback();
                    }
                } else {
                    var account = $checkedRadio.data("account");
                    if (account == null) {
                        account = $checkedRadio.siblings(".entrust_specifiedUser").val();
                        if ($IU.trimString(account) === '') {
                            $IU.messageBox(null, $$.lt("entrust.chooseSpecifiedAccount"), null, 200);
                            return false;
                        }
                    } else {
                        //选择了登录人或者当前委托(调试)人
                        if (account === currentEntrusterAccount || account === currentEntrusteeAccount) {
                            if (continueCallback != null && (typeof continueCallback === 'function')) {
                                continueCallback();
                                return true;
                            } else {
                                return true;
                            }
                        }
                    }
                    var entrusted = $checkedRadio.data("entrusted");
                    $$.blockUI({ message: (entrusted ? $$.lt("entrust.request.entrust.requesting.entrust") : $$.lt("entrust.request.entrust.requesting.debug")) });
                    $$.ajax({
                        type: "POST",
                        url: entrustInterface,
                        data: {
                            entrustee: account,
                            entrusted: $checkedRadio.data("entrusted"),
                            app: appId
                        },
                        requestMsg: (entrusted ? $$.lt("entrust.request.entrust.request.entrust") : $$.lt("entrust.request.entrust.request.debug")),
                        errorTitle: (entrusted ? $$.lt("entrust.request.entrust.fail.entrust") : $$.lt("entrust.request.entrust.fail.debug")),
                        beforeShowErrorMsg: function () {
                            $.unblockUI();
                        }
                    }).done(function () {
                        if ($$.MOBILE) {
                            //等待动画结束
                            setTimeout(function () {
                                window.location.reload();
                            }, 600);
                        } else {
                            window.location.reload();
                        }
                    });
                }
            }
        }];

        if (entrusts.entruster != null) {
            buttons.push({
                name: (entrusts.entrusted ? $$.lt("entrust.abort.entrust") : $$.lt("entrust.abort.debug")),
                callback: function () {
                    $$.blockUI({ message: (entrusts.entrusted ? $$.lt("entrust.request.abort.requesting.entrust") : $$.lt("entrust.request.abort.requesting.debug")) });
                    $$.ajax({
                        type: "POST",
                        url: entrustInterface,
                        data: {
                            entrusted: false,
                            app: appId
                        },
                        requestMsg: (entrusts.entrusted ? $$.lt("entrust.request.abort.request.entrust") : $$.lt("entrust.request.abort.request.debug")),
                        errorTitle: (entrusts.entrusted ? $$.lt("entrust.request.abort.fail.entrust") : $$.lt("entrust.request.abort.fail.debug")),
                        beforeShowErrorMsg: function () {
                            $.unblockUI();
                        }
                    }).done(function () {
                        if ($$.MOBILE) {
                            //等待动画结束
                            setTimeout(function () {
                                window.location.reload();
                            }, 600);
                        } else {
                            window.location.reload();
                        }
                    });
                }
            });
        }

        var appendUser = function (entrust) {
            var label = document.createElement("label"),
                input = document.createElement("input"),
                span = document.createElement("span");
            $(input).attr("type", "radio").attr("name", "chooseEntrustee")
                .data("entrusted", entrust.entrusted)
                .data("account", entrust.entruster.account);
            var text = ((entrust.tip != null ? (entrust.tip + " ") : "") + entrust.entruster.name) + "(" + entrust.entruster.account + ")";
            if (entrust.from != null && entrust.to != null) {
                text += "  " + $IU.unixTimeToDateString(entrust.from) + " － " + $IU.unixTimeToDateString(entrust.to);
            }
            $(span).text(text);
            $(label).append(input).append(span).addClass("entrust_label");
            $chooseUserListDiv.append(label);
        };

        var appendSpecifiedUser = function () {
            var label = document.createElement("label"),
                input = document.createElement("input"),
                span = document.createElement("span"),
                userInput = document.createElement("input");
            $(input).attr("type", "radio").attr("name", "chooseEntrustee")
                .data("entrusted", false);
            $(span).text($$.lt("entrust.specified"));
            $(userInput).addClass("entrust_specifiedUser").focus(function () {
                $(input).attr("checked", true);
            });
            $(label).append(input).append(span).append(userInput).addClass("entrust_label");
            $chooseUserListDiv.append(label);

        };

        var content = document.createElement("div"),
            $content = $(content),
            userListDiv = document.createElement("div"),
            $userListDiv = $(userListDiv),
            chooseDiv = document.createElement("div"),
            chooseUserListDiv = document.createElement("div"),
            $chooseUserListDiv = $(chooseUserListDiv),
            currentEntrusteeAccount = (entrusts.entrustee != null ? entrusts.entrustee.account : null),
            currentEntrusterAccount = (entrusts.entruster != null ? entrusts.entruster.account : null);


        $userListDiv.append(chooseDiv).append(chooseUserListDiv);
        $chooseUserListDiv.addClass("entrust_choose_user_div");

        var otherEntrusts = [];
        if (entrusts.entrusts != null) {
            for (var i = 0, len = entrusts.entrusts.length; i < len; i++) {
                var entruster = entrusts.entrusts[i].entruster;
                if (entruster.account === currentEntrusterAccount || entruster.account === currentEntrusteeAccount) {
                    continue;
                }
                otherEntrusts.push(entrusts.entrusts[i]);
            }
        }


        if (entrusts.entruster != null) {
            var entrusterName = "<span class='entruster'>" + entrusts.entruster.name + "(" + entrusts.entruster.account + ")</span>",
                entrusteeName = entrusts.entrustee.name + "(" + entrusts.entrustee.account + ")",
                currentUserDiv = document.createElement("div"),
                $currentUserDiv = $(currentUserDiv),
                attentionDiv = document.createElement("div"),
                $attentionDiv = $(attentionDiv);

            $currentUserDiv.addClass("entrust_current_user");
            $attentionDiv.addClass("entrust_current_user_attention");
            var icon = document.createElement("i");
            $(icon).addClass("i-icon-user-secret").addClass("entrust_mark");
            var userSpan = document.createElement("span");
            $(userSpan).html(entrusts.entrusted ? $$.lt("entrust.tip.entrust", entrusterName) : $$.lt("entrust.tip.debug", entrusterName));
            $currentUserDiv.append(icon).append(userSpan);

            if (error != null) {
                var errorSpan = document.createElement("span");
                $(errorSpan).text("(" + error.msg + ")").addClass("entrust_error");
                $currentUserDiv.append(errorSpan);
            }


            $attentionDiv.html($$.lt("entrust.attention", entrusterName, entrusteeName));

            //有其它可委托（调试）的用户身份
            if (otherEntrusts.length > 0) {
                //添加当前委托用户(调试用户)
                appendUser({
                    entruster: entrusts.entruster,
                    entrusted: entrusts.entrusted,
                    from: entrusts.from,
                    to: entrusts.to,
                    tip: entrusts.entrusted ? $$.lt("entrust.current.entrust") : $$.lt("entrust.current.debug")
                });
                if (entrusts.released === false) {
                    appendSpecifiedUser();
                }
                for (i = 0, len = otherEntrusts.length; i < len; i++) {
                    appendUser(otherEntrusts[i]);
                }
                $(chooseDiv).text($$.lt("entrust.continueDo") + $$.lt("entrust.choose"));
            } else {
                if (entrusts.released === false) {
                    //添加当前委托用户(调试用户)
                    appendUser({
                        entruster: entrusts.entruster,
                        entrusted: entrusts.entrusted,
                        from: entrusts.from,
                        to: entrusts.to,
                        tip: entrusts.entrusted ? $$.lt("entrust.current.entrust") : $$.lt("entrust.current.debug")
                    });
                    appendSpecifiedUser();
                    $(chooseDiv).text($$.lt("entrust.continueDo") + $$.lt("entrust.choose"));
                } else {
                    $(chooseDiv).text($$.lt("entrust.continueDo"));
                }
            }
            $content.append(currentUserDiv).append(attentionDiv);
        } else {
            if (otherEntrusts.length > 0) {
                //添加当前登录用户
                appendUser({
                    entruster: entrusts.entrustee,
                    entrusted: false,
                    tip: $$.lt("entrust.current.login")
                });
                if (entrusts.released === false) {
                    appendSpecifiedUser();
                }
                for (i = 0, len = otherEntrusts.length; i < len; i++) {
                    appendUser(otherEntrusts[i]);
                }
                icon = document.createElement("i");
                $(icon).addClass("i-icon-user-secret").addClass("entrust_mark");
                var span = document.createElement("span");
                $(span).text($$.lt("entrust.support") + $$.lt("entrust.continueDo") + $$.lt("entrust.choose"));
                $(chooseDiv).append(icon).append(span);
            } else {
                if (entrusts.released === false) {
                    //添加当前登录用户
                    appendUser({
                        entruster: entrusts.entrustee,
                        entrusted: false,
                        tip: $$.lt("entrust.current.login")
                    });
                    appendSpecifiedUser();
                    icon = document.createElement("i");
                    $(icon).addClass("i-icon-user-secret").addClass("entrust_mark");
                    span = document.createElement("span");
                    $(span).text($$.lt("entrust.support") + $$.lt("entrust.continueDo") + $$.lt("entrust.choose"));
                    $(chooseDiv).append(icon).append(span);
                } else {
                    $chooseUserListDiv.text($$.lt("entrust.noUser"));
                }
            }
        }

        var $radios = $chooseUserListDiv.find("input[type=radio]");
        if ($radios.length > 0) {
            $radios.first().attr("checked", "true");
            $radios.click(function () {
                var account = $(this).data("account");
                //选择了登录人或者当前委托(调试)人
                if (account === currentEntrusterAccount || account === currentEntrusteeAccount) {
                    if ($$.MOBILE) {
                        page.changeButton(0, {
                            name: $$.lt("entrust.continueButton")
                        });
                    } else {
                        dialog.changeButton(0, {
                            name: $$.lt("entrust.continueButton")
                        });
                    }
                } else {
                    if ($$.MOBILE) {
                        page.changeButton(0, {
                            name: $$.lt("entrust.switchButton")
                        });
                    } else {
                        dialog.changeButton(0, {
                            name: $$.lt("entrust.switchButton")
                        });

                    }
                }
            });
        }

        $content.append(userListDiv).addClass("entrust_choose");

        if ($$.MOBILE) {
            var page = new InfoPlus.Render.Mobile.Page({
                isDoAction: true,
                omitReturn: true,
                content: content,
                buttons: buttons
            });
            page.show();
        } else {
            var dialog = new InfoPlus.Render.Dialog({
                content: content,
                maxWidth: 600,
                buttons: buttons
            });
            dialog.show();
        }

    };

    //移动端显示调试log
    utilities.mobileDebug = function (text) {
        var DEBUG_DIV_ID = "mobileDebugDiv",
            $debugDiv = $("#" + DEBUG_DIV_ID);

        if ($debugDiv.length === 0) {
            var clearDiv = document.createElement("div");
            $(clearDiv).attr("style", "position:fixed;top:40px;right:0;font-size:2rem;color:red").text("clear").click(function () {
                debugDiv.innerHTML = "";
            });
            $(document.body).append(clearDiv);
            var debugDiv = document.createElement("div");
            $debugDiv = $(debugDiv);

            $debugDiv.css("position", "fixed").css("top", "0").attr("id", DEBUG_DIV_ID);
            $(document.body).append(debugDiv);
        }
        $debugDiv.html($debugDiv[0].innerHTML + "<br>" + text);
    };

    //是否要显示回退按钮
    utilities.showBackIcon = function () {
        if (!$IU.isEmptyStr($$.params.back)) {
            if ($IU.isPositiveInt($$.params.back)) {
                var value = parseInt($$.params.back, 10);
                //如果back值大于等于历史长度，是无效值，忽略
                return value < window.history.length;
            } else {
                return true;
            }
        }
        return false;
    };

    utilities.compareInitData = function (compareInitDataIndex) {
        if (compareInitDataIndex == null || !$$.params.sameStepHistoryList) {
            return;
        }
        var initData = $IU.convertData($$.params.sameStepHistoryList[compareInitDataIndex].data),
            currentData = $IU.convertData($$.params.formRender.save({}));
        var comparer = new InfoPlus.Comparer(initData, currentData);
        comparer.compare();
    };

    //判断一个动态表达式是否是一个params()的语法糖
    utilities.isDynamicActionCallWithParams = function (actionName, expression) {
        //检查动态动作是否支持params，支持的动态里需要对参数进行处理，所以这里先过滤一下，否则即使括号的位置能够匹配，实际动态里还是无法处理Params对象
        var checkAction = function () {
            //目前仅dataSource和readOnly支持
            var supportParamsActionNames = ["dataSource", "readOnly"];
            for (var i = 0; i < supportParamsActionNames.length; i++) {
                if (actionName === supportParamsActionNames[i]) {
                    return true;
                }
            }
            return false;
        };
        if (!checkAction()) {
            return false;
        }
        expression = utilities.trimString(expression);
        //以左括号开头，以右括号结尾的才可能是
        if (!($IU.beginWith(expression, "(") && $IU.endWith(expression, ")"))) {
            return false;
        }
        //是否开头和结尾的左右括号是匹配的
        var stack = [0];
        for (var i = 1, len = expression.length; i < len; i++) {
            var c = expression[i];
            if (c === '(') {
                stack.push(i);
                continue;
            }
            if (c === ')') {
                stack.pop();
                if (stack.length === 0) {
                    return (i === (len - 1));
                }
            }
        }
        return false;
    };

    define("InfoPlus.Utilities", utilities);

    //产生一个缩写
    window.$IU = utilities;

    window.checkRenderFormFields = function (field, rules, i, options) {
        var checkField = field[0];

        //if the field is not visible don't check
        if (checkField.style.display === 'none') return undefined;
        //if the field is a hidden input don't check
        if (checkField.type === 'hidden') return undefined;
        var $checkField = $(checkField);

        var promptPosition = $checkField.data($Control.DATA_VALIDATOR_PROMPT_POSITION);
        if (promptPosition !== undefined) {
            options['promptPosition'] = promptPosition;
        }

        //if the field is a sugguester's activeInput or the div of a remark input or the div of file uploader then we should check the originInput
        if ($checkField.data($Control.DATA_ORIGIN_INPUT) != null) {
            $checkField = $($checkField.data($Control.DATA_ORIGIN_INPUT));
        }
        var validator = $checkField.data($Control.DATA_VALIDATOR);
        if (!validator) return undefined;

        var control = $checkField.data($Control.DATA_CONTROL_OBJECT);
        if (control == null) return undefined;

        //如果已经在suggest page上，那么就不验证了
        if (control.onSuggestPage === true) return undefined;
        //如果控件不可写(这个包括动态并行具有强制读权限R非执行分支之中的控件)或者是动态readonly的，就不验证了
        if (!control.isWritable() || control.isDynamicReadonly()) return undefined;

        var getValue = function () {
            //richtext和checkbox特殊处理，其他控件都直接取值
            if ($checkField.hasClass("infoplus_richTextControl")) {
                return CKEDITOR.instances[checkField.id + '_text'].getData();
            } else {
                return checkField.type === "checkbox" ? checkField.checked : $checkField.val();
            }
        };

        var value = getValue();

        var errorMsg = undefined;
        if (validator.required) {
            errorMsg = InfoPlus.Utilities.checkFieldEmpty($checkField, options);
        }
        //如果字段不是必填的，且其值为空，那么就不用检查正则
        if (validator.required || (!validator.required && value !== "")) {
            if (validator.regEx) {
                try {
                    var pattern = new RegExp(validator.regEx);
                } catch (e) {
                    var fieldName = control.field.name;
                    $$.log("invalid reg(" + fieldName + "):" + validator.regEx);
                    return undefined;
                }
                if (!pattern.test(value)) {
                    var prompt = validator.prompt != null && validator.prompt !== "" ? validator.prompt : options.allrules.formatError.alertText;
                    if (errorMsg !== undefined) {
                        errorMsg += "<br/>" + prompt;
                    } else {
                        errorMsg = prompt;
                    }
                }
            }
        }


        if (validator.dynamics != null && validator.dynamics.length > 0) {
            var validations = $$.dynamics.validations[control.getDynamicKeyName()];
            if ($IU.isArray(validations)) {
                var context = control.dynamicProcessor.getControlContext(control);

                for (var validationIndex = 0, len = validations.length; validationIndex < len; validationIndex++) {
                    var validation = validations[validationIndex];
                    var compiler = new InfoPlus.Dynamics.Parser.Compile(validation.conditionAsts);
                    if (validation.ignoreCondition === true || compiler.evaluate(context) === true) {
                        compiler = new InfoPlus.Dynamics.Parser.Compile(validation.tipAsts);
                        var tip = compiler.evaluate(context);
                        if (tip != null && tip !== '') {
                            if (errorMsg !== undefined) {
                                errorMsg += "<br/>" + tip;
                            } else {
                                errorMsg = tip;
                            }
                        }
                    }
                }
            }
        }

        return errorMsg;
    };
})
(window);

﻿/**
* QuickSortArray
* @Author yech 
* @Since 2011/09/19
*/
(function (window, undefined) {
    var quickSortArray = function () {
        Array.call(this, arguments);
    };

    quickSortArray.prototype = new Array();

    quickSortArray.prototype.numberQuickSort = function () {
        return quickSort(this, 0, this.length - 1);
        // 快排函数

        function quickSort(arr, l, r) {
            if (l < r) {
                var mid = arr[parseInt((l + r) / 2)], i = l - 1, j = r + 1;
                while (true) {
                    while (arr[++i].value < mid.value);
                    while (arr[--j].value > mid.value);
                    if (i >= j) break;
                    var temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
                quickSort(arr, l, i - 1);
                quickSort(arr, j + 1, r);
            }
        }
    };

    define("InfoPlus.QuickSortArray", quickSortArray);

})(window);
/*
 * Timezone
 * @Author yech 
 * @Since 2016/03/10
 */

(function (window, undefined) {

    var timezone = {
        "time": "时间",
        "UTC-12:00": "国际日期变更线西",
        "UTC-11:00": "协调世界时-11",
        "UTC-10:00": "夏威夷",
        "UTC-9:00": "阿拉斯加",
        "UTC-8:00": "太平洋",
        "UTC-7:00": "亚利桑那",
        "UTC-6:00": "墨西哥城",
        "UTC-5:00": "波哥大",
        "UTC-4:30": "加拉加斯",
        "UTC-4:00": "乔治敦",
        "UTC-3:30": "纽芬兰",
        "UTC-3:00": "布宜诺斯艾利斯",
        "UTC-2:00": "协调世界时-02",
        "UTC-1:00": "佛得角群岛",
        "UTC":      "伦敦",
        "UTC+1:00": "柏林",
        "UTC+2:00": "雅典",
        "UTC+3:00": "莫斯科",
        "UTC+3:30": "德黑兰",
        "UTC+4:00": "阿布扎比",
        "UTC+4:30": "喀布尔",
        "UTC+5:00": "伊斯兰堡",
        "UTC+5:30": "新德里",
        "UTC+5:45": "加德满都",
        "UTC+6:00": "达卡",
        "UTC+6:30": "仰光",
        "UTC+7:00": "曼谷",
        "UTC+8:00": "北京",
        "UTC+8:30": "平壤",
        "UTC+9:00": "东京",
        "UTC+9:30": "阿德莱德",
        "UTC+10:00": "布里斯班",
        "UTC+11:00": "所罗门群岛",
        "UTC+12:00": "奥克兰",
        "UTC+13:00": "萨摩亚群岛",
        "UTC+14:00": "圣诞岛"
    };


    $$.timezone = timezone;

})(window);
/**
 * 工具类
 * @Author yech
 * @Since 2016/11/21
 */
(function (window, undefined) {

    /**
     * @param options 格式                                    //创建参数
     * ｛
     *      text:{string}                                    //提示文字
     *      color:{string}                                   //提示文字前景色
     *      backgroundColor{string}                          //背景色
     *      content:{html}                                   //提示内容，如果有content优先显示，忽略text
     *      type:{string}                                    //提示类型
     *      position:{string}["left","right","bottom"]       //显示位置，目前支持靠左或靠右两种
     *      maxWidth{int}                                    //最大宽度
     *      minWidth{int}                                    //最小宽度
     *      width{int}                                       //宽度
     *      hideClose{boolean}                               //是否隐藏关闭按钮,缺省false
     *      autoClose{boolean}                               //是否自动关闭,缺省false,
     *      unique{boolean}                                  //是否是界面唯一的，如果是那么打开这个tip时必须关闭其他tip,缺省false
     *  ｝
     */
    var tip = function (options) {
        this.options = $.extend({}, tip.DEFAULT_OPTIONS, options);
        //移动版都置中出现在底端

        if ($$.MOBILE === true) {
            this.options.position = this.options.position + " bottom";
        }

        this.init(this.options);
        this.strategy = new InfoPlus.Tip.Strategy();
    };

    tip.CLASSNAME_TIP = "infoplus_tip";
    tip.CLASSNAME_CLOSE = "infoplus_tip_close";
    tip.DEFAULT_OPTIONS = {
        color: "#FFFFFF",
        type: "info",
        text: '',
        position: "left",
        hideClose: false,
        autoClose: false,
        unique: false
    };
    tip.SPACE_HEIGHT = 8; //间隔的空白高度


    tip.prototype = {
        options: {},
        element: null,

        //获取页面上tip的最小top
        getMinTop: function () {
            var $body = $("body"),
                top = $(window).height(),
                minTop = top,
                $topTip = null,
                count = 0,
                totalHeight = 0;


            $body.children("." + tip.CLASSNAME_TIP + "." + this.options.position).each(function () {
                var thisTop = parseFloat($(this).css("top"));
                if (thisTop < minTop) {
                    minTop = thisTop;
                    $topTip = $(this);
                }
                count++;
                totalHeight += $(this).outerHeight() + tip.SPACE_HEIGHT;
            });

            if ($topTip != null) {
                $topTip.css("z-index", 2);
            }

            if (count > 0 && (top - totalHeight < minTop)) {
                minTop = top - totalHeight;
            }
            return minTop;
        },

        render: function () {
            var options = this.options;


            if (options.unique === true) {
                $("." + tip.CLASSNAME_TIP).remove();
            }

            var div = document.createElement("div"),
                $div = $(div),
                $body = $("body"),
                minTop = this.getMinTop();
            //maxWidth = (options.maxWidth == null ? $(window).width() - 20 : options.maxWidth);

            if (options.content != null) {
                $div.append(options.content).addClass("custom");
                if (options.hideClose === true) {
                    $div.addClass("noCloseButton")
                }
            } else {
                $div.html(options.text).addClass(options.type + "_tip");
            }

            $div.css("top", minTop)
                .addClass(tip.CLASSNAME_TIP)
                .addClass(options.position)
                .addClass("z-depth-1");

            if (options.width != null) {
                $div.css("width", options.width + "px");
            }
            if (options.maxWidth != null) {
                $div.css("max-width", maxWidth + "px");
            }
            if (options.minWidth != null) {
                $div.css("min-width", options.minWidth + "px")
            }

            if (options.color != null) {
                $div.css("color", options.color);
            }
            if (options.backgroundColor != null) {
                $div.css("background-color", options.backgroundColor);
            }

            if (!$$.MOBILE) {

            } else {
                //$div.addClass("mobile")
            }

            if (options.hideClose !== true) {
                var close = document.createElement("i");
                $(close).addClass("i-icon-close2").addClass(tip.CLASSNAME_CLOSE).data("position", options.position);
                $div.append(close);
            }

            $body.append(div);
            var instance = this;
            setTimeout(function () {
                var selfHeight = $div.outerHeight();

                $div.css("top", minTop - selfHeight - tip.SPACE_HEIGHT);
                if (instance.strategy !== undefined) {
                    instance.strategy.adjustTop($div)
                }

                if (options.autoClose === true) {
                    setTimeout(function () {
                        instance.hide();
                    }, 2000);
                }
            }, 0);

            return div;
        },

        init: function () {
            this.element = this.render();
            this.initEvents();
        },

        initEvents: function () {
            var instance = this;
            var $close = $(this.element).children("." + tip.CLASSNAME_CLOSE);
            $close.click(function () {
                instance.hide();
                return false;
            });

        },

        remove: function () {
            var top = this.options.position.indexOf("bottom") !== -1 ? parseFloat($(this.element).data("oldTop")) : parseFloat($(this.element).css("top")),
                height = $(this.element).outerHeight() + tip.SPACE_HEIGHT;
            $(this.element).siblings("." + tip.CLASSNAME_TIP + "." + this.options.position).each(function () {
                var thisTop = parseFloat($(this).css("top"));
                if (thisTop < top) {
                    $(this).css("top", (thisTop + height) + "px");
                }
            });

            $(this.element).remove();
        },

        hide: function () {
            var instance = this,
                $element = $(this.element);
            var transitionEventName = $IU.getTransitionEndEventName();
            if (transitionEventName != null) {

                var positions = this.options.position.split(" ");
                //按照最后一个方向动画显示隐藏(pc端左边或者右边退出，移动端从下方退出)
                if (positions.length > 0) {
                    switch (positions[positions.length - 1]) {
                        case "left":
                            $element.css("left", "-" + $element.outerWidth() + "px");
                            break;
                        case "right":
                            $element.css("right", "-" + $element.outerWidth() + "px");
                            break;
                        case "bottom":
                            $element.data("oldTop", $element.css("top"));
                            $element.css("top", $(window).height() + "px");
                            break;
                    }
                }

                $element.one(transitionEventName, function () {
                    instance.remove();
                });

            } else {
                this.remove();
            }
        }


    };


    define("InfoPlus.Tip", tip);

    var strategy = function () {
    };

    strategy.prototype = {

        //调整tip的高度位置
        adjustTop: function () {
        }

    };


    define("InfoPlus.Tip.Strategy", strategy);

})(window);

/**
 * debugConsole窗口
 * @Author yech
 * @Since 2017/04/10
 */
(function (window, undefined) {


    var debugConsole = function () {
        this.init();
    };

    debugConsole.CLASSNAME_CONSOLE = "infoplus_debugConsole";
    debugConsole.CLASSNAME_TITLE = "infoplus_debugConsole_title";
    debugConsole.CLASSNAME_COMMAND = "infoplus_debugConsole_command";
    debugConsole.CLASSNAME_CONTROL = "infoplus_debugConsole_control";
    debugConsole.CLASSNAME_CLOSE = "infoplus_debugConsole_close";
    debugConsole.CLASSNAME_TO_RIGHT = "infoplus_debugConsole_toRight";
    debugConsole.CLASSNAME_TO_BOTTOM = "infoplus_debugConsole_toBottom";
    debugConsole.CLASSNAME_TITLE = "infoplus_debugConsole_title";
    debugConsole.CLASSNAME_CONTENT = "infoplus_debugConsole_content";
    debugConsole.CLASSNAME_CONTENT_OUTER = "infoplus_debugConsole_content_outer";
    debugConsole.CLASSNAME_CONTENT_INNER = "infoplus_debugConsole_content_inner";
    debugConsole.CLASSNAME_COMMAND_BAR = "infoplus_debugConsole_command_bar";
    debugConsole.CONTENT_PADDING = 20;
    debugConsole.CONTENT_MAX_LINE_COUNT = 100;

    var appendHead = function ($container, name, isFirstLevel) {
        var div = document.createElement("div");
        var nameSpan = document.createElement("span");
        $(nameSpan).addClass("debug_content_name").text(name);
        if (isFirstLevel === true) {
            $(nameSpan).addClass("firstLevel");
        }

        var colonSpan = document.createElement("span");
        $(colonSpan).addClass("debug_content_colon").text(": ");
        $(div).append(nameSpan).append(colonSpan).addClass("line");
        $container.append(div);
        return $(div);
    };

    var appendNormal = function ($container, name, value, isFirstLevel) {
        var $div = appendHead($container, name, isFirstLevel);
        var valueSpan = document.createElement("span");
        $(valueSpan).addClass("debug_content_normal").text(value);
        $div.append(valueSpan);
    };

    var appendNull = function ($container, name, value, isFirstLevel) {
        var $div = appendHead($container, name, isFirstLevel);
        var valueSpan = document.createElement("span");
        $(valueSpan).addClass("debug_content_null").text(value);
        $div.append(valueSpan);
    };

    var appendText = function ($container, name, value, isFirstLevel) {
        var $div = appendHead($container, name, isFirstLevel);
        var valueSpan = document.createElement("span");
        $(valueSpan).addClass("debug_content_string").text("\"" + value + "\"");
        $div.append(valueSpan);
    };

    var appendNumber = function ($container, name, value, isFirstLevel) {
        var $div = appendHead($container, name, isFirstLevel);
        var valueSpan = document.createElement("span");
        $(valueSpan).addClass("debug_content_number").text(value);
        $div.append(valueSpan);
    };

    var appendBoolean = function ($container, name, value, isFirstLevel) {
        var $div = appendHead($container, name, isFirstLevel);
        var valueSpan = document.createElement("span");
        $(valueSpan).addClass("debug_content_boolean").text(value);
        $div.append(valueSpan);
    };

    var appendDate = function ($container, name, value, isFirstLevel) {
        var $div = appendHead($container, name, isFirstLevel);
        var valueSpan = document.createElement("span");
        $(valueSpan).addClass("debug_content_date").text($IU.dateFormat(value, "yyyy-MM-dd hh:mm:ss.S"));
        $div.append(valueSpan);
    };

    var appendArrow = function ($container) {
        var arrowDiv = document.createElement("div"),
            icon = document.createElement("i");
        $(icon).addClass("i-icon-triangle-right");
        $(arrowDiv).append(icon).addClass("arrowDiv").data("expand", false);
        $container.append(arrowDiv);
        $container.children(".debug_content_name").addClass("expandable");
        $container.children(".debug_content_value").addClass("expandable");
    };

    var appendContent = function ($container, name, content, padding, isFirstLevel) {

        if (padding != null) {
            $container.css("padding-left", padding + "px");
        }
        //var pl = (padding != null) ? parseInt($container.css("padding-left"), 10) + debugConsole.CONTENT_PADDING : debugConsole.CONTENT_PADDING;

        if (!$IU.isObject(content)) {
            if (content === null) {
                appendNull($container, name, "null", isFirstLevel);
                return;
            }
            if (content === undefined) {
                appendNull($container, name, "undefined", isFirstLevel);
                return;
            }
            if ($IU.isString(content)) {
                appendText($container, name, content, isFirstLevel);
                return;
            }
            if ($IU.isBoolean(content)) {
                appendBoolean($container, name, content, isFirstLevel);
                return;
            }
            if ($IU.isNumberExactly(content)) {
                appendNumber($container, name, content, isFirstLevel);
                return;
            }
            if ($IU.isDate(content)) {
                appendDate($container, name, content, isFirstLevel);
                return;
            }

            if ($IU.isArray(content)) {
                var $arrayDiv = appendHead($container, name, isFirstLevel);
                var arraySpan = document.createElement("span");
                $(arraySpan).text("Array[" + content.length + "]").addClass("debug_content_value");
                $arrayDiv.append(arraySpan).addClass("array");

                var innerArrayDiv = document.createElement("div"),
                    $innerArrayDiv = $(innerArrayDiv);
                $arrayDiv.append(innerArrayDiv);

                for (var i = 0, len = content.length; i < len; i++) {
                    appendContent($innerArrayDiv, i + "", content[i], debugConsole.CONTENT_PADDING, false);
                }

                $innerArrayDiv.addClass("innerDiv").hide();
                appendArrow($arrayDiv);
                return;
            }

            appendNormal($container, name, content);

        } else {
            var $objDiv = appendHead($container, name, isFirstLevel);
            var objSpan = document.createElement("span");
            $(objSpan).text("Object").addClass("debug_content_value");
            $objDiv.append(objSpan).addClass("object");


            var innerObjDiv = document.createElement("div"),
                $innerObjDiv = $(innerObjDiv);
            $objDiv.append($innerObjDiv);

            //sort keys
            var keys = [];
            for (var key in content) {
                if (content.hasOwnProperty(key)) {
                    keys.push(key);
                }
            }
            keys.sort();
            for (i = 0, len = keys.length; i < len; i++) {
                key = keys[i];
                appendContent($innerObjDiv, key, content[key], debugConsole.CONTENT_PADDING, false);
            }

            $innerObjDiv.addClass("innerDiv").hide();
            appendArrow($objDiv);
        }


    };

    debugConsole.prototype = {
        element: null,

        createCommand: function (text, callback) {
            var li = document.createElement("li");
            $(li).addClass(debugConsole.CLASSNAME_COMMAND)
                .addClass("round-corner")
                .text(text)
                .click(callback);
            return li;
        },

        createMockSelect2: function () {
            var li = document.createElement("li"),
                $li = $(li);
            $li.addClass(debugConsole.CLASSNAME_CONTROL);
            var select = document.createElement("select");

            $(select).attr("id", "mockUser").addClass(debugConsole.CLASSNAME_CONTROL).css("width", "100%");

            $li.append(select);

            $(select).select2({
                dropdownAutoWidth: "true",
                dropdownCssClass: "infoplus_debugConsole_dropdown",
                placeholder: "请输入调试用户",
                ajax: {
                    url: $$.params.uriUsers,
                    dataType: 'json',
                    type: "POST",
                    delay: 250,
                    data: function (params) {
                        return {
                            prefix: params.term, // search term
                            type: "User",
                            code: "",
                            parent: "",
                            isTopLevel: true,
                            pageNo: 0,
                            settings: "{}",
                            stepId: $$.params.formStepId,
                            csrfToken: $(document).find("meta[itemscope=csrfToken]").attr("content")
                        };
                        /*
                         return {
                         query: params.term, // search term
                         csrfToken: $(document).find("meta[itemscope=csrfToken]").attr("content")
                         };
                         */
                    },
                    processResults: function (data, params) {
                        if (data.errno !== undefined) {
                            console.log(data);
                            return {
                                results: [{
                                    id: data.errno,
                                    name: data.ecode,
                                    text: data.error

                                }]
                            };
                        } else {
                            var items = data.items;
                            for (var i = 0, len = items.length, results = []; i < len; i++) {
                                var item = items[i];
                                results.push({
                                    id: item.codeId,
                                    name: $IU.trimString(item.codeName) || '',
                                    text: ($IU.trimString(item.codeName) || '') + "(" + item.codeId + ")",
                                    item: item
                                })
                            }

                            return {
                                results: results
                            };
                        }

                    }
                },
                language: {
                    errorLoading: function () {
                        return $$.lt("suggester2.errorLoading");
                    },
                    noResults: function () {
                        return $$.lt("suggester2.noResult");
                    }
                },
                escapeMarkup: function (markup) {
                    return markup;
                },
                minimumInputLength: 2
            });
            return li;
        },

        changeContentTop: function () {
            var $console = $(this.element),
                $title = $console.find("." + debugConsole.CLASSNAME_TITLE),
                $content = $console.find("." + debugConsole.CLASSNAME_CONTENT_OUTER);
            $content.css("top", $title.outerHeight() + "px");
        },

        addContent: function (name, content) {
            var $console = $(this.element),
                $content = $console.find("." + debugConsole.CLASSNAME_CONTENT),
                $inner = $console.find("." + debugConsole.CLASSNAME_CONTENT_INNER),
                $outer = $console.find("." + debugConsole.CLASSNAME_CONTENT_OUTER),
                $lines = $content.children(".line");
            if ($lines.length > debugConsole.CONTENT_MAX_LINE_COUNT) {
                $($lines[0]).remove();
            }
            appendContent($content, name, content, null, true);

            $inner.scrollTop($content.height() - $outer.height() - parseInt($inner.css("top"), 10));

        },

        clearContent: function () {
            var $console = $(this.element),
                $content = $console.find("." + debugConsole.CLASSNAME_CONTENT);
            $content.children(".line").remove();

        },
        render: function () {
            var div = document.createElement("div"),
                $div = $(div),
                $body = $("body");

            $div.addClass(debugConsole.CLASSNAME_CONSOLE)
                .addClass("z-depth-1");

            var titleDiv = document.createElement("div"),
                $titleDiv = $(titleDiv),
                commandBar = document.createElement("ul"),
                $commandBar = $(commandBar);
            $commandBar.addClass(debugConsole.CLASSNAME_COMMAND_BAR);

            var close = document.createElement("i");
            $(close).addClass("i-icon-close2").addClass(debugConsole.CLASSNAME_CLOSE).attr("title", "关闭");

            var toRight = document.createElement("i");
            $(toRight).addClass("i-icon-keyboard-tab").addClass(debugConsole.CLASSNAME_TO_RIGHT).attr("title", "置右");

            var toBottom = document.createElement("i");
            $(toBottom).addClass("i-icon-vertical-align-bottom").addClass(debugConsole.CLASSNAME_TO_BOTTOM).attr("title", "置低");


            var instance = this;
            $commandBar.append(
                this.createCommand("流程信息", function () {
                    var entity = $$.entity;
                    instance.addContent("流程信息", {
                        app: entity.app,
                        step: entity.step,
                        actions: entity.actions,
                        permission: entity.permission,
                        fields: entity.fields,
                        groups: entity.groups
                    });
                    return false;
                }))
                .append(this.createCommand("原始数据", function () {
                    instance.addContent("原始数据", $IU.convertData($$.entity.data));
                    return false;
                }))
                .append(this.createCommand("当前数据", function () {
                    instance.addContent("当前数据", $IU.convertData(transformer.render.save({})));
                    return false;
                }))
                .append(this.createCommand("系统参数", function () {
                    var param = {};
                    for (var key in $$.params) {
                        if ($$.params.hasOwnProperty(key)) {
                            if (key !== "formRender" && key !== "renderForm") {
                                param[key] = $$.params[key];
                            }
                        }
                    }
                    instance.addContent("系统参数", param);
                    return false;
                }))
                .append(this.createCommand("登录信息", function () {
                    var info = {"当前登录人": $$.params.entrusts.entrustee.name};
                    if ($$.params.entrusts.entruster != null) {
                        info['当前办理人'] = $$.params.entrusts.entruster.name + ($$.params.entrusts.entrusted ? "(委托)" : "(调试)");

                    } else {
                        info['当前办理人'] = $$.params.entrusts.entrustee.name;
                    }
                    instance.addContent("登录信息", info);
                    return false;
                }))
                .append(this.createCommand("清除", function () {
                    instance.clearContent();
                    return false;
                }))
                .append(this.createMockSelect2())
                .append(this.createCommand("模拟登录", function () {
                    var data = $("#mockUser").select2('data');
                    if (data.length > 0) {
                        var userAccount = data[0].id,
                            userName = data[0].name;
                        if (userAccount != null && userAccount !== "") {
                            $IU.confirmBox("确定要模拟登录用户" + userName + "(" + userAccount + ")吗？<br>注意：模拟登录后本页面将会刷新", "模拟登录", $$.lt("common.ok"), 400, function () {
                                $$.blockUI({message: "正在模拟登录..."});
                                $$.ajax({
                                    type: "POST",
                                    url: $$.params.uriEntrust,
                                    data: {
                                        entrustee: userAccount,
                                        entrusted: false,
                                        app: $$.entity.app.id
                                    },
                                    requestMsg: "模拟登录",
                                    errorTitle: "模拟登录请求失败",
                                    beforeShowErrorMsg: function () {
                                        $.unblockUI();
                                    }
                                }).done(function () {
                                    window.location.reload();
                                });
                            });
                        }
                    }

                    return false;
                }))
                .append(this.createCommand("清除模拟", function () {
                    $IU.confirmBox("确定要清除模拟登录用户吗？<br>注意：清除后本页面将会刷新", "模拟登录", $$.lt("common.ok"), 400, function () {
                        $$.blockUI({message: "正在清除模拟登录..."});
                        $$.ajax({
                            type: "POST",
                            url: $$.params.uriEntrust,
                            data: {
                                entrusted: false,
                                app: $$.entity.app.id
                            },
                            requestMsg: "清除模拟登录",
                            errorTitle: "清除模拟登录请求失败",
                            beforeShowErrorMsg: function () {
                                $.unblockUI();
                            }
                        }).done(function () {
                            window.location.reload();
                        });
                    });

                    return false;
                }));

            $titleDiv.append(commandBar).append(close).append(toRight).append(toBottom).addClass(debugConsole.CLASSNAME_TITLE);
            var contentOuterWrapDiv = document.createElement("div"),
                contentInnerWrapDiv = document.createElement("div"),
                contentDiv = document.createElement("div"),
                $contentDiv = $(contentDiv);
            $contentDiv.addClass(debugConsole.CLASSNAME_CONTENT);
            $(contentOuterWrapDiv).append(contentInnerWrapDiv).addClass(debugConsole.CLASSNAME_CONTENT_OUTER);
            $(contentInnerWrapDiv).append(contentDiv).addClass(debugConsole.CLASSNAME_CONTENT_INNER)
                .css("width", "calc(100% + 10px)").css("height", "calc(100% + 45px)");

            $div.append(titleDiv).append(contentOuterWrapDiv);


            $body.append(div);
            setTimeout(function () {
                instance.changeContentTop();
            }, 500);


            $div.css("left", "20px").css("top", "100px").css("width", "400px").css("height", "400px");
            return div;
        },

        init: function () {
            this.element = this.render();
            this.initEvents();
        },

        initEvents: function () {
            var instance = this,
                $console = $(this.element),
                $close = $console.find("." + debugConsole.CLASSNAME_CLOSE),
                $toRight = $console.find("." + debugConsole.CLASSNAME_TO_RIGHT),
                $toBottom = $console.find("." + debugConsole.CLASSNAME_TO_BOTTOM),
                $title = $console.find("." + debugConsole.CLASSNAME_TITLE);

            $close.click(function () {
                $console.hide();
            });

            $toRight.click(function () {
                var top = 0,
                    margin = 3;
                var $header = $("#header_holder");
                if ($header.length > 0) {
                    top = parseInt($header.css("top"), 10) + $header.height() + margin;
                }
                $console.css("top", top + "px");
                $console.css("left", ($(window).width() - parseInt($console.css("min-width"), 10)) + "px");
                $console.css("width", $console.css("min-width"));
                $console.css("height", ($(window).height() - top - margin) + "px");
                instance.changeContentTop();
            });

            $toBottom.click(function () {
                $console.css("top", ($(window).height() - parseInt($console.css("min-height"), 10)) + "px");
                $console.css("height", $console.css("min-height"));
                $console.css("left", "0px");
                $console.css("width", $(window).width() + "px");
                instance.changeContentTop();
            });


            $title.mousedown(function (e) {
                if ($(e.srcElement).hasClass(debugConsole.CLASSNAME_COMMAND)) {
                    return false;
                }
                if ($(e.srcElement).hasClass(debugConsole.CLASSNAME_CONTROL)) {
                    return true;
                }
                var $console = $title.parent();
                if ($console.data("resize") !== "top") {
                    var os = $title.offset(),
                        dx = e.pageX - os.left,
                        dy = e.pageY - os.top;
                    $(document).on("mousemove.drag", function (e) {
                        $console.offset({top: e.pageY - dy, left: e.pageX - dx});
                    });

                    return false;
                }
            });


            $title.mouseup(function (e) {
                $(document).off("mousemove.drag");
                var $console = $(this).parent();
                if ($console.data("resize") != null) {
                    $console.removeData("resize");
                    $(document).off('mousemove.drag');
                }

            });


            $console.mousemove(function (e) {
                var BORDER_WIDTH = 5,
                    $console = $(this),
                    left = $console.offset().left,
                    top = $console.offset().top;

                if ((e.pageX - left) < BORDER_WIDTH) {
                    $console.data("resize", "left");
                    $console.css("cursor", "w-resize");
                    return false;
                }
                if (($console.outerWidth() - (e.pageX - left)) < BORDER_WIDTH) {
                    $console.data("resize", "right");
                    $console.css("cursor", "e-resize");
                    return false;
                }
                if ((e.pageY - top) < BORDER_WIDTH) {
                    $console.data("resize", "top");
                    $console.css("cursor", "n-resize");
                    return false;
                }
                if (($console.outerHeight() - (e.pageY - top)) < BORDER_WIDTH) {
                    $console.data("resize", "bottom");
                    $console.css("cursor", "s-resize");
                    return false;
                }

                if (($console.css("cursor") !== "default") && (e.which === 0)) {
                    $console.removeData("resize");
                    $console.css("cursor", "default");
                }

            });

            $console.mousedown(function (e) {

                var $console = $(this),
                    os = $console.offset(),
                    oh = $console.height(),
                    ow = $console.width(),
                    ox = e.pageX,
                    oy = e.pageY,
                    dx = e.pageX - os.left,
                    dy = e.pageY - os.top;

                if ($console.data("resize") != null) {
                    $(document).on('mousemove.drag', function (e) {
                        switch ($console.data("resize")) {
                            case "left":
                                var oldLeft = $console.offset().left,
                                    newLeft = e.pageX - dx,
                                    newWidth = $console.width() + oldLeft - newLeft;
                                if (newWidth > parseInt($console.css("min-width"), 10)) {
                                    $console.offset({left: newLeft});
                                    $console.width(newWidth);
                                    instance.changeContentTop();
                                }
                                break;
                            case "right":
                                newWidth = ow + e.pageX - ox;
                                if (newWidth > parseInt($console.css("min-width"), 10)) {
                                    $console.width(newWidth);
                                    instance.changeContentTop();
                                }
                                break;
                            case "top":
                                var oldTop = $console.offset().top,
                                    newTop = e.pageY - dy,
                                    newHeight = $console.height() + oldTop - newTop;
                                if (newHeight > parseInt($console.css("min-height"), 10)) {
                                    $console.offset({top: newTop});
                                    $console.height(newHeight);
                                }
                                break;
                            case "bottom":
                                newHeight = oh + e.pageY - oy;
                                if (newHeight > parseInt($console.css("min-height"), 10)) {
                                    $console.height(newHeight);
                                }
                                break;
                        }

                    });
                }
            });


            $console.mouseup(function (e) {
                var $console = $(this);
                if ($console.data("resize") != null) {
                    $console.removeData("resize");
                    $(document).off('mousemove.drag');
                }

            });

            $console.on("click", ".arrowDiv", function () {
                var $arrowDiv = $(this);
                if ($arrowDiv.data("expand") === false) {
                    $arrowDiv.siblings(".innerDiv").show();
                    $arrowDiv.data("expand", true);
                    $arrowDiv.children("i").removeClass("i-icon-triangle-right").addClass("i-icon-triangle-down");
                } else {
                    $arrowDiv.siblings(".innerDiv").hide();
                    $arrowDiv.data("expand", false);
                    $arrowDiv.children("i").removeClass("i-icon-triangle-down").addClass("i-icon-triangle-right");
                }
            });

            $console.on("click", ".expandable", function () {
                $(this).siblings(".arrowDiv").click();
            });

        }


    };


    define("InfoPlus.DebugConsole", debugConsole);

})(window);

/**
 * Comparer 历史数据比较器
 * Created by yech on 18-3-5.
 */

(function (window, undefined) {
    var comparer = function (oldData, newData) {
        this.oldData = oldData;
        this.newData = newData;
    };

    comparer.clearAll = function (clearAtOnce) {
        //清除界面上所有PopTip
        InfoPlus.Render.PopTip.clear(clearAtOnce);
        //清除masterDetail中记住的比较结果
        var $detailCells = $(".detailCell");
        $detailCells.children().removeData("diffs");
        if ($$.params.diffHelper != null) {
            $$.params.diffHelper.hide(clearAtOnce);
            $$.params.diffHelper = null;
        }
        $detailCells.parent().removeData("detailModified");

    };

    var getField = function (name) {
        var fields = $$.entity.fields;
        for (var fieldName in fields) {
            if (fields.hasOwnProperty(fieldName)) {
                if (fieldName === name) return fields[fieldName];
            }
        }
        return null;
    };

    var isGroups = function (name) {
        var groups = $$.entity.groups;
        for (var groupName in groups) {
            if (groups.hasOwnProperty(groupName)) {
                if (groupName === name) return true;
            }
        }
        return false;
    };

    var isEmpty = function (value, fieldType) {
        value = $IU.isBoolean(value) ? value : value || '';
        if (fieldType === 'User' || fieldType === 'Organize' || fieldType === 'Code' || fieldType === 'Thing') {
            return (value['value'] || '') === '';
        } else {
            return value === ''
        }
    };

    var isSame = function (v1, v2, fieldType) {
        v1 = $IU.isBoolean(v1) ? v1 : v1 || '';
        v2 = $IU.isBoolean(v2) ? v2 : v2 || '';
        if (fieldType === 'User' || fieldType === 'Organize' || fieldType === 'Code' || fieldType === 'Thing') {
            return (v1['value'] || '') === (v2['value'] || '');
        }
        if (fieldType === 'File') {
            //都为空
            if (((v1 || '') === '') && ((v2 || '') === '')) {
                return true;
            }
            var fileInfo1 = $.parseJSON(v1),
                fileInfo2 = $.parseJSON(v2);
            //id相同认为相同
            return fileInfo1 != null && fileInfo2 != null && fileInfo1.id === fileInfo2.id;

        }
        return v1 === v2;
    };

    var getHoverText = function (value, fieldType) {
        switch (fieldType) {
            case 'User':
            case 'Organize':
            case 'Code':
            case 'Thing':
                if (value != null && value.name != null) {
                    return value.name;
                } else {
                    return '';
                }
            case "string":
            case "anyURI":
                return value || '';
            case "File":
                var fileInfo = $.parseJSON(value);
                if (fileInfo != null) {
                    return fileInfo.name;
                } else {
                    return '';
                }
            case "integer":
            case "double":
                return (value || '') + '';
            case "boolean":
                return (value === false ? "false" : value || '');
            case "date":
                return $IU.unixTimeToDateString(value) || '';
            case "XHTML":
                //等待处理
                return value || '';
            case "time":
                return $IU.unixTimeToTimeString(value) || '';
            case "dateTime":
                //此类型尚未使用
                break;
            default:
                return value || '';
        }

    };



    var compare = function (oldData, newData, path, diff) {
        for (var key in newData) {
            if (!newData.hasOwnProperty(key)) continue;
            var field = getField(key);
            if (field != null) {
                var newValue = newData[key],
                    oldValue = oldData[key],
                    fieldType = field.type;
                if (!isSame(newValue, oldValue, fieldType)) {
                    var hover = getHoverText(oldValue, fieldType);
                    if (isEmpty(oldValue, fieldType) && !isEmpty(newValue, fieldType)) {
                        diff[key] = {
                            value: hover,
                            type: 'new',
                            path: path
                        };
                        continue;
                    }
                    if (!isEmpty(oldValue, fieldType) && isEmpty(newValue, fieldType)) {
                        diff[key] = {
                            value: hover,
                            type: 'delete',
                            path: path
                        };
                        continue;
                    }
                    diff[key] = {
                        value: hover,
                        type: 'modify',
                        path: path
                    }
                }
            }
            if (isGroups(key)) {
                var newGroup = newData[key],
                    oldGroup = oldData[key];
                if (oldGroup != null && $IU.isArray(oldGroup)) {
                    diff[key] = {
                        rows: [],
                        path: path
                    };
                    //重复部分行数
                    var minRowCount = (newGroup.length > oldGroup.length ? oldGroup.length : newGroup.length);
                    if (oldGroup.length > newGroup.length) {
                        diff[key]['deleteRows'] = (oldGroup.length - newGroup.length);
                    } else {
                        if (oldGroup.length < newGroup.length) {
                            diff[key]['newRowIndex'] = oldGroup.length;
                        }
                    }
                    for (var i = 0; i < minRowCount; i++) {
                        var currentPath = path + "_" + i;
                        var rowDiff = diff[key]['rows'][i] = {};
                        compare(oldGroup[i], newGroup[i], currentPath, rowDiff);
                    }
                } else {
                    diff[key] = {
                        newRowIndex: 0,
                        rows: [],
                        path: path
                    }
                }
            }
        }
        for (key in oldData) {
            if (!oldData.hasOwnProperty(key)) continue;
            if (isGroups(key)) {
                newGroup = newData[key];
                oldGroup = oldData[key];
                //新的数据中不存在这部分重复节表数据，说明有删除
                if (newGroup == null && oldGroup != null) {
                    if (oldGroup.length > 0) {
                        diff[key] = {
                            rows: [],
                            path: path,
                            deleteRows: oldGroup.length
                        }
                    }
                }
            }
        }
    };


    comparer.prototype = {
        oldData: {},
        newData: {},

        compare: function () {
            var diff = {};
            compare(this.oldData, this.newData, "", diff);
            this.showDiff(diff);
            this.createCompareHelper($(".popTip").not(".remarkTip").length > 0);

        },

        showDiff: function (diff) {
            var types = {
                'new': 'infoTip',
                'modify': 'warningTip',
                'delete': 'errorTip'
            };

            var onClose = function (control) {
                return function () {
                    control.clearModified();
                }
            };

            var onRepeatClose = function (repeatControl) {
                return function () {
                    repeatControl.removeClass("modified");
                }
            };

            var onDetailClick = function (repeatControl, masterRow) {
                return function () {
                    if (repeatControl != null) {
                        repeatControl.showDetail(masterRow);
                        return true;
                    }
                    return false;
                }
            };

            var expandedViewLabelsForCheck = $IU.mobileExpandAllViews();

            for (var key in diff) {
                if (!diff.hasOwnProperty(key)) continue;
                var diffObj = diff[key];
                if (diffObj['rows'] != null) {
                    var $$repeatControl = $$("&" + key).filter({path: diffObj.path});
                    if ($$repeatControl.length > 0) {
                        var repeatControl = $$repeatControl[0].control,
                            parent = repeatControl.repeatParentElement;
                        if ($(parent).is(":visible")) {
                            if (diffObj.deleteRows != null && diffObj.deleteRows > 0) {
                                new InfoPlus.Render.PopTip({
                                    popper: parent,
                                    text: (diffObj.rows.length === 0 ? $$.lt("compare.compareType.typeDeleteAll") : $$.lt("compare.compareType.typeDeleteRows", diffObj.deleteRows)),
                                    colorClass: 'errorTip',
                                    placement: 'top',
                                    effect: "bounce",
                                    onClose: onRepeatClose(repeatControl)
                                });
                                repeatControl.setClass("modified");
                            }
                            if (diffObj.newRowIndex != null && diffObj.newRowIndex >= 0) {
                                var $children = repeatControl.getRepeatChildren();
                                for (var i = diffObj.newRowIndex, len = $children.length; i < len; i++) {
                                    new InfoPlus.Render.PopTip({
                                        popper: $children[i],
                                        text: repeatControl.isRepeatTable() ? $$.lt("compare.compareType.typeNewRow") : $$.lt("compare.compareType.typeNewSection"),
                                        colorClass: 'infoTip',
                                        placement: 'top',
                                        effect: "bounce",
                                        onClose: onRepeatClose(repeatControl)
                                    });
                                    var $repeatChildren = repeatControl.getRepeatChildren();
                                    if (i < $repeatChildren.length) {
                                        $($repeatChildren[i]).addClass("modified");
                                    }
                                }
                            }

                            for (i = 0, len = diffObj.rows.length; i < len; i++) {
                                this.showDiff(diffObj.rows[i]);
                            }
                        }
                    }
                } else {
                    var $$control = $$("&" + key).filter({path: diffObj.path});
                    if ($$control.length > 0) {
                        var findValueInItems = function (items, value) {
                            for (var i = 0, len = items.length; i < len; i++) {
                                if (value === items[i].codeId) {
                                    return items[i].codeName;
                                }
                            }
                            return value;
                        };
                        var findNameInOptionNodes = function (nodes, value) {
                            for (var i = 0, len = nodes.length; i < len; i++) {
                                var node = nodes[i];
                                if (node.nodeType === 1 && node.nodeName.toLocaleLowerCase() === 'input') {
                                    if (node.value === value) {
                                        if (i + 1 < len) {
                                            var nextNode = nodes[i + 1];
                                            //文本节点
                                            if (nextNode.nodeType === 3) {
                                                return nextNode.nodeValue;
                                            }
                                        }
                                    }
                                }
                            }
                            return value;
                        };

                        for (i = 0, len = $$control.length; i < len; i++) {
                            var control = $$control[i].control,
                                $detailCell = $(control.element).parents(".detailCell");

                            //以下特殊处理两种控件的值BoundCheckList显示code的显示值，BoundOption显示其后的文本内容
                            //如果是CheckList,那么从控件的Code中转换出显示值
                            if (control.controlType === 'BoundCheckList' && control.field.code != null) {
                                var codes = $$.entity.codes;
                                if (codes != null && codes[control.field.code] != null) {
                                    var codeItems = codes[control.field.code].items;
                                    if (diffObj.value != null) {
                                        var convertValue = '';
                                        var checkListValues = diffObj.value.split(",");
                                        for (var index = 0, l = checkListValues.length; index < l; index++) {
                                            convertValue += findValueInItems(codeItems, checkListValues[index]) + (index === l - 1 ? "" : ",");
                                        }
                                        diffObj.value = convertValue;
                                    }
                                }
                            }
                            if (control.controlType === 'BoundOption') {
                                if (diffObj.value != null) {
                                    diffObj.value = findNameInOptionNodes($(control.element).parent()[0].childNodes, diffObj.value);
                                }
                            }

                            if ($detailCell.size() > 0) {
                                var $detailContent = $detailCell.children();
                                var detailDiffs = $detailContent.data("diffs");
                                if (detailDiffs == null) {
                                    detailDiffs = [];
                                }
                                detailDiffs.push({
                                    control: control,
                                    diff: diffObj
                                });
                                $detailContent.data("diffs", detailDiffs);
                                //如果第一个不同的控件在detail的td里说明在master里面没有，显示详细数据有变更
                                if (i === 0) {
                                    var $masterRow = $detailCell.parent(),
                                        masterRowRepeatControl = $masterRow.parents(".infoplus_repeatParentElement").first().data("repeatControl");
                                    if ($masterRow.data("detailModified") !== true) {
                                        $masterRow.data("detailModified", true);
                                        new InfoPlus.Render.PopTip({
                                            popper: $masterRow[0],
                                            text: $$.lt("compare.compareType.typeDetail"),
                                            colorClass: "warningTip",
                                            placement: 'top-right',
                                            effect: "bounce",
                                            onClick: onDetailClick(masterRowRepeatControl, $masterRow[0])
                                        })
                                    }
                                }
                            } else {
                                if ((control.controlContainer != null && $(control.controlContainer).is(":visible")) || $(control.element).is(":visible")) {
                                    var hoverText = null;
                                    if (diffObj['type'] === "delete" || diffObj['type'] === "modify") {
                                        hoverText = (diffObj.value === "" ? $$.lt("compare.previousValue.empty") : ($$.lt("compare.previousValue.previous") + diffObj.value));
                                    }
                                    new InfoPlus.Render.PopTip({
                                        popper: control.controlContainer || control.element,
                                        text: $$.lt("compare.compareType.type" + diffObj['type'].substr(0, 1).toUpperCase() + diffObj['type'].substr(1)),
                                        hoverText: hoverText,
                                        colorClass: types[diffObj['type']],
                                        placement: 'top-left',
                                        effect: "bounce",
                                        onClose: onClose(control)
                                    });
                                    control.markModified();
                                }
                            }
                            //如果是Option，只有第一个上面显示气泡
                            if (i === 0 && control.controlType === 'BoundOption') {
                                break;
                            }
                        }

                    }
                }
            }

            $IU.mobileShrinkViewsWithNoTips(expandedViewLabelsForCheck);
        },

        createCompareHelper: function (diffFound) {
            var contentDiv = document.createElement("div"),
                $contentDiv = $(contentDiv),
                textSpan = document.createElement("span"),
                $textSpan = $(textSpan),
                closeI = document.createElement("i"),
                $closeI = $(closeI);

            if (diffFound) {
                var clearLink = document.createElement("a");
                var compareNode = document.createTextNode($$.lt("compare.compared")),
                    clearNode = document.createTextNode($$.lt("compare.removeTips"));
                $(clearLink).text($$.lt("compare.clickHereToRemove")).css("font-weight", "bold").css("margin", "0 2px 0 0").css("cursor", "pointer");
                $textSpan.append(compareNode).append(clearLink).append(clearNode);
            } else {
                $(textSpan).text($$.lt("compare.same"));
            }

            $closeI.addClass("i-icon-close2 infoplus_tip_close").attr("title", $$.lt("entrust.close"));
            $contentDiv.append(textSpan).append(closeI);

            var helper = new InfoPlus.Render.CommandBarHelper({
                content: contentDiv,
                position: "top",
                backgroundColor: "#fff9c4"
            });

            var $commandBar = $("#form_command_bar");
            if ($commandBar.length > 0) {
                $commandBar.append(helper.element);
            } else {
                $(document.body).append(helper.element);
            }

            $(clearLink).click(function () {
                comparer.clearAll();
                return false;
            });

            $(closeI).click(function () {
                comparer.clearAll();
                return false;
            });
            setTimeout(function () {
                helper.show($commandBar.length === 0);
            }, 500);

            $$.params.diffHelper = helper;
        }


    };

    define("InfoPlus.Comparer", comparer);

})(window);
/**
 * MemoMaker 审批备注工具类
 * Created by yech on 18-5-14.
 */

(function (window, undefined) {
    var memoMaker = function (options) {
        this.options = options;
        this.init();
    };

    var controls = [],
        blocks = [],
        x = [],
        y = [];

    var findControls = function () {

        var compareNumber = function (a, b) {
            return a - b;
        };

        //无重复的插入数组中
        var pushArray = function (array, val) {
            for (var i = 0, len = array.length; i < len; i++) {
                if (array[i] === val) {
                    return;
                }
            }
            array.push(val);
        };

        $$.params.renderForm.find("." + $Control.CLASSNAME_CONTROL).each(function () {
            if (!$(this).is(":visible")) return;
            var control = $(this).data($Control.DATA_CONTROL_OBJECT);
            if (control == null) {
                var originInput = $(this).data($Control.DATA_ORIGIN_INPUT);
                control = $(originInput).data($Control.DATA_CONTROL_OBJECT)
            }

            if (control != null) {
                var position = control.getPosition();
                if (position != null) {
                    controls.push({control: control, position: position});
                    pushArray(x, Math.ceil(position.left));
                    pushArray(x, Math.floor(position.left + position.width));
                    pushArray(y, Math.ceil(position.top));
                    pushArray(y, Math.floor(position.top + position.height));
                }
            }
        });

        //controls按照top排序
        controls.sort(function (a, b) {
            return a.position.top - b.position.top;
        });


        /*
        for (var i = 0, len = controls.length; i < len; i++) {
            $$.log(controls[i].control.field.name + "," + controls[i].control.path + ":" + $.toJSON(controls[i].position));
        }
        */

        //x,y分别插入第一个坐标0，和最后一个坐标，最后排序
        x.unshift(0);
        x.push(document.body.scrollWidth);
        y.unshift(0);
        y.push(document.body.scrollHeight);
        x.sort(compareNumber);
        y.sort(compareNumber);
    };

    //获取所有应该产生的网格层的区域块
    var getBlocks = function () {

        //过滤控件，将可能在y1,y2两者之间的控件取出来
        var filterControls = function (y1, y2, controls) {
            var fc = [];
            for (var i = 0, len = controls.length; i < len; i++) {
                var position = controls[i].position;
                if (y2 > Math.ceil(position.top)) {
                    if (y1 < Math.floor(position.top + position.height)) {
                        fc.push(controls[i]);
                    }
                } else {
                    break;
                }
            }
            return fc;
        };

        //找出在rect中的控件,因为前面已经判断过y坐标，这里只需要考虑x坐标即可
        var findControlInRect = function (rect, controls) {
            var rectInControlArea = function (control) {
                var position = control.position;
                return rect.x2 > Math.ceil(position.left) && rect.x1 < Math.floor(position.left + position.width);
            };
            for (var i = 0, len = controls.length; i < len; i++) {
                var control = controls[i];
                if (rectInControlArea(control)) {
                    return control.control;
                }
            }
            return null;
        };

        //判断当前block是否可以和上一行的某个block合并
        var shouldMerge = function (block, prevRow) {
            for (var i = 0, len = prevRow.length; i < len; i++) {
                var prevBlock = prevRow[i];
                if (block.rect.x1 === prevBlock.rect.x1 && block.rect.x2 === prevBlock.rect.x2 && block.rect.y1 === prevBlock.rect.y2) {
                    prevBlock.rect.y2 = block.rect.y2;
                    return true;
                }
            }
            return false;
        };


        //根据x,y坐标，组成区块数组，已经考虑了x坐标上的合并
        for (var indexY = 1, lenY = y.length; indexY < lenY; indexY++) {
            var y1 = y[indexY - 1],
                y2 = y[indexY];
            //先根据y坐标，将所有控件过滤一遍，将可能在这两个y之间的控件取出来
            var judgeControls = filterControls(y1, y2, controls);
            var rowBlocks = [];
            if (judgeControls.length === 0) {
                rowBlocks.push({rect: {x1: 0, y1: y1, x2: x[x.length - 1], y2: y2}});
            } else {
                for (var indexX = 1, lenX = x.length; indexX < lenX; indexX++) {
                    var x1 = x[indexX - 1],
                        x2 = x[indexX];
                    var rect = {x1: x1, y1: y1, x2: x2, y2: y2};
                    //取在rect这个矩形中的控件
                    var control = findControlInRect(rect, judgeControls);
                    if (rowBlocks.length > 0) {
                        var lastBlock = rowBlocks[rowBlocks.length - 1];
                        if (lastBlock.control == null) {
                            //上一个block中没控件，这个也没有，那么合并
                            if (control == null) {
                                lastBlock.rect.x2 = rect.x2;
                                lastBlock.rect.y2 = rect.y2;
                            } else {
                                //上一个block中没控件，这个有
                                rowBlocks.push({rect: rect, control: control});
                            }
                        } else {
                            //上一个block中有控件，这个block中也有控件
                            if (control != null) {
                                //上一个block中的控件和这个block中的控件是同一个，那么就合并两个block
                                if (lastBlock.control.field.name === control.field.name) {
                                    lastBlock.rect.x2 = rect.x2;
                                    lastBlock.rect.y2 = rect.y2;
                                } else {
                                    //不是同一个控件
                                    rowBlocks.push({rect: rect, control: control});
                                }
                            } else {
                                //上一个block中有控件，这个block没有
                                rowBlocks.push({rect: rect, control: control});
                            }
                        }
                    } else {
                        rowBlocks.push({rect: rect, control: control});
                    }
                }
            }
            blocks.push(rowBlocks);
        }

        //考虑在y坐标上合并
        for (var rowIndex = blocks.length - 1; rowIndex > 0; rowIndex--) {
            var currentRow = blocks[rowIndex],
                prevRow = blocks[rowIndex - 1],
                newRow = [];
            for (var colIndex = 0; colIndex < currentRow.length; colIndex++) {
                var block = currentRow[colIndex];
                if (!shouldMerge(block, prevRow)) {
                    newRow.push(block);
                }
            }
            blocks[rowIndex] = newRow;
        }


    };

    memoMaker.prototype = {


        init: function () {
            InfoPlus.Render.PopTip.clear(true, true);
            findControls();
            getBlocks();
        },

        renderRemarkDiv: function () {
            var options = this.options,
                data = options.data;
            var checkFlag;
            var checkMemoCount = function () {
                count = 0;
                var tipCount = 0;
                $maskDiv.find(".popTip.remarkTip").each(function () {
                    tipCount++;
                    var $memoInputDiv = $(this).find(".memo_input_div");
                    if ($memoInputDiv.length > 0) {
                        if ($IU.trimString($memoInputDiv[0].innerText) !== '') {
                            count++;
                        }
                    }
                });
                if (count !== $tipDiv.data("count")) {
                    if (count > 0) {
                        $tipDiv.html($$.lt("review.tipCount", count, count > 1 ? "s" : ""));
                    } else {
                        $tipDiv.text($$.lt("review.tip"));
                    }
                    $menuDiv.css("left", "0").css("margin-left", "-" + $menuDiv.outerWidth() / 2 + "px").css("left", "");
                    $tipDiv.data("count", count);
                }
            };

            var startCheck = function () {
                checkFlag = setInterval(checkMemoCount, 100);
            };

            var stopCheck = function () {
                clearInterval(checkFlag);
            };

            var createTip = function (maskDiv, whiteBlock, data) {
                var containerDiv = document.createElement("div"),
                    $containerDiv = $(containerDiv),
                    contentDiv = document.createElement("div"),
                    $contentDiv = $(contentDiv);
                $contentDiv.attr("contenteditable", "true").addClass("memo_input_div");
                if (data != null) {
                    $contentDiv.html(data.html);
                }

                $containerDiv.append(contentDiv);

                var tip = new InfoPlus.Render.PopTip({
                    popper: whiteBlock,
                    container: maskDiv,
                    content: containerDiv,
                    colorClass: 'remarkTip',
                    placement: 'top',
                    location: 'bottom',
                    onMaximized: function () {
                        popMenu.showMenuItems(["minimize", "remove"]);
                    }
                });

                var popMenu = new InfoPlus.Render.PopMenu({
                    container: tip.element,
                    items: [{
                        id: "maximize",
                        text: $$.lt("review.menu.maximize"),
                        iconClass: "i-icon-triangle-up",
                        initVisible: false,
                        switchItems: ["minimize", "remove"],
                        click: function () {
                            stopCheck();
                            tip.maximize(function () {
                                startCheck();
                            });
                            popMenu.show();
                        }
                    }, {
                        id: "minimize",
                        text: $$.lt("review.menu.minimize"),
                        iconClass: "i-icon-triangle-down",
                        switchItems: ["maximize"],
                        click: function () {
                            stopCheck();
                            tip.minimize(function () {
                                startCheck();
                            });
                        }
                    }, {
                        id: "remove",
                        text: $$.lt("review.menu.remove"),
                        iconClass: "i-icon-delete",
                        click: function () {
                            tip.close();
                            $(whiteBlock).removeData("memoContentDiv");
                        }
                    }]
                });

                if (data == null) {
                    $contentDiv.focus();
                }
                $(whiteBlock).data("memoContentDiv", contentDiv);
            };

            var maskDiv = document.createElement("div"),
                $maskDiv = $(maskDiv);
            this.maskDiv = maskDiv;
            $maskDiv.attr("id", "memo_mask_div");
            var divCount = 0;
            for (var rowIndex = 0, rowLen = blocks.length; rowIndex < rowLen; rowIndex++) {
                var row = blocks[rowIndex];
                for (var colIndex = 0, colLen = row.length; colIndex < colLen; colIndex++) {
                    var block = row[colIndex];
                    var blockDiv = document.createElement("div"),
                        $blockDiv = $(blockDiv);
                    if (block.control == null) {
                        $blockDiv.addClass("memo_dark_block_div");
                    } else {
                        $blockDiv.addClass("memo_white_block_div");
                        var innerDiv = document.createElement("div");
                        $(innerDiv).addClass("memo_white_inner_block_div");
                        $blockDiv.append(innerDiv);
                    }
                    $blockDiv.css("left", block.rect.x1 + "px")
                        .css("top", block.rect.y1 + "px")
                        .css("width", (block.rect.x2 - block.rect.x1) + "px")
                        .css("height", (block.rect.y2 - block.rect.y1) + "px")
                        .data("position", {
                            left: block.rect.x1,
                            top: block.rect.y1,
                            width: block.rect.x2 - block.rect.x1,
                            height: block.rect.y2 - block.rect.y1
                        })
                        .data($Control.DATA_CONTROL_OBJECT, block.control);
                    $maskDiv.append(blockDiv);
                    divCount++;
                }
            }

            $maskDiv.on("click", ".memo_white_block_div", function (event) {
                if ($(event.target).hasClass("memo_white_inner_block_div")) {
                    if ($(this).data("memoContentDiv") != null) {
                        $($(this).data("memoContentDiv")).focus();
                    } else {
                        createTip(maskDiv, this);

                    }
                    return false;
                }
            });


            var menuDiv = document.createElement("div"),
                $menuDiv = $(menuDiv);
            this.menuDiv = menuDiv;
            var tipDiv = document.createElement("div"),
                $tipDiv = $(tipDiv),
                toolDiv = document.createElement("div"),
                $toolDiv = $(toolDiv);
            $tipDiv.text($$.lt("review.tip"));
            $menuDiv.addClass("memo_input_menu round-corner z-depth-1").append(tipDiv).append(toolDiv);
            $tipDiv.addClass("memo_input_tip");


            var cancelLink = document.createElement("a"),
                okLink = document.createElement("a");
            //取消按钮先藏起来，也许以后会用
            $(cancelLink).attr("href", "#").text($$.lt("review.cancel")).hide();
            $(okLink).attr("href", "#").text($$.lt("review.ok")).addClass("default");
            $toolDiv.addClass("memo_input_tool").append(cancelLink).append(okLink);

            $maskDiv.append(menuDiv);
            $(document.body).append(maskDiv);


            $(okLink).click(function () {
                clearInterval(checkFlag);
                options.onFinish();
                return false;
            });
            $(cancelLink).click(function () {
                clearInterval(checkFlag);
                options.onCancel();
                return false;
            });

            $tipDiv.data("count", 0);
            if (data != null && data.length > 0) {
                var findWhiteBlockDiv = function (fieldName, path) {
                    var whiteBlock = null;
                    $maskDiv.children(".memo_white_block_div").each(function () {
                        var control = $(this).data($Control.DATA_CONTROL_OBJECT);
                        if (control.field.name === fieldName && control.path === path) {
                            whiteBlock = this;
                        }
                    });
                    return whiteBlock;
                };
                var count = 0;
                for (var i = 0, len = data.length; i < len; i++) {
                    var whiteBlock = findWhiteBlockDiv(data[i].field, data[i].path);
                    if (whiteBlock != null) {
                        createTip(maskDiv, whiteBlock, data[i]);
                        count++;
                    }
                }
                if (count > 0) {
                    $tipDiv.html($$.lt("review.tipCount", count, count > 1 ? "s" : ""));
                    $tipDiv.data("count", count);
                }
            }
            //这里先设置left为0，防止移动版中因为文字多，超出屏幕后outerWidth算错，最后再将left设置回来
            $menuDiv.css("left", "0").css("margin-left", "-" + $menuDiv.outerWidth() / 2 + "px").css("left", "");
            $menuDiv.data("position", {
                "margin-top": "-" + ($(window).height() / 2 - $menuDiv.offset().top) + "px",
                "margin-left": $menuDiv.css("margin-left"),
                left: $menuDiv.offset().left + "px",
                top: $menuDiv.offset().top + "px",
                bottom: ($(window).height() - $menuDiv.offset().top - $menuDiv.outerHeight()) + "px",
                width: $menuDiv.outerWidth() + "px",
                height: $menuDiv.outerHeight() + "px"
            });

            $maskDiv.hide();

            setTimeout(startCheck, 1000);

        },

        getMenuDivPosition: function (positions) {
            var position = $(this.menuDiv).data("position");
            var retVal = {};
            for (var i = 0, len = positions.length; i < len; i++) {
                if (position.hasOwnProperty(positions[i])) {
                    retVal[positions[i]] = position[positions[i]];
                }
            }
            return retVal;
        },

        render: function () {
            this.renderRemarkDiv();
        },

        show: function () {
            $(this.maskDiv).show();
        },

        close: function () {
            controls = [];
            blocks = [];
            x = [];
            y = [];
            $(this.maskDiv).empty().remove();
        }

    };

    define("InfoPlus.MemoMaker", memoMaker);

})(window);
/**
 * 坐标转换类
 * @Author yech
 * @Since 2018/07/16
 */
(function (window, undefined) {

    var x_PI = 3.14159265358979324 * 3000.0 / 180.0;
    var PI = 3.1415926535897932384626;
    var a = 6378245.0;
    var ee = 0.00669342162296594323;
    /**
     * 百度坐标系 (BD-09) 与 火星坐标系 (GCJ-02)的转换
     * 即 百度 转 谷歌、高德
     * @param bd_lon
     * @param bd_lat
     * @returns {*[]}
     */
    var bd09togcj02 = function bd09togcj02(bd_lon, bd_lat) {
        var bd_lon = +bd_lon;
        var bd_lat = +bd_lat;
        var x = bd_lon - 0.0065;
        var y = bd_lat - 0.006;
        var z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * x_PI);
        var theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * x_PI);
        var gg_lng = z * Math.cos(theta);
        var gg_lat = z * Math.sin(theta);
        return [gg_lng, gg_lat]
    };

    /**
     * 火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换
     * 即谷歌、高德 转 百度
     * @param lng
     * @param lat
     * @returns {*[]}
     */
    var gcj02tobd09 = function gcj02tobd09(lng, lat) {
        var lat = +lat;
        var lng = +lng;
        var z = Math.sqrt(lng * lng + lat * lat) + 0.00002 * Math.sin(lat * x_PI);
        var theta = Math.atan2(lat, lng) + 0.000003 * Math.cos(lng * x_PI);
        var bd_lng = z * Math.cos(theta) + 0.0065;
        var bd_lat = z * Math.sin(theta) + 0.006;
        return [bd_lng, bd_lat]
    };

    /**
     * WGS84转GCj02
     * @param lng
     * @param lat
     * @returns {*[]}
     */
    var wgs84togcj02 = function wgs84togcj02(lng, lat) {
        var lat = +lat;
        var lng = +lng;
        if (out_of_china(lng, lat)) {
            return [lng, lat]
        } else {
            var dlat = transformlat(lng - 105.0, lat - 35.0);
            var dlng = transformlng(lng - 105.0, lat - 35.0);
            var radlat = lat / 180.0 * PI;
            var magic = Math.sin(radlat);
            magic = 1 - ee * magic * magic;
            var sqrtmagic = Math.sqrt(magic);
            dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * PI);
            dlng = (dlng * 180.0) / (a / sqrtmagic * Math.cos(radlat) * PI);
            var mglat = lat + dlat;
            var mglng = lng + dlng;
            return [mglng, mglat]
        }
    };

    /**
     * GCJ02 转换为 WGS84
     * @param lng
     * @param lat
     * @returns {*[]}
     */
    var gcj02towgs84 = function gcj02towgs84(lng, lat) {
        var lat = +lat;
        var lng = +lng;
        if (out_of_china(lng, lat)) {
            return [lng, lat]
        } else {
            var dlat = transformlat(lng - 105.0, lat - 35.0);
            var dlng = transformlng(lng - 105.0, lat - 35.0);
            var radlat = lat / 180.0 * PI;
            var magic = Math.sin(radlat);
            magic = 1 - ee * magic * magic;
            var sqrtmagic = Math.sqrt(magic);
            dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * PI);
            dlng = (dlng * 180.0) / (a / sqrtmagic * Math.cos(radlat) * PI);
            var mglat = lat + dlat;
            var mglng = lng + dlng;
            return [lng * 2 - mglng, lat * 2 - mglat]
        }
    };

    var transformlat = function transformlat(lng, lat) {
        var lat = +lat;
        var lng = +lng;
        var ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + 0.1 * lng * lat + 0.2 * Math.sqrt(Math.abs(lng));
        ret += (20.0 * Math.sin(6.0 * lng * PI) + 20.0 * Math.sin(2.0 * lng * PI)) * 2.0 / 3.0;
        ret += (20.0 * Math.sin(lat * PI) + 40.0 * Math.sin(lat / 3.0 * PI)) * 2.0 / 3.0;
        ret += (160.0 * Math.sin(lat / 12.0 * PI) + 320 * Math.sin(lat * PI / 30.0)) * 2.0 / 3.0;
        return ret
    };

    var transformlng = function transformlng(lng, lat) {
        var lat = +lat;
        var lng = +lng;
        var ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + 0.1 * lng * lat + 0.1 * Math.sqrt(Math.abs(lng));
        ret += (20.0 * Math.sin(6.0 * lng * PI) + 20.0 * Math.sin(2.0 * lng * PI)) * 2.0 / 3.0;
        ret += (20.0 * Math.sin(lng * PI) + 40.0 * Math.sin(lng / 3.0 * PI)) * 2.0 / 3.0;
        ret += (150.0 * Math.sin(lng / 12.0 * PI) + 300.0 * Math.sin(lng / 30.0 * PI)) * 2.0 / 3.0;
        return ret
    };

    /**
     * 判断是否在国内，不在国内则不做偏移
     * @param lng
     * @param lat
     * @returns {boolean}
     */
    var out_of_china = function out_of_china(lng, lat) {
        var lat = +lat;
        var lng = +lng;
        // 纬度3.86~53.55,经度73.66~135.05
        return !(lng > 73.66 && lng < 135.05 && lat > 3.86 && lat < 53.55);
    };


    var transform = {
        bdtowgs: function (lng, lat) {
            var mid = bd09togcj02(lng, lat);
            return gcj02towgs84(mid[0], mid[1]);
        },

        wgstobd: function (lng, lat) {
            var mid = wgs84togcj02(lng, lat);
            return gcj02tobd09(mid[0], mid[1]);
        },

        bdtogcj: bd09togcj02,
        gcjtobd: gcj02tobd09
    };


    define("InfoPlus.CoordTransform", transform);

})(window);

﻿/**
 * Suggester Input with Ajax Callback suggestions.
 * Author: marstone.net
 * Since: 2009/07/01
 **/

/**
 *   mode: [Flags]
 *      bit[0]:allow external values
 *      bit[1]:allow dynamic size adjust
 *      bit[2]:readonly
 *      bit[3]:disable page
 *      bit[4]:select empty item appear
 **/

(function (window, undefined) {

    var suggester = function (field, dataElement, data, text, type, code, mode, tipFormat, suggestService, suggestInitializeService) {
        // Save parameters passed.
        this.field = field;
        this.mode = mode;
        this.tipFormat = tipFormat;
        this.type = type;
        this.code = code;
        this.data = data;
        this.text = text;
        this.dataElement = dataElement;
        this.path = $(dataElement).data($Control.DATA_PATH);
        this.suggestService = suggestService || "";
        this.suggestMinimizeSize = (this.type === $Control.DATA_TYPE_USER ? 2 : 0);
        //如果是user类型且settings里面设置了userTraversal===true，那么就不必输入2个以上字符才请求
        if (this.type === $Control.DATA_TYPE_USER && field.settings != null && field.settings.userTraversal === true) {
            this.suggestMinimizeSize = 0;
        }
        this.suggestInitializeService = suggestInitializeService;
        this.clearFocusFlag();
        this.createSuggester();

    };

    //consts
    suggester.KEY_CODE_ENTER = 13;
    suggester.KEY_CODE_BACKSPACE = 8;
    suggester.KEY_CODE_ESC = 27;
    suggester.KEY_CODE_PAGE_UP = 33;
    suggester.KEY_CODE_PAGE_DOWN = 34;
    suggester.KEY_CODE_UP = 38;
    suggester.KEY_CODE_DOWN = 40;
    suggester.KEY_CODE_DELETE = 46;
    suggester.KEY_CODE_TAB = 9;

    suggester.CLASSNAME_SUGGESTER_ITEM = "infoplus_suggester_item";
    suggester.CLASSNAME_SUGGESTER_ITEM_SELECT = "suggest_selected";
    suggester.CLASSNAME_SUGGESTER_ITEM_UNSELECT = "suggest_unselected";
    suggester.CLASSNAME_SUGGESTER_DIV = "suggest_div";
    suggester.CLASSNAME_SUGGESTER_LOADING = "suggest_loading";
    suggester.CLASSNAME_SUGGESTER_FRAME_OUTER = "suggest_frame_outer";
    suggester.CLASSNAME_SUGGESTER_FRAME_INNER = "suggest_frame_inner";
    suggester.CLASSNAME_SUGGESTER_ACTIVE_DIV = "active_div";
    suggester.CLASSNAME_SUGGESTER_ACTIVE_TIP_CONTAINER = "active_tip_container";
    suggester.CLASSNAME_SUGGESTER_BUTTON = "suggest_button";
    suggester.CLASSNAME_SUGGESTER_ACTIVE_INPUT = "active_input";
    suggester.CLASSNAME_SUGGESTER_ACTIVE_INPUT_GRAY = "active_input_gray";
    suggester.CLASSNAME_SUGGESTER_ACTIVE_INPUT_FOCUS = "active_input_focus";
    suggester.CLASSNAME_SUGGESTER_MORE_ITEM = "infoplus_suggester_item_more";
    suggester.CLASSNAME_SUGGESTER_MORE_USER = "infoplus_suggester_user_more";
    suggester.CLASSNAME_SUGGESTER_MORE_ITEM_DOWN = "infoplus_suggester_item_more_down";
    suggester.CLASSNAME_SUGGESTER_MORE_ITEM_LOADING = "infoplus_suggester_item_more_loading";
    suggester.CLASSNAME_SUGGESTER_EMPTY_ITEM = "infoplus_suggester_item_empty";
    suggester.CLASSNAME_CONTROL = "infoplus_control";
    suggester.CLASSNAME_READONLY = "infoplus_readonly";

    suggester.DATA_SUGGESTER_ATTRIBUTES = "attributes";
    suggester.DATA_SUGGESTER_MORE_ITEM = "moreItem";
    suggester.DATA_SUGGESTER_EMPTY_ITEM = "emptyItem";

    suggester.PAGE_ITEM_COUNT = 15;
    suggester.PAGE_ITEM_HEIGHT = 25;
    suggester.PAGE_ITEM_PADDING_TOP = 2;
    suggester.PAGE_ITEM_PADDING_BOTTOM = 2;
    suggester.SUGGEST_DIV_PADDING_TOP = 2;
    suggester.SUGGEST_DIV_PADDING_BOTTOM = 2;

    suggester.MODE_FLAG_EXTERNAL_VALUE = 0x01;
    suggester.MODE_FLAG_AUTOSIZE = 0x02;
    suggester.MODE_FLAG_READONLY = 0x04;
    suggester.MODE_FLAG_DISAPPEAR = 0x08;
    suggester.MODE_FLAG_DISABLE_MULTIPAGE = 0x10;
    suggester.MODE_FLAG_EMPTY_ITEM_APPEAR = 0x20;

    suggester.SUBMIT_DELAY = 500;

    suggester.prototype = {

        activeInputValidateClass: null,

        createSuggester: function () {
            this.initOuterFrame();
            this.initInnerFrame();
            this.initData();
            this.initActiveDiv();
            this.initActiveInput();
            this.initSuggestDiv();
            this.initEmptyDiv();
            this.initSuggestButton();
            this.initFieldChange();
            this.initValidateClass();
            this.delegateEvent();
        },

        initOuterFrame: function () {
            var div = document.createElement("div");
            this.container = div;
            //复制控件的style到outer frame div上
            if (this.dataElement.style != null) {
                //只复制font,height,width
                var isNeededCss = function (name) {
                    name = name.toLowerCase();
                    return name.indexOf("font") !== -1 || name === "height" || name === "width";
                };
                var cssArray = this.dataElement.style.cssText.split(";");
                for (var cssIndex = 0; cssIndex < cssArray.length; cssIndex++) {
                    var cssDetail = cssArray[cssIndex].split(":");
                    if (cssDetail.length === 2) {
                        var cssName = $IU.trimString(cssDetail[0]);
                        var cssValue = $IU.trimString(cssDetail[1]);
                        if (isNeededCss(cssName)) {
                            $(div).css(cssName, cssValue);
                        }
                    }
                }
            }
            this.dataElement.style.display = 'none';
            div.appendChild(this.dataElement);
            div.className = InfoPlus.Suggester.CLASSNAME_SUGGESTER_FRAME_OUTER;
            if (this.isDisappear()) {
                div.style.display = 'none';
            }
        },

        initInnerFrame: function () {
            var div = document.createElement("div"),
                $div = $(div);
            this.inputDiv = div;
            $(div).addClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_FRAME_INNER);
            //将inner outter div的宽度都设置成一样,避免chrome中当宽度小于150时渲染出错
            $div.css("width", this.container.style.width);
            var containerHeight = $(this.container).outerHeight();
            $div.css("height", (containerHeight < 22 ? 24 : (containerHeight + 2)) + "px");
            this.container.appendChild(this.inputDiv);
        },

        initData: function () {
            // Data suggested by server using ajax call.
            this.suggestData = [];
            // HTML elements that holds each suggest item
            this.suggestItems = [];
            this.currentLastPageNo = 1;


            // set last submit time to 1970/01/01
            this.lastSubmitTime = 0;
            this.lastInitialize = 0;
            // initialization no less than 30 seconds
            this.initializeInterval = 30 * 1000;

            this.lastSubmitValue = '';

            // Generate display HTML elments Ids prefix
            this.prefix = this.container["id"];
            if (null == this.prefix || "" === this.prefix)
                this.prefix = this.dataElement["id"];
            this.prefix += Math.round(Math.random() * 1000);
        },

        initActiveDiv: function () {
            var activeDiv = document.createElement("div");
            activeDiv.setAttribute("id", this.prefix + "_activeDiv");
            activeDiv.setAttribute("class", InfoPlus.Suggester.CLASSNAME_SUGGESTER_ACTIVE_DIV);
            this.inputDiv.appendChild(activeDiv);
            this.activeDiv = activeDiv;
        },

        initActiveInput: function () {
            var activeInput = document.createElement("input");
            activeInput.style.width = "100%";
            if (this.dataElement.style != null) {
                //复制dataElement.style到activeInput.style
                if (this.dataElement.style.cssText != null) {
                    //只复制font与height,别的style需要的话再加
                    var isNeededCss = function (name) {
                        name = name.toLowerCase();
                        return name.indexOf("font") !== -1 || name === "height";
                    };
                    var cssArray = this.dataElement.style.cssText.split(";");
                    for (var cssIndex = 0; cssIndex < cssArray.length; cssIndex++) {
                        var cssDetail = cssArray[cssIndex].split(":");
                        if (cssDetail.length === 2) {
                            var cssName = $IU.trimString(cssDetail[0]).toLowerCase();
                            var cssValue = $IU.trimString(cssDetail[1]).toLowerCase();
                            if (isNeededCss(cssName)) {
                                $(activeInput).css(cssName, cssValue);
                            }
                        }
                    }

                }
            }
            activeInput.setAttribute("id", this.prefix + "_activeInput");
            activeInput.setAttribute("type", "text");
            activeInput.setAttribute("maxlength", "100");
            $(activeInput).data($Control.DATA_ORIGIN_INPUT, this.dataElement).data($Control.DATA_IS_CONTROL, true).css("display", "block");

            if (this.isReadOnly()) {
                activeInput.setAttribute("readOnly", "true");
            }

            activeInput.value = this.text || "";
            activeInput.setAttribute("class", this.getActiveInputClass(false));

            this.activeDiv.appendChild(activeInput);
            this.activeInput = activeInput;
        },

        initSuggestDiv: function () {
            var suggestDiv = document.createElement("div");
            suggestDiv.id = this.prefix + "_suggestDiv";
            suggestDiv.className = InfoPlus.Suggester.CLASSNAME_SUGGESTER_DIV;
            suggestDiv.style.display = "none";
            $(suggestDiv).attr("tabindex", Math.random() * 1000 + 100000);
            this.activeDiv.appendChild(suggestDiv);
            this.suggestDiv = suggestDiv;
        },

        initEmptyDiv: function () {
            var emptyDiv = document.createElement("div");
            this.emptyDiv = emptyDiv;
            emptyDiv.id = this.prefix + "_emptyDiv";
            emptyDiv.className = InfoPlus.Suggester.CLASSNAME_SUGGESTER_DIV;
            emptyDiv.style.backgroundColor = "#eeeeee";
            this.setEmptyDivContent();
            emptyDiv.style.display = "none";
            this.activeDiv.appendChild(emptyDiv);

        },

        initSuggestButton: function () {
            var activeTip = document.createElement("div");
            var suggestButton = document.createElement("div"),
                $suggestButton = $(suggestButton);
            activeTip.setAttribute("class", InfoPlus.Suggester.CLASSNAME_SUGGESTER_ACTIVE_TIP_CONTAINER);
            $suggestButton.attr("id", this.prefix + "_suggestButton").addClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_BUTTON);
            switch (this.type) {
                case "User":
                    $suggestButton.css("backgroundPosition", "-80px 0px");
                    break;
                case "Organize":
                    $suggestButton.css("backgroundPosition", "-128px 0px");
                    break;
                case "Code":
                default:
                    $suggestButton.css("backgroundPosition", "0px 0px");
                    break;
            }
            var styleHeight = this.container.style.height,
                containerHeight =  $(this.activeInput).height();
            if (containerHeight !== 0) {
                if ($IU.endWith(styleHeight, "rem")) {
                    //var rootFontSize = parseInt($("html").css("font-size"), 10);
                    var rootFontSize = parseFloat($("html").css("font-size"));
                    $suggestButton.css("top", ((containerHeight - 16 / rootFontSize) / 2) + "rem");
                } else {
                    $suggestButton.css("top", ((containerHeight - 16) / 2) + "px");
                }
            }
            activeTip.appendChild(suggestButton);
            this.activeDiv.appendChild(activeTip);
            this.activeTip = activeTip;
            this.suggestButton = suggestButton;
        },

        initValidateClass: function () {
            //add validate class to activeInput
            var classes = this.dataElement.className.split(" ");
            for (var i = 0; i < classes.length; i++) {
                var className = classes[i];
                if (className.substr(0, 9) === 'validate[') {
                    this.activeInputValidateClass = className;
                    $(this.activeInput).addClass(className)
                        .data($Control.DATA_VALIDATOR, $(this.dataElement).data($Control.DATA_VALIDATOR))
                        .data($Control.DATA_VALIDATOR_PROMPT_POSITION, $(this.dataElement).data($Control.DATA_VALIDATOR_PROMPT_POSITION));
                    $(this.dataElement).removeClass(className);
                }
            }
        },

        setSuggesterStyle: function (name, value) {
            $IU.setDynamicStyle(this.container, name, value);
            $IU.setDynamicStyle(this.activeInput, name, value);
        },

        getSuggesterStyle: function (name) {
            $IU.getElementStyle(this.container, name);
        },

        delegateEvent: function () {
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_ITEM, "mouseenter", {suggester: this}, this.onSuggesterItemMouseEnter);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_ITEM, "mousedown", {suggester: this}, this.onSuggesterItemMouseDown);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_MORE_ITEM, "click", {suggester: this}, this.onSuggesterMoreItemClick);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_FRAME_OUTER, "click", {suggester: this}, this.onSuggesterContainerClick);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_FRAME_INNER, "click", {suggester: this}, this.onSuggesterContainerClick);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_BUTTON, "click", {suggester: this}, this.onSuggesterContainerClick);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_ACTIVE_INPUT, "blur", {suggester: this}, this.onSuggesterActiveInputBlur);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_ACTIVE_INPUT, "focus", {suggester: this}, this.onSuggesterActiveInputFocus);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_ACTIVE_INPUT, "keydown", {suggester: this}, this.onSuggesterActiveInputKeyDown);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_ACTIVE_INPUT, "keyup", {suggester: this}, this.onSuggesterActiveInputKeyUp);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_ACTIVE_INPUT, "keypress", {suggester: this}, this.onSuggesterActiveInputKeyPress);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_BUTTON, "click", {suggester: this}, this.onSuggesterButtonClick);

            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_DIV, "focus", {suggester: this}, this.onSuggesterDivFocus);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_DIV, "blur", {suggester: this}, this.onSuggesterDivBlur);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_DIV, "mouseup", {suggester: this}, this.onSuggesterDivMouseUp);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_DIV, "mouseenter", {suggester: this}, this.onSuggesterDivMouseEnter);
            $(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_DIV, "mouseleave", {suggester: this}, this.onSuggesterDivMouseLeave);
            //$(this.container).delegate("." + InfoPlus.Suggester.CLASSNAME_SUGGESTER_DIV, "scroll", {suggester: this}, this.onSuggesterDivScroll);

        },

        initFieldChange: function () {
            var field = this.field;
            if (field != null) {
                if (field.fieldChanging === true) {
                    this.onFieldChange = true;
                }
            }
        },

        dispose: function () {
            this.field = null;
            this.suggestData = null;
            this.suggestItems = null;
            this.dataElement = null;
            if (this.container != null) {
                $(this.container).undelegate();
            }
            this.container = null;
            $(this.container).empty();
        },


        //判断是否自动调整大小
        isAutoSize: function () {
            return this.mode != null && (this.mode & InfoPlus.Suggester.MODE_FLAG_AUTOSIZE) !== 0;
        },

        //判断是否允许外部值
        isAllowExtern: function () {
            return this.mode != null && (this.mode & InfoPlus.Suggester.MODE_FLAG_EXTERNAL_VALUE) !== 0;
        },

        //判断是否只读
        isReadOnly: function () {
            return (this.mode != null && (this.mode & InfoPlus.Suggester.MODE_FLAG_READONLY) !== 0) || this.dataElement.readOnly === true;
        },

        //判断是否不显示
        isDisappear: function () {
            return this.mode != null && (this.mode & InfoPlus.Suggester.MODE_FLAG_DISAPPEAR) !== 0;
        },

        //判断是否只显示单页
        isMultiPageDisabled: function () {
            return this.mode != null && (this.mode & InfoPlus.Suggester.MODE_FLAG_DISABLE_MULTIPAGE) !== 0;
        },

        //判断是否显示<清空>选项
        isEmptyItemAppear: function () {
            return this.mode != null && (this.mode & InfoPlus.Suggester.MODE_FLAG_EMPTY_ITEM_APPEAR) !== 0;
        },

        setData: function (data, text, init, external) {
            text = $IU.trimString(text);

            if (data == null) {
                this.data = this.text = null;
            } else {
                this.data = data.codeId != null ? data.codeId : data;
                if (null != text)
                    this.text = text;
                else
                    this.text = (null != data.codeName) ? data.codeName : data;
            }

            var control = $(this.dataElement).data($Control.DATA_CONTROL_OBJECT);

            var fireChangeEvent = false;

            var oldData = this.getData();
            //如果值发生变化
            if (data == null || (!(oldData === data || oldData === data.codeId))) {
                //如果有children ,清空children的内容
                if (this.children != null) {
                    for (var i = 0; i < this.children.length; i++) {
                        this.children[i].setData(null);
                    }
                }
                //需要触发onFieldChange
                if (control.onFieldChange || control.onFieldRefer || control.onFieldSync) {
                    fireChangeEvent = true;
                }
            }

            if (null != this.dataElement) {
                var tag = this.dataElement.tagName.toLowerCase();
                if ("select" === tag) {
                    var sel = this.dataElement;
                    sel.options.length = 0;
                    var opt = document.createElement("option");
                    opt.value = this.data || "";
                    $(opt).text(this.text);
                    sel.appendChild(opt);
                    opt.value = this.data || "";
                }
                else {
                    this.dataElement.value = this.data || "";
                }
            }

            this.activeInput.value = this.text || "";

            //记录attributes,方便在获取context时候可以获取attributes信息
            var attributes = null;
            if (data != null && data.attributes != null) {
                attributes = data.attributes;
            }
            //$(control.element).data(InfoPlus.Suggester.DATA_SUGGESTER_ATTRIBUTES, attributes);
            control.setAttributes(attributes);
            
            if (fireChangeEvent === true) {
                $(this.dataElement).change();
            }
        },

        getData: function () {
            if (this.dataElement == null) return "";
            return this.dataElement.value;
        },

        setCursor: function (element, pos) {
            var range = element.createTextRange();
            range.collapse(true);
            range.moveStart('character', pos);
            range.select();
        },

        activeFocus: function () {
            for (var i = 0; i < 1; i++) {
                if (this.activeInput) {
                    this.activeInput.focus();
                }
            }
        },


        getActiveInputClass: function (focused) {
            var className = InfoPlus.Suggester.CLASSNAME_CONTROL;
            className += " " + InfoPlus.Suggester.CLASSNAME_SUGGESTER_ACTIVE_INPUT;
            if (this.activeInputValidateClass != null) {
                className += " " + this.activeInputValidateClass;
            }
            if (this.isReadOnly()) {
                className += " " + InfoPlus.Suggester.CLASSNAME_READONLY;
            } else {
                if (focused) {
                    className += " " + InfoPlus.Suggester.CLASSNAME_SUGGESTER_ACTIVE_INPUT_FOCUS;
                }
            }
            return className;
        },

        // Something can be down by CSS, but IE/firefox differ
        adjustView: function () {

            // Calculate data length
            var bStrlen = function (fData) {
                var intLength = 0;
                for (var i = 0; i < fData.length; i++) {
                    if ((fData.charCodeAt(i) < 0) || (fData.charCodeAt(i) > 255))
                        intLength = intLength + 2;
                    else
                        intLength = intLength + 1;
                }
                return intLength;
            };
            if (this.isAutoSize()) {
                var groupSize = 10;
                var length = bStrlen(this.activeInput.value);
                var w = ((length / groupSize) + 1) * groupSize * 6 + 5;
                if (!this.isMobileView()) {
                    this.activeInput.style.width = w + "px";
                } else {
                    var rootFontSize = parseFloat($("html").css("font-size"));
                    this.activeInput.style.width = ((w * 1.35) / rootFontSize) + "rem";
                }

            }
            else {
                this.activeInput.style.width = "100%";
            }
            bStrlen = null;
        },

        getSuggest: function () {
            for (var i = 0; i < this.suggestItems.length; i++)
                if ($(this.suggestItems[i]).hasClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_ITEM_SELECT))
                    return i;
            return -1;
        },

        emptyItemIsSelected: function () {
            var emptyItem = this.getEmptyItem();
            if (emptyItem == null) return false;
            return $(emptyItem).hasClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_ITEM_SELECT);
        },

        selectSuggesterItem: function (item) {
            $(item).removeClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_ITEM_UNSELECT);
            $(item).addClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_ITEM_SELECT);
        },

        unselectSuggesterItem: function (item) {
            $(item).removeClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_ITEM_SELECT);
            $(item).addClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_ITEM_UNSELECT);
        },


        requestCode: function (prefixValue, parent) {

            var instance = this,
                codes = $$.entity.codes,
                code = this.code,
                pageNo = this.currentLastPageNo;

            //对于内部的代码表，请求的是第一页，搜索前缀prefixValue为空,此时需要检查以前有无缓冲数据
            var needCheckCache = function () {
                if (prefixValue !== "") return false;
                if (pageNo !== 1) return false;
                if (code == null) return false;
                return (codes[code] != null && codes[code].codeType === "Internal");

            };

            //获取缓冲数据
            var getCacheData = function () {
                if (codes[code].cache != null && codes[code].cache[parent] != null) {
                    return codes[code].cache[parent];
                }
                return null;
            };

            var lastSubmitTime = new Date().getTime();

            if (needCheckCache()) {
                var cacheData = getCacheData();
                if (cacheData != null) {
                    this.onAjaxCallback(prefixValue, cacheData, lastSubmitTime);
                    instance.emptyDiv.className = InfoPlus.Suggester.CLASSNAME_SUGGESTER_DIV;
                    return;
                }
            }

            this.lastSubmitTime = lastSubmitTime;
            var d = {
                prefix: prefixValue,
                type: this.type,
                code: this.code || null,
                parent: parent,
                isTopLevel: this.field.parent == null,
                pageNo: this.currentLastPageNo - 1,
                rand: Math.random() * 999,
                settings: $.toJSON(this.field.settings == null ? {} : this.field.settings)
            };
            $$.ajax({
                type: "POST",
                url: this.suggestService,
                data: d,
                needParse: false,
                showParseErrMsg: false,
                showAjaxErrMsg: false,
                addFormParam: true
            }).done(function (data) {
                instance.onAjaxCallback(prefixValue, data, lastSubmitTime);
                if (needCheckCache()) {
                    if (codes[code].cache == null) {
                        codes[code].cache = {}
                    }
                    codes[code].cache[parent] = data;
                }
            }).always(function () {
                instance.emptyDiv.className = InfoPlus.Suggester.CLASSNAME_SUGGESTER_DIV;
            });
        },

        suggestAjaxSubmit: function () {
            if (this.activeInput.value.length < this.suggestMinimizeSize) {
                this.suggestData = [];
                this.suggestDiv.style.display = "none";
                this.emptyDiv.style.display = "block";
                this.setEmptyDivContent();
                return;
            }


            if (this.suggestService !== "") {


                // set loading animation
                this.emptyDiv.className = InfoPlus.Suggester.CLASSNAME_SUGGESTER_DIV + " " + InfoPlus.Suggester.CLASSNAME_SUGGESTER_LOADING;

                this.changeLoadingStatus(true);

                var control = $(this.dataElement).data($Control.DATA_CONTROL_OBJECT);
                var parentValue = control.parentValue;

                //如果该suggester有父亲，且parentValue为空，那么就去取一下parent的值，不用每次都取，因为设置parent会产生动态动作,每次父亲值改变时会在动作中修改parentValue值
                if (this.field.parent != null && parentValue == null) {
                    var referedControlPaths = $IU.getReferedControlPaths(this.path);
                    var parentFieldName = this.field.parent;
                    $(document).find("." + $Control.CLASSNAME_CONTROL).each(function () {
                        var thisControl = $(this).data($Control.DATA_CONTROL_OBJECT);
                        if (thisControl == null || thisControl.path == null || thisControl.field == null || thisControl.field.name !== parentFieldName) return;
                        var controlPath = thisControl.path;
                        var len = referedControlPaths.length;
                        for (var index = 0; index < len; index++) {
                            if (referedControlPaths[index] === controlPath) {
                                var val = thisControl.getValue();
                                if (val instanceof $Controls.Data.ValuePair || val instanceof $Controls.Data.Uri) {
                                    parentValue = val.value;
                                } else {
                                    parentValue = val;
                                }
                                control.parentValue = parentValue;
                                return;
                            }
                        }
                    });
                }


                var prefixValue = this.activeInput.value,
                    parent = parentValue == null ? "" : parentValue;

                this.requestCode(prefixValue, parent);
            }
        },

        onAjaxCallback: function (prefixValue, resData, lastSubmitTime) {
            //所获得的数据不是最后一次请求的则忽略
            if (this.lastSubmitTime > lastSubmitTime) return;

            // Do nothing, focus already lost.
            if (this.focused === false) {
                return;
            }

            var getCodeList = function () {
                var codes;
                if (resData.items === undefined) {
                    // No JSON object? use jQuery instead, compatible with IE6
                    if ('undefined' !== typeof (JSON)) {
                        codes = JSON.parse(resData.d);
                    } else {
                        codes = $.parseJSON(resData.d);
                    }
                } else {
                    codes = resData;
                }

                for (var codeIndex = 0, len = codes.items.length; codeIndex < len; codeIndex++) {
                    var data = codes.items[codeIndex];
                    data.codeName = $IU.trimString(data.codeName);
                    data.description = $IU.trimString(data.description);
                }
                return codes;
            };

            this.changeLoadingStatus(false);


            var codeList = getCodeList();

            var originSuggestDataLength = (this.currentLastPageNo === 1 || this.suggestData == null) ? 0 : this.suggestData.length;
            if (this.currentLastPageNo === 1) {
                this.suggestData = codeList.items;
                this.totalResults = codeList.total;
            } else {
                for (var i = 0; i < codeList.items.length; i++) {
                    this.suggestData[this.suggestData.length] = codeList.items[i];
                }
                if (codeList.items.length < InfoPlus.Suggester.PAGE_ITEM_COUNT) {
                    this.removeMoreItem();
                }
            }

            if (this.suggestData == null || this.suggestData.length === 0) {
                this.suggestData = [];
                this.totalResults = null;
                this.suggestDiv.style.display = "none";
                this.emptyDiv.style.display = "block";
                if (this.activeInput.value.length < this.suggestMinimizeSize) {
                    this.setEmptyDivContent();
                } else {
                    this.emptyDiv.innerHTML = $$.lt("suggester.noData");
                }
                this.currentLastPageNo = 1;
                return;
            }
            if (codeList.items.length === 0) {
                if (this.currentLastPageNo > 1) {
                    //所请求的不是第一页，且返回的数据条数为0，说明上一页最后一个正好是所有符合条件的记录的最后一个
                    this.currentLastPageNo -= 1;
                    //clear loading style
                    for (i = 0; i < this.suggestData.length; i++) {
                        var item = this.suggestItems[i];
                        if (item != null) {
                            item.style.background = "";
                        }
                    }
                    //调整高度，去掉more item原来占用的一行高度
                    this.adjustSuggestDiv((this.currentLastPageNo - 1) * InfoPlus.Suggester.PAGE_ITEM_COUNT, InfoPlus.Suggester.PAGE_ITEM_COUNT);
                    //去除lastNextPageRequest对象，否则以后不能requestNextPage
                    this.lastNextPageRequest = null;
                    return;
                }
            }

            this.suggestAjaxShow(originSuggestDataLength, prefixValue);
            var control = $(this.dataElement).data($Control.DATA_CONTROL_OBJECT);
            $$(control).fieldSuggested(prefixValue, codeList.items);
        },

        hasMoreItem: function () {
            if (this.isMultiPageDisabled()) return false;
            return $(this.suggestDiv).data(InfoPlus.Suggester.DATA_SUGGESTER_MORE_ITEM) != null;
        },

        shouldShowMoreItemInSuggestDiv: function (pageFirstItemIndex, pageItemCount) {
            if (this.isMultiPageDisabled()) return false;
            var moreItem = this.getMoreItem();
            if (moreItem == null) return false;
            if (this.suggestItems.length < InfoPlus.Suggester.PAGE_ITEM_COUNT) return false;
            if (pageItemCount < InfoPlus.Suggester.PAGE_ITEM_COUNT) return false;
            //如果本页最后一条就是所有items的最后一条并且moreItemdiv存在就显示moreItem这个div
            return (pageFirstItemIndex + pageItemCount >= this.suggestItems.length);
            //var lastItem = this.suggestItems[this.suggestItems.length - 1];
            //return (lastItem.offsetTop >= this.suggestDiv.scrollTop && lastItem.offsetTop < (this.suggestDiv.scrollTop + this.suggestDiv.offsetHeight));
        },

        getMoreItem: function () {
            if (this.isMultiPageDisabled()) return null;
            return $(this.suggestDiv).data(InfoPlus.Suggester.DATA_SUGGESTER_MORE_ITEM);
        },

        removeMoreItem: function () {
            var moreItem = this.getMoreItem();
            if (moreItem != null) {
                $(moreItem).remove();
                $(this.suggestDiv).removeData(InfoPlus.Suggester.DATA_SUGGESTER_MORE_ITEM);
            }
        },

        changeLoadingStatus: function (loading) {
            for (var i = 0; i < this.suggestItems.length; i++) {
                var item = this.suggestItems[i];
                if (loading) {
                    $(item).addClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_LOADING);
                } else {
                    $(item).removeClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_LOADING);
                }
            }
        },

        changeMoreItemIcon: function (loading) {
            var moreItem = this.getMoreItem();
            if (moreItem == null) return;
            if (loading === true) {
                $(moreItem).removeClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_MORE_ITEM_DOWN);
                $(moreItem).addClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_MORE_ITEM_LOADING);
            } else {
                $(moreItem).removeClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_MORE_ITEM_LOADING);
                $(moreItem).addClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_MORE_ITEM_DOWN);
            }
        },

        getEmptyItem: function () {
            return $(this.suggestDiv).data(InfoPlus.Suggester.DATA_SUGGESTER_EMPTY_ITEM);
        },

        suggestAjaxShow: function (originSuggestDataLength, prefixValue) {

            // Calculate data page width
            var strViewWidth = function (fData) {
                var rootFontSize = parseFloat($("html").css("font-size"));
                if (fData == null) return 0;
                var intLength = 0;
                for (var index = 0; index < fData.length; index++) {
                    if ((fData.charCodeAt(index) < 0) || (fData.charCodeAt(index) > 255))
                        intLength = intLength + ($$.MOBILE ? rootFontSize * 1.2 : 13);
                    else
                        intLength = intLength + ($$.MOBILE ? Math.ceil(rootFontSize * 1.2 / 2) : 7);
                }
                return intLength;
            };

            var calculateMaxWidth = function (contents, oldMaxWidth) {
                viewWidth = strViewWidth(contents);
                if (oldMaxWidth < viewWidth) {
                    return viewWidth;
                }
                return oldMaxWidth;
            };

            var calculateMoreItemWidth = function (moreItem) {
                var moreContent = moreItem.innerHTML;
                var moreLines = moreContent.split("<br>");
                var result = 0;
                for (var i = 0, len = moreLines.length; i < len; i++) {
                    var width = strViewWidth(moreLines[i]);
                    if (result < width) {
                        result = width;
                    }
                }
                return result;
            };

            //改变重复名称（描述）的显示，返回重新计算出来的最大宽度
            var changeItemContent = function (code, item, oldMaxWidth) {
                var contents = $IU.trimString(code.codeName);
                if (code.description != null && code.description !== "") {
                    contents += "(" + $IU.trimString(code.description) + ")";
                }
                $(item).html("<div class=\"item_code_id\">" + replacePrefix($IU.trimString(code.codeId)) + "</div>" + replacePrefix(contents)).addClass("infoplus_suggester_item_duplicated");
                //这里只是为了计算最大宽度
                contents += $IU.trimString(code.codeId);
                return calculateMaxWidth(contents, oldMaxWidth);
            };

            //找到重复name的，加上codeId加以区分
            var adjustDuplicateItem = function (suggestItems, maxWidth) {
                var keyObj = {};
                for (var index = 0, len = suggestItems.length; index < len; index++) {
                    item = suggestItems[index];
                    if (item == null) continue;
                    var code = $(item).data("code");
                    var key = code.codeName;
                    if (!keyObj.hasOwnProperty(key)) {
                        keyObj[key] = item;
                    } else {
                        //两个重复的都需要改变内容
                        maxWidth = changeItemContent(code, item, maxWidth);
                        maxWidth = changeItemContent($(keyObj[key]).data("code"), keyObj[key], maxWidth);
                    }
                }
                return maxWidth;
            };

            var findIndexOf = function (content, fromIndex) {
                //搜索关键字以空格或者逗号分隔
                var searchArray = prefixValue.toLocaleLowerCase().split(/[ ]|,/);
                if (searchArray.length === 0) return {index: -1, len: 0};
                var index = -1, searchLen = 0;
                for (var i = 0, len = searchArray.length; i < len; i++) {
                    if (searchArray[i].length === 0) continue;
                    var thisIndex = content.indexOf(searchArray[i], fromIndex);
                    if (thisIndex !== -1 && (index === -1 || thisIndex < index)) {
                        index = thisIndex;
                        searchLen = searchArray[i].length;
                    }
                }
                return {index: index, len: searchLen};
            };

            var replacePrefix = function (text) {
                var lowerCaseText = text.toLocaleLowerCase(),
                    currentIndex = 0,
                    resultText = '';
                var findResult = findIndexOf(lowerCaseText, currentIndex);
                while (findResult.index !== -1) {
                    resultText += text.substring(currentIndex, findResult.index);
                    resultText += '<u>' + text.substr(findResult.index, findResult.len) + '</u>';
                    currentIndex = findResult.index + findResult.len;
                    findResult = findIndexOf(lowerCaseText, currentIndex);
                }
                resultText += text.substr(currentIndex);
                return resultText;
            };

            //查找prefixValue在结果中出现的位置，如果是出现在codeId中出现，那么需要显示codeId
            var adjustSearchResultItem = function (suggestItems, maxWidth) {
                for (var index = 0, len = suggestItems.length; index < len; index++) {
                    item = suggestItems[index];
                    if (item == null) continue;
                    var code = $(item).data("code");
                    var findResult = findIndexOf(code.codeId.toLocaleLowerCase(), 0);
                    if (findResult.index !== -1) {
                        maxWidth = changeItemContent(code, item, maxWidth);
                    }
                }
                return maxWidth;
            };


            var getInaccurateTotal = function (total) {
                if (total > 100000) return $$.lt("suggester.inaccurateTotal.hundredThousand");
                if (total > 10000) return $$.lt("suggester.inaccurateTotal.tenThousand");
                if (total > 1000) return $$.lt("suggester.inaccurateTotal.thousand");
                return total;
            };

            if (this.currentLastPageNo === 1) {
                this.suggestItems = [];
                $(this.suggestDiv).empty();
                if (this.isEmptyItemAppear()) {
                    var emptyItem = document.createElement("div");
                    $(emptyItem).addClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_ITEM);
                    emptyItem.innerHTML = $$.lt("suggester.emptyItem");
                    $(emptyItem).data("code", null);
                    this.suggestDiv.appendChild(emptyItem);
                    $(this.suggestDiv).data(InfoPlus.Suggester.DATA_SUGGESTER_EMPTY_ITEM, emptyItem);
                }
                if (!this.isMultiPageDisabled()) {
                    $(this.suggestDiv).removeData(InfoPlus.Suggester.DATA_SUGGESTER_MORE_ITEM);
                    if (this.suggestData.length >= InfoPlus.Suggester.PAGE_ITEM_COUNT) {
                        var moreItem = document.createElement("div");
                        $(moreItem).addClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_MORE_ITEM);
                        moreItem.innerHTML = $$.lt("suggester.moreItem");
                        this.suggestDiv.appendChild(moreItem);
                        $(this.suggestDiv).data(InfoPlus.Suggester.DATA_SUGGESTER_MORE_ITEM, moreItem);
                    }
                } else {
                    if (this.type === 'User') {
                        var field = this.field;
                        if (field.settings != null && field.settings.userTraversal === true) {
                            $(this.suggestDiv).removeData(InfoPlus.Suggester.DATA_SUGGESTER_MORE_ITEM);
                        } else {
                            if (this.suggestData.length >= InfoPlus.Suggester.PAGE_ITEM_COUNT) {
                                moreItem = document.createElement("div");
                                $(moreItem).addClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_MORE_USER);
                                moreItem.innerHTML = $$.hlt("suggester.moreUser", this.totalResults != null ? getInaccurateTotal(this.totalResults) : this.suggestData.length);
                                this.suggestDiv.appendChild(moreItem);
                                $(this.suggestDiv).data(InfoPlus.Suggester.DATA_SUGGESTER_MORE_ITEM, moreItem);
                            } else {
                                $(this.suggestDiv).removeData(InfoPlus.Suggester.DATA_SUGGESTER_MORE_ITEM);
                            }
                        }
                    }
                }
            }
            var maxWidth = (this.currentLastPageNo === 1 ? 0 : parseInt($(this.suggestDiv).width()) - 20);
            var currentPageItemCount = 0;
            moreItem = (this.type !== 'User') ? this.getMoreItem() : $(this.suggestDiv).data(InfoPlus.Suggester.DATA_SUGGESTER_MORE_ITEM);
            for (var i = 0; i < this.suggestData.length; i++) {
                if (i < originSuggestDataLength) {
                    var item = this.suggestItems[i];
                    if (item != null) {
                        item.style.background = "";
                    }
                } else {
                    var code = this.suggestData[i];
                    item = document.createElement("div");
                    $(item).addClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_ITEM_UNSELECT);
                    $(item).addClass(InfoPlus.Suggester.CLASSNAME_SUGGESTER_ITEM);
                    if (this.tipFormat != null && code.attributes != null) {
                        $(item).attr("title", $IU.variablesFormat(this.tipFormat, code.attributes));
                    }

                    var contents = $IU.trimString(code.codeName);
                    if (null != code.description && "" !== code.description) {
                        contents += "(" + $IU.trimString(code.description) + ")";
                    }

                    var viewWidth = strViewWidth(contents);
                    if (maxWidth < viewWidth) {
                        maxWidth = viewWidth;
                    }
                    //item.innerHTML = contents;
                    $(item).html(replacePrefix(contents));
                    $(item).data("code", code);
                    this.suggestItems[i] = item;
                    if (moreItem != null) {
                        $(moreItem).before(item);
                    } else {
                        this.suggestDiv.appendChild(item);
                    }

                    currentPageItemCount++;
                }
            }
            maxWidth = adjustDuplicateItem(this.suggestItems, maxWidth);
            maxWidth = adjustSearchResultItem(this.suggestItems, maxWidth);

            var minWidth = this.activeInput.offsetWidth;
            if (moreItem != null) {
                var moreItemWidth = calculateMoreItemWidth(moreItem);
                if (minWidth < moreItemWidth) {
                    minWidth = moreItemWidth;
                }
            }
            if (maxWidth > minWidth) {
                var w = maxWidth + 20;
            } else {
                w = minWidth + 20;
            }

            if (!this.isMobileView()) {
                $(this.suggestDiv).width(w);
            } else {
                var rootFontSize = parseFloat($("html").css("font-size"));
                $(this.suggestDiv).width((w / rootFontSize) + "rem");
            }

            this.suggestDiv.style.display = "block";
            this.emptyDiv.style.display = "none";
            if (this.currentLastPageNo !== 1) {
                var selectIndex;
                if (this.lastNextPageRequest.key === "down") {
                    selectIndex = this.lastNextPageRequest.selectIndex + 1;
                } else {
                    selectIndex = this.lastNextPageRequest.selectIndex > 0 ? this.lastNextPageRequest.selectIndex + InfoPlus.Suggester.PAGE_ITEM_COUNT : InfoPlus.Suggester.PAGE_ITEM_COUNT;
                }

                if (selectIndex >= this.suggestItems.length) {
                    selectIndex = this.suggestItems.length - 1;
                }
                var pageFirstItemIndex = 0;
                if (this.suggestItems.length - InfoPlus.Suggester.PAGE_ITEM_COUNT > 0) {
                    pageFirstItemIndex = this.suggestItems.length - InfoPlus.Suggester.PAGE_ITEM_COUNT;
                }
                this.adjustSuggestDiv(pageFirstItemIndex, InfoPlus.Suggester.PAGE_ITEM_COUNT);

                if (this.suggestDiv.style.display === "block") {
                    this.changeSelectedSuggesterItemStyle(this.lastNextPageRequest.selectIndex, selectIndex);
                }
                this.lastNextPageRequest = null;
            } else {
                //第一页
                if (this.suggestDiv.style.display === "block") {
                    if (!this.isAllowExtern()) {
                        if (this.isEmptyItemAppear()) {
                            //不是必填
                            if (this.suggestData.length === 1) {
                                this.selectSuggesterItem(this.suggestItems[0]);
                            } else {
                                //找到name完全匹配的一条选中
                                var foundMatchItem = false;
                                for (i = 0; i < this.suggestData.length; i++) {
                                    if (this.activeInput.value === this.suggestData[i].codeName) {
                                        this.selectSuggesterItem(this.suggestItems[i]);
                                        this.unselectSuggesterItem(this.getEmptyItem());
                                        foundMatchItem = true;
                                        break;
                                    }
                                }
                                if (!foundMatchItem) {
                                    this.selectSuggesterItem(this.getEmptyItem());
                                }
                            }
                        } else {
                            //如果是必填的，缺省选中第一条
                            if (null != this.suggestItems[0]) {
                                this.selectSuggesterItem(this.suggestItems[0]);
                            }
                        }
                    }
                    this.adjustSuggestDiv(0, currentPageItemCount);
                }
            }

            strViewWidth = null;
        },

        getSuggestDivScrollTop: function (pageItem) {
            if (pageItem == null) return 0;
            return pageItem.offsetTop - InfoPlus.Suggester.SUGGEST_DIV_PADDING_TOP;
        },

        requestNextPage: function (currentSelectIndex, key) {
            if (this.lastNextPageRequest != null) return;
            this.currentLastPageNo++;
            this.lastNextPageRequest = {
                selectIndex: currentSelectIndex,
                requestPageNo: this.currentLastPageNo,
                key: key
            };
            this.suggestAjaxSubmit();
        },

        containerClick: function () {
            // prevent event when readonly
            if (this.isReadOnly()) return;
            if (this.activeInput) {
                this.activeInput.focus();
            }
        },

        getCurrentPageTopIndex: function () {
            var currentSelectIndex = this.getSuggest();
            var suggestItems = this.suggestItems;
            var pos = currentSelectIndex;
            while (pos >= 0) {
                if (suggestItems[pos].offsetTop - InfoPlus.Suggester.SUGGEST_DIV_PADDING_TOP < this.suggestDiv.scrollTop) {
                    pos = pos + 1;
                    break;
                }
                pos--;
            }
            return ((pos < 0) ? 0 : pos);
        },

        moveDownOneRow: function (forceDown) {
            var currentPageTopIndex = this.getCurrentPageTopIndex();
            var suggestItems = this.suggestItems;
            if (forceDown || currentPageTopIndex + 1 < suggestItems.length) {
                this.suggestDiv.scrollTop = this.getSuggestDivScrollTop(suggestItems[currentPageTopIndex + 1]);
            }
        },

        changeSelectedSuggesterItemStyle: function (currentSelectIndex, changedSelectIndex) {
            if (this.isEmptyItemAppear()) {
                if (currentSelectIndex === -1) {
                    this.unselectSuggesterItem(this.getEmptyItem());
                } else {
                    if (this.suggestItems[currentSelectIndex] != null) {
                        this.unselectSuggesterItem(this.suggestItems[currentSelectIndex]);
                    }
                }
                if (changedSelectIndex === -1) {
                    this.selectSuggesterItem(this.getEmptyItem());
                } else {
                    if (this.suggestItems[changedSelectIndex] != null) {
                        this.selectSuggesterItem(this.suggestItems[changedSelectIndex]);
                    }
                }
            } else {
                if (this.suggestItems[currentSelectIndex] != null) {
                    this.unselectSuggesterItem(this.suggestItems[currentSelectIndex]);
                }
                if (this.suggestItems[changedSelectIndex] != null) {
                    this.selectSuggesterItem(this.suggestItems[changedSelectIndex]);
                }
            }
        },

        isMobileView: function () {
            return $(document.body).hasClass("infoplus_mobile_view");
        },

        /**
         *  调整suggestDiv的滚动条以及显示高度
         **/
        adjustSuggestDiv: function (pageFirstItemIndex, pageItemCount) {
            var rootFontSize = parseFloat($("html").css("font-size"));
            if (this.shouldShowMoreItemInSuggestDiv(pageFirstItemIndex, pageItemCount)) pageItemCount++;
            var showEmptyItem = (this.isEmptyItemAppear() && pageFirstItemIndex === 0);
            if (showEmptyItem) pageItemCount++;

            if (!this.isMobileView()) {
                var rowHeight = InfoPlus.Suggester.PAGE_ITEM_HEIGHT;
                if (this.type === 'User' && $(this.suggestDiv).data(InfoPlus.Suggester.DATA_SUGGESTER_MORE_ITEM) != null) {
                    var moreUserItemHeight = $($(this.suggestDiv).data(InfoPlus.Suggester.DATA_SUGGESTER_MORE_ITEM)).outerHeight();
                }
                var height = (pageItemCount * rowHeight + 8 + (moreUserItemHeight != null ? moreUserItemHeight : 0));
                this.suggestDiv.style.height = height + "px";
            } else {
                rowHeight = 2;
                if (this.type === 'User' && $(this.suggestDiv).data(InfoPlus.Suggester.DATA_SUGGESTER_MORE_ITEM) != null) {
                    moreUserItemHeight = $($(this.suggestDiv).data(InfoPlus.Suggester.DATA_SUGGESTER_MORE_ITEM)).outerHeight() / rootFontSize;
                }
                height = (pageItemCount * rowHeight + (8 / rootFontSize) + (moreUserItemHeight != null ? moreUserItemHeight : 0));
                this.suggestDiv.style.height = height + "rem";
            }

            this.suggestDiv.scrollTop = showEmptyItem === true ? 0 : this.getSuggestDivScrollTop(this.suggestItems[pageFirstItemIndex]);
        },

        activeInputKeyDown: function (keyCode) {
            this.activeInput.className = this.getActiveInputClass(true);
            var currentSelectIndex = this.getSuggest(),
                suggestItems = this.suggestItems,
                suggestDiv = this.suggestDiv,
                currentPageNo, selectIndex, currentPageItemCount;

            switch (keyCode) {
                case InfoPlus.Suggester.KEY_CODE_BACKSPACE:
                    if (this.activeDiv.value === "") {
                        this.setData(null);
                    }
                    break;
                case InfoPlus.Suggester.KEY_CODE_UP:
                    if (suggestItems[0] != null && suggestDiv.style.display === "block") {
                        if (currentSelectIndex === -1) {
                            //this.selectSuggesterItem(suggestItems[0]);
                        } else {
                            var previousIndex = currentSelectIndex - 1;
                            if (previousIndex < 0) {
                                if (this.isEmptyItemAppear()) {
                                    previousIndex = -1;
                                } else {
                                    previousIndex = 0;
                                }
                            }
                            this.changeSelectedSuggesterItemStyle(currentSelectIndex, previousIndex);
                            if (previousIndex !== -1) {
                                if (suggestItems[previousIndex].offsetTop < this.suggestDiv.scrollTop) {
                                    this.adjustSuggestDiv(previousIndex, InfoPlus.Suggester.PAGE_ITEM_COUNT);
                                }
                            }
                        }
                    }
                    break;
                case InfoPlus.Suggester.KEY_CODE_DOWN:
                    if (suggestItems[0] != null && suggestDiv.style.display === "block") {
                        if (currentSelectIndex === -1) {
                            if (this.isEmptyItemAppear()) {
                                if (this.emptyItemIsSelected()) {
                                    this.unselectSuggesterItem(this.getEmptyItem());
                                    this.selectSuggesterItem(suggestItems[0]);
                                } else {
                                    this.selectSuggesterItem(this.getEmptyItem());
                                }
                            } else {
                                this.selectSuggesterItem(suggestItems[0]);
                            }
                        } else {
                            var nextIndex = currentSelectIndex + 1;
                            if (nextIndex >= suggestItems.length) {
                                if (this.hasMoreItem()) {
                                    this.moveDownOneRow(true);
                                    this.requestNextPage(currentSelectIndex, "down");
                                }
                                return;
                            }
                            this.changeSelectedSuggesterItemStyle(currentSelectIndex, nextIndex);
                            if (this.suggestDiv.scrollTop + this.suggestDiv.offsetHeight < suggestItems[nextIndex].offsetTop + InfoPlus.Suggester.PAGE_ITEM_HEIGHT) {
                                //nextIndex的行不显示在下拉框中
                                this.adjustSuggestDiv(nextIndex - InfoPlus.Suggester.PAGE_ITEM_COUNT + 1, InfoPlus.Suggester.PAGE_ITEM_COUNT);
                                //this.moveDownOneRow(false);
                            }
                        }
                    }
                    break;
                case InfoPlus.Suggester.KEY_CODE_PAGE_UP:
                    if (this.isMultiPageDisabled()) return;
                    currentPageNo = currentSelectIndex > 0 ? (Math.floor(currentSelectIndex / InfoPlus.Suggester.PAGE_ITEM_COUNT) + 1) : 1;
                    var previousPageNo = currentPageNo - 1;
                    selectIndex = currentSelectIndex - InfoPlus.Suggester.PAGE_ITEM_COUNT;
                    if (selectIndex < 0) {
                        selectIndex = 0;
                        previousPageNo = 1;
                    }
                    currentPageItemCount = InfoPlus.Suggester.PAGE_ITEM_COUNT;
                    if (previousPageNo * InfoPlus.Suggester.PAGE_ITEM_COUNT > suggestItems.length) {
                        currentPageItemCount = suggestItems.length % InfoPlus.Suggester.PAGE_ITEM_COUNT;
                    }

                    this.adjustSuggestDiv((previousPageNo - 1) * InfoPlus.Suggester.PAGE_ITEM_COUNT, currentPageItemCount);
                    this.changeSelectedSuggesterItemStyle(currentSelectIndex, selectIndex);
                    break;
                case InfoPlus.Suggester.KEY_CODE_PAGE_DOWN:
                    if (this.isMultiPageDisabled()) return;
                    currentSelectIndex = this.getSuggest();
                    currentPageNo = currentSelectIndex > 0 ? (Math.floor(currentSelectIndex / InfoPlus.Suggester.PAGE_ITEM_COUNT) + 1) : 1;
                    suggestItems = this.suggestItems;
                    selectIndex = currentSelectIndex > 0 ? currentSelectIndex + InfoPlus.Suggester.PAGE_ITEM_COUNT : InfoPlus.Suggester.PAGE_ITEM_COUNT;
                    if (selectIndex >= suggestItems.length && this.hasMoreItem()) {
                        this.requestNextPage(currentSelectIndex, "pageDown");
                    } else {
                        var scrollTopIndex = currentPageNo * InfoPlus.Suggester.PAGE_ITEM_COUNT;
                        if (selectIndex >= suggestItems.length) {
                            selectIndex = suggestItems.length - 1;
                            if (scrollTopIndex >= suggestItems.length) {
                                scrollTopIndex = suggestItems.length - InfoPlus.Suggester.PAGE_ITEM_COUNT;
                                if (scrollTopIndex < 0) {
                                    scrollTopIndex = 0;
                                }
                            }
                        }
                        currentPageItemCount = InfoPlus.Suggester.PAGE_ITEM_COUNT;
                        if (currentPageNo === 1) {
                            if (suggestItems.length < InfoPlus.Suggester.PAGE_ITEM_COUNT) {
                                currentPageItemCount = suggestItems.length % InfoPlus.Suggester.PAGE_ITEM_COUNT;
                            }
                        }

                        this.adjustSuggestDiv(scrollTopIndex, currentPageItemCount);
                        this.changeSelectedSuggesterItemStyle(currentSelectIndex, selectIndex);
                    }
                    break;
            }
        },


        setFocusToNextControl: function (controls, counter) {
            var control = controls.eq(counter + 1)[0];
            if (control == null) return;
            if (control.disabled || control.style.display === 'none') {
                this.setFocusToNextControl(controls, counter + 1);
            }
            else {
                $(control).trigger('focus');
            }
        },

        activeInputKeyPress: function (keyCode) {

            switch (keyCode) {
                case InfoPlus.Suggester.KEY_CODE_ENTER:
                    var currentSelectIndex = this.getSuggest();
                    var value = this.activeInput.value;

                    if (this.isEmptyItemAppear() && currentSelectIndex === -1) {
                        if (this.emptyItemIsSelected()) {
                            this.setData("");
                        } else {
                            if (this.isAllowExtern()) {	// Allow external input
                                //允许外部值的情况下
                                if (this.text !== value) {
                                    this.setData(value, value, false, true);
                                }
                            } else {
                                this.setData("");
                            }
                        }
                    } else {
                        var hasSuggest = this.suggestDiv.style.display === "block" && currentSelectIndex !== -1 && this.suggestItems.length > 0;
                        if (hasSuggest) {
                            this.setData(this.suggestData[currentSelectIndex]);
                        } else if (this.isAllowExtern()) {	// Allow external input
                            if (this.text !== value) {
                                this.setData(value, value, false, true);
                            }
                        } else {
                            // no suggest, not allow extern value, do nothing
                        }
                    }
                    this.activeInputBlur();
                    break;
            }
        },

        activeInputKeyUp: function (keyCode) {
            this.adjustView();
            switch (keyCode) {
                case InfoPlus.Suggester.KEY_CODE_ESC:
                    this.activeInput.value = this.text || "";
                    this.activeInputBlur();
                    break;

            }
        },

        clearFocusFlag: function () {
            this.focused = false;
            this.activeInputOnFocus = false;
            this.mouseInSuggestDiv = false;
            this.suggestDivScrolled = false;
        },

        activeInputBlur: function () {
            this.clearFocusFlag();
            this.suggestDiv.style.display = "none";
            this.emptyDiv.style.display = "none";
            if (!this.isAllowExtern()) {
                this.activeInput.value = this.text || "";
            } else {
                if (this.dataElement.options[0].text !== this.activeInput.value) {
                    this.setData(this.activeInput.value, this.activeInput.value, false, true);
                }
            }
            this.activeInput.className = this.getActiveInputClass(false);
            this.activeInput.blur();
        },

        setEmptyDivContent: function () {
            if (this.type === $Control.DATA_TYPE_USER) {
                this.emptyDiv.style.width = $$.MOBILE ? "32rem" : ($$.params.lang === "zh" ? "320px" : "400px");
                this.emptyDiv.innerHTML = $$.lt("suggester.emptyUser");
            } else {
                this.emptyDiv.style.width = $$.MOBILE ? "25rem" : "250px";
                this.emptyDiv.innerHTML = $$.lt("suggester.emptyHint");
            }
        },

        activeInputFocus: function () {
            this.focused = true;
            this.activeInput.className = this.getActiveInputClass(true);

            this.activeDiv.style.position = "relative";
            if (this.activeInput.value === "") {
                this.emptyDiv.style.display = "block";
                this.setEmptyDivContent();

            } else {
                this.emptyDiv.style.display = "none";
            }
            this.currentLastPageNo = 1;
            this.suggestAjaxSubmit();
        },

        //event
        onSuggesterItemMouseEnter: function (event) {
            //debug("mouse enter");
            var suggesterControl = event.data.suggester;
            for (var i = 0; i < suggesterControl.suggestItems.length; i++) {
                suggesterControl.unselectSuggesterItem(suggesterControl.suggestItems[i]);
            }
            if (suggesterControl.isEmptyItemAppear()) {
                suggesterControl.unselectSuggesterItem(suggesterControl.getEmptyItem());
            }
            suggesterControl.selectSuggesterItem(this);
        },

        onSuggesterItemMouseDown: function (event) {
            //debug("mouse down");
            var suggesterControl = event.data.suggester;
            suggesterControl.setData($(this).data("code"));
            suggesterControl.suggestDiv.style.display = "none";
            suggesterControl.emptyDiv.style.display = "none";
            suggesterControl.activeInput.className = suggesterControl.getActiveInputClass(false);
            suggesterControl.focused = false;
            suggesterControl.activeInput.blur();
            return false;
        },

        onSuggesterMoreItemClick: function (event) {
            return false;
        },

        onSuggesterContainerClick: function (event) {
            var suggesterControl = event.data.suggester;
            suggesterControl.containerClick();
        },

        onSuggesterActiveInputKeyDown: function (event) {
            //debug("key down:" + event.keyCode);
            var suggesterControl = event.data.suggester;
            if (suggesterControl.isReadOnly()) return false;
            suggesterControl.activeInputKeyDown(event.keyCode);
            //避免在chrome下整个网页的滚动条下滚，ie与firefox下没有这个问题
            return event.keyCode !== InfoPlus.Suggester.KEY_CODE_PAGE_DOWN;
        },

        onSuggesterActiveInputKeyUp: function (event) {
            //debug("key up:" + event.keyCode);
            var suggesterControl = event.data.suggester;
            if (suggesterControl.isReadOnly()) return;
            suggesterControl.activeInputKeyUp(event.keyCode);
        },

        onSuggesterActiveInputKeyPress: function (event) {
            //debug("key press:" + event.keyCode);
            var suggesterControl = event.data.suggester;
            if (suggesterControl.isReadOnly()) return;
            suggesterControl.activeInputKeyPress(event.keyCode);
            return event.keyCode !== InfoPlus.Suggester.KEY_CODE_ENTER;
        },

        onSuggesterActiveInputFocus: function (event) {
            var suggesterControl = event.data.suggester;
            //debug(suggesterControl.field.name + " focus");
            suggesterControl.activeInputOnFocus = true;
            if (suggesterControl.isReadOnly()) return;
            if (suggesterControl.mouseInSuggestDiv === false) {
                if ($IU.shouldShowSuggesterPage()) {
                    $IU.clearAllError();
                    var originControl = $(suggesterControl.dataElement).data($Control.DATA_CONTROL_OBJECT);
                    //设置一个在弹出suggest page上的标志，为的是不让其验证非空(这样会在page上显示一个出错提示)
                    originControl.onSuggestPage = true;
                    //此处在移动端弹出包含一个suggester2的page之前，主动失去焦点，
                    //目的是防止ios下safari在弹出输入法后对于fixed定位的层会发生位置错误(Page组件是fixed定位)
                    //setTimeout是为了防止page弹出2次(原因未细究,应该是blur引起的)
                    var instance = this;
                    setTimeout(function () {
                        instance.blur();
                        // setTimeout也会弹出两次，增大延迟有效果但不稳定。改为主动检测是否存在对于originControl的Page
                        // by marstone, since 2018/08/31
                        $IU.showSuggester2PageOnce(originControl);
                    }, 0);
                    return false;
                } else {
                    suggesterControl.activeInputFocus();
                    setTimeout($.proxy(suggesterControl.submitSuggester, suggesterControl), InfoPlus.Suggester.SUBMIT_DELAY);
                }
            }

        },

        onSuggesterActiveInputBlur: function (event) {

            var suggesterControl = event.data.suggester;

            //debug(suggesterControl.field.name + " blur");
            suggesterControl.activeInputOnFocus = false;
            if (suggesterControl.isReadOnly()) return;

            //这里之所以不是判断suggestDivOnFocus而是判断mouseInSuggestDiv是因为当鼠标滚动suggestDiv时候是先触发onSuggesterActiveInputBlur再触发onSuggesterDivFocus，所以判suggestDivOnFocus==false无效
            if (suggesterControl.mouseInSuggestDiv === false) {
                suggesterControl.activeInputBlur();
            }

        },

        onSuggesterDivFocus: function (event) {
            var suggesterControl = event.data.suggester;
        },

        onSuggesterDivBlur: function (event) {
            var suggesterControl = event.data.suggester;
            if (suggesterControl.activeInputOnFocus === false && suggesterControl.suggestDivScrolled === false) {
                suggesterControl.activeInputBlur();
            }
        },

        //由于onSuggesterItemMouseDown监听了下拉项的鼠标点击事件，并且最后return false,那么这里监听的SuggestDiv的mouseup事件只在滚动了下拉项滚动条后鼠标键UP时候触发
        onSuggesterDivMouseUp: function (event) {
            var suggesterControl = event.data.suggester;
            suggesterControl.suggestDivScrolled = true;
            //这次调用目的是让焦点回到activeInput，不过会触发suggestDiv的blur，所以在onSuggesterDivBlur里判断一下suggestDivScrolled，如果是因为滚动产生的blur,就不用调用suggesterControl.activeInputBlur()了
            suggesterControl.activeInput.focus();
        },

        onSuggesterDivMouseEnter: function (event) {
            var suggesterControl = event.data.suggester;
            suggesterControl.mouseInSuggestDiv = true;
        },

        onSuggesterDivMouseLeave: function (event) {
            var suggesterControl = event.data.suggester;
            suggesterControl.mouseInSuggestDiv = false;
        },

        onSuggesterButtonClick: function (event) {
            var suggesterControl = event.data.suggester;
            if (suggesterControl.isReadOnly()) return false;
            return false;
        },

        submitSuggester: function () {
            //debug(this.field.name + " try to submit");
            if (this.focused) {
                if (this.lastSubmitValue !== this.activeInput.value) {
                    this.currentLastPageNo = 1;
                    this.suggestAjaxSubmit();
                    this.lastSubmitValue = this.activeInput.value;
                }
                setTimeout($.proxy(this.submitSuggester, this), InfoPlus.Suggester.SUBMIT_DELAY);
            }
        }

    };

    define("InfoPlus.Suggester", suggester);

})(window);
﻿/**
 * Global Settings for InfoPlus
 * @Author Du Jinbo (marstone)
 * @Since 2011/04/26
 */

(function (window, undefined) {
    var settings = {};

    settings.DEFINITION_STATUS_ONLINE = 1;
    settings.DEFINITION_STATUS_OFFLINE = 2;

    // -1->未知,0->已创建，1->进行中，2->挂起，3->已中止，4->已完成
    settings.INSTANCE_STATE_UNKNOWN = -1;
    settings.INSTANCE_STATE_CREATED = 0;
    settings.INSTANCE_STATE_ONLINE = 1;
    settings.INSTANCE_STATE_OFFLINE = 2;
    settings.INSTANCE_STATE_TERMINATED = 3;
    settings.INSTANCE_STATE_COMPLETE = 4;

    // 1->待做，2->已做, 3->待合并 4->子流程
    settings.STEP_STATE_TODO = 1;
    settings.STEP_STATE_DONE = 2;
    settings.STEP_STATE_DRAFT = 3;
    settings.STEP_STATE_SUB = 4;

    // 节点类型。 仅0，1可见。
    settings.STEP_TYPE_MANUAL = "Manual";
    settings.STEP_TYPE_AUTO = "Auto";
    settings.STEP_TYPE_SPLIT = "Split";
    settings.STEP_TYPE_JOIN = "Join";
    settings.STEP_TYPE_CONDITIONAL = "Conditional";

    // Use this account if nobody selected, especially in a <SELECT>
    // we won't use null coz if will take the Text as Value in <OPTION>
    settings.NOBODY_ACCOUNT = "__INFOPLUS_SELECT_USER__";

    settings.MESSAGE_BOX_TITLE = "InfoPlus";

    define("InfoPlus.Settings", settings);

})(window);

﻿/**
 * Render the form a neutralized data structure.
 * @Author Du Jinbo
 * @Since 2010/10/11
 */

(function (window, undefined) {

    var formRender = function (config) {
        // Initialize
        this.initializeConfig(config);
        this.dynamicAnalyzer = new InfoPlus.Dynamics.Analyzer();
    };

    var DEFAULT_SETTINGS = {
        autoSize: true
    };

    formRender.prototype = {
        // the holder control of the
        holder: null,
        entity: null,
        prefix: "infoplus_view_" + Math.round(Math.random() * 9000 + 1000) + "_",
        selectedDiv: null,
        //suggesterManager: null,
        events: [],//[{type:事件类型,selector:事件对象过滤器}]

        initializeConfig: function (config) {
            // clone all properties in config
            this.config = {};
            for (var prop in config) {
                if (config.hasOwnProperty(prop)) {
                    if (typeof (config[prop] !== "function")) {
                        this.config[prop] = config[prop];
                    }
                }
            }
            // Assert
            return this.assertConfig();
        },

        assertConfig: function () {
            var formStepId = this.config["formStepId"],
                workflowId = this.config["workflowId"];
            if (formStepId === undefined && workflowId === undefined) return false;
            this.formStepId = formStepId;


            var holderId = this.config["holderId"];
            if (holderId === undefined) return false;
            var holder = document.getElementById(holderId);
            if (holder === null) return false;
            this.holder = holder;

            var entity = this.config["entity"];
            if (entity === undefined) return false;
            this.entity = entity;

            // initialize service endpoints
            if (this.config["suggest"] == null) return false;
            this.suggestService = this.config["suggest"];
            if (this.config["suggestInitialize"] == null) return false;
            this.suggestInitializeService = this.config["suggestInitialize"];
            if (this.config["fieldChange"] == null) return false;
            this.fieldChangeService = this.config["fieldChange"];
            if (this.config["buttonService"] == null) return false;
            this.buttonService = this.config["buttonService"];
            if (this.config["thingService"] == null) return false;
            this.thingService = this.config["thingService"];

            if (this.config["tenantTimeZoneOffset"] == null) return false;
            this.tenantTimeZoneOffset = this.config["tenantTimeZoneOffset"];

            // make a copy of entity["data"] to this.data
            this.discard();
            this.events = [];
            return true;
        },

        dispose: function () {
            this.holder = null;
            this.entity = null;
            this.selectedDiv = null;
            //this.suggesterManager = null;
        },

        addViewCss: function () {
            var views = this.entity["views"];
            for (var i = 0; i < views.length; i++) {
                var id = this.prefix + i;
                this.addCssStyle(views[i], id);
                this.addCssStyleSheet(views[i], id);
            }
        },

        addCssStyle: function (view, id) {
            var cssList = view["styleSheet"];
            var styleId = id + "_style";
            if ($IU.isArray(cssList)) {
                // Retrieve style element for the current view.
                var styleEle = null;
                if (document.getElementById(styleId) == null) {
                    styleEle = document.createElement("style");
                    styleEle.type = "text/css";
                    styleEle.media = "all";
                    styleEle.id = styleId;
                    document.getElementsByTagName("head")[0].appendChild(styleEle);
                    styleEle = document.styleSheets[document.styleSheets.length - 1];
                } else {
                    for (var n = 0; n < document.styleSheets.length; n++) {
                        styleEle = document.styleSheets[n];
                        if (styleEle.id === styleId) break;
                    }
                }

                // Clear styleEle first
                if (styleEle.rules)
                    while (styleEle.rules.length > 0)
                        styleEle.removeRule(0);
                else if (styleEle.cssRules)
                    while (styleEle.cssRules.length > 0)
                        styleEle.deleteRule(0);

                // Add new css rules.
                for (n = 0; n < cssList.length; n++) {
                    var cssRule = cssList[n];
                    if (styleEle.rules) { //IE
                        var rule = cssRule.split("{");
                        var classes = rule[0].split(/,/);
                        var style = rule[1].split("}")[0];

                        for (var c = 0; c < classes.length; c++)
                            styleEle.addRule(classes[c], style);
                    } else if (styleEle.cssRules) { // Firefox
                        if (!/\s$/.test(cssRule)) styleEle.insertRule(cssRule, 0);
                    }
                }
            }
        },

        // Append Cached stylesheet
        // Goddamn WTF "addRule is ridiculously slow in IE", even in IE9.
        // by marstone, 2011/05/04
        addCssStyleSheet: function (view, id) {
            var cssUri = view["styleSheetUri"];
            if (null != cssUri && "" !== cssUri) {
                for (var l = 0; l < document.styleSheets.length; l++) {
                    var href = document.styleSheets[l].href;
                    if (null != href && href.length >= cssUri.length)
                        if (href.substr(href.length - cssUri.length) === cssUri) {
                            break;
                        }
                }
                // Not exist
                var linkId = id + "_cached_link";
                var linkEle;
                if (l >= document.styleSheets.length) {
                    // Retrieve style element for the current view.
                    linkEle = document.getElementById(linkId);
                    if (null == linkEle) {
                        linkEle = document.createElement("link");
                        linkEle.type = "text/css";
                        linkEle.media = "all";
                        linkEle.rel = "stylesheet";
                        linkEle.id = linkId;
                        document.getElementsByTagName("head")[0].appendChild(linkEle);
                    }
                    linkEle.href = cssUri;
                } else {
                    var cssEle = document.styleSheets[l];
                    linkEle = cssEle.ownerNode || cssEle.owningElement || document.getElementById(linkId); // add & remove, trigger Chrome a freshment.
                    document.getElementsByTagName("head")[0].removeChild(linkEle);
                    document.getElementsByTagName("head")[0].appendChild(linkEle);
                }
            }
        },


        processEvent: function () {
            //处理fieldChange
            $(document.body).on("change", "." + InfoPlus.Controls.Control.CLASSNAME_FIELD_CHANGE, {render: this}, this.onFieldChange);
            $(document.body).on("focus", "." + InfoPlus.Controls.Control.CLASSNAME_CONTROL, this.onFieldFocus);

            var instance = this;
            //监听addedRepeat事件，处理select2,richtext,label,radio的初始化
            $$.addedRepeat(function (repeat, row) {
                //初始化select2控件,select2的初始化需要在element挂到dom中以后进行，否则会失败
                instance.initSelect2($(row).find(".infoplus_select2"));
                instance.initRichText($(row).find(".infoplus_richTextControl"));
                instance.initLabel($(row).find(".infoplus_labelControl"));
                instance.initRadio($(row).find(".infoplus_radioControl"))
                instance.initCheck($(row).find(".infoplus_checkControl"))
            });
        },

        initVarControls: function () {
            var variablesDiv = document.createElement("div");
            variablesDiv.setAttribute("id", "variables_container");
            $(this.holder).append(variablesDiv);
            var data = this.entity.data;
            //此处逻辑改成不出现在$$.entity.fields中
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    if (key.substr(0, 5) !== "field") {
                        $IU.addVariableControl(key, data[key]);
                    }
                }
            }

            //增加_VAR_URL,_VAR_ENTRY_NAME,_VAR_ENTRY_TAGS这三个变量
            var urlAttr = $IU.getParamFromUrl(window.location.href);
            $IU.addVariableControl("_VAR_URL", window.location.href, window.location.href, urlAttr);
            $IU.addVariableControl("_VAR_ENTRY_NAME", $$.params.instanceName);
            $IU.addVariableControl("_VAR_ENTRY_TAGS", $$.params.instanceTags);

        },

        //处理动态并行
        initDynamicParallel: function () {
            if ($$.params.dynamicParallel == null) return;
            var splitPath = $$.params.dynamicParallel.splitPath;
            var splitGroup = $$.params.dynamicParallel.splitPathGroup;

            var getVisibleGroupPath = function (index) {
                var path = "";
                for (var i = 0; i <= index; i++) {
                    path += "_" + splitPath[i];
                }
                return path;
            };

            for (var i = 0, len = splitGroup.length; i < len; i++) {
                var groupName = splitGroup[i];
                //去除所有新增，删除，上下移权限，保留rR权限
                var permission = this.entity.groups[groupName].permission || '';
                permission = permission.replace(/[w|i|d]/g, "");
                this.entity.groups[groupName].permission = permission;
                var visiblePath = getVisibleGroupPath(i);

                $$("&" + groupName).each(function () {
                    var children = this.getChildren(),
                        allRowInvisible = true;
                    for (var gi = 0, gl = children.length; gi < gl; gi++) {
                        var $row = $(children[gi]),
                            thisRowPath = this.getPath() + "_" + gi;
                        if (visiblePath === thisRowPath) {
                            //在目前执行的动态分支上，如果可读就可见
                            if (permission.indexOf("r") !== -1) {
                                $row.show();
                                allRowInvisible = false;
                            } else {
                                $row.hide();
                            }
                        } else {
                            //如果不在本执行动态分支上，如果强制可读就可见
                            if (permission.indexOf("R") !== -1) {
                                $row.show();
                                //设置该行或节下属所有控件readonly
                                $row.find("." + $Control.CLASSNAME_CONTROL).each(function () {
                                    var $element = $(this),
                                        control = $element.data($Control.DATA_CONTROL_OBJECT);
                                    if (control != null) {
                                        control.setDynamicParallelReadOnly();
                                    }
                                });
                                //设置下属所有重复节表readonly(不能增删排序)
                                $row.find("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_PARENT_ELEMENT).each(function () {
                                    var repeatControl = $(this).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                                    if (repeatControl != null) {
                                        repeatControl.readOnly = true;
                                        if (repeatControl.repeatAddLink != null) {
                                            repeatControl.repeatAddLink.hideLink();
                                        }
                                    }
                                });
                                allRowInvisible = false;
                            } else {
                                $row.hide();
                            }
                        }
                    }
                    //如果所有行都不可见，那么隐藏整个重复节表(主要目的是隐藏重复表表头)
                    if (allRowInvisible) {
                        this.visible(false, true);
                    }
                });
            }
        },


        convertSize: function () {

            var calcRootFontSize = function () {
                var screenWidth = window.screen.width;
                if (screenWidth < 600) {
                    //375时候取16，600时候18
                    var calcSize = Math.floor(16 + 2.0 * (screenWidth - 375) / 225);
                } else {
                    if ((screenWidth < 1000)) {
                        //600-1000之间每增加100px，字体大一个px
                        calcSize = Math.floor(18 + 4.0 * (screenWidth - 600) / 400);
                    } else {
                        //大于1000每增加100px，字体大0.5px
                        calcSize = Math.floor(22 + 5.0 * (screenWidth - 1000) / 1000);
                    }
                }
                return calcSize;
            };

            var rootFontSize = calcRootFontSize();
            $("html").css("font-size", rootFontSize + "px");

            var getUnit = function (value) {
                if (value == null || value.length < 2) return null;
                return value.substr(value.length - 2).toLocaleLowerCase();
            };

            var convertRemValue = function (value, coefficient) {
                var unit = getUnit(value),
                    result = parseFloat(value);
                //不是数字直接返回
                if (isNaN(result)) return value;
                //只对以下绝对单位进行转换，如果本来就是相对单位或百分比，不做转换
                //先统一处理成px
                switch (unit) {
                    case "cm":
                        result = result * 96 / 2.54;
                        break;
                    case "mm":
                        result = result * 9.6 / 2.54;
                        break;
                    case "in":
                        result = result * 96;
                        break;
                    case "pt":
                        result = result * 4.0 / 3;
                        break;
                    case "px":
                        break;
                    case "pc":
                        result = result * 12 * 4.0 / 3;
                        break;
                    default :
                        //其余单位不做转换
                        return value;
                }
                return (result / rootFontSize * coefficient) + "rem";
            };

            //转换相对值
            var convertRelativeValue = function (value) {
                switch (value) {
                    case "xx-small":
                    case "1":
                    case "x-small":
                    case "2":
                        return "12px";
                    case "small":
                    case "3":
                        return "14px";
                    case "medium":
                    case "4":
                        return "16px";
                    case "large":
                    case "5":
                        return "18px";
                    case "x-large":
                    case "6":
                        return "32px";
                    case "xx-large":
                    case "7":
                        return "48px";
                }
                return null;
            };

            this.eachLayout(function (render) {
                if (render.attributes == null || !$IU.isArray(render.attributes)) return;
                //改变font的size为style
                if (render.renderType === 'LayoutFont') {
                    //先找到style属性的位置
                    var styleIndex = -1;
                    for (var i = 0, len = render.attributes.length; i < len; i++) {
                        if (render.attributes[i]["key"] != null && render.attributes[i]["value"] != null
                            && render.attributes[i]["key"].toLocaleLowerCase() === "style") {
                            styleIndex = i;
                        }
                    }
                    for (i = 0, len = render.attributes.length; i < len; i++) {
                        if (render.attributes[i]["key"] != null && render.attributes[i]["value"] != null
                            && render.attributes[i]["key"].toLocaleLowerCase() === "size") {
                            var value = convertRelativeValue($IU.trimString(render.attributes[i]["value"]));
                            if (value != null) {
                                if (styleIndex !== -1) {
                                    render.attributes[styleIndex]["value"] += ";font-size:" + value;
                                } else {
                                    render.attributes[i]["key"] = "style";
                                    render.attributes[i]["value"] = "font-size:" + value;
                                }
                            }
                        }
                    }


                }

                //改变style,移动端将height,min-height,font-size转成rem单位，desktop端将font-size:为small等这样的相对大小改成固定大小
                for (i = 0, len = render.attributes.length; i < len; i++) {
                    if (render.attributes[i]["key"] != null && render.attributes[i]["value"] != null
                        && render.attributes[i]["key"].toLocaleLowerCase() === "style") {
                        var styles = render.attributes[i]["value"].split(";");
                        var convertStyles = [];
                        for (var si = 0, sl = styles.length; si < sl; si++) {
                            var style = styles[si].split(":");
                            if (style.length === 2) {
                                var styleName = $IU.trimString(style[0]),
                                    styleValue = $IU.trimString(style[1]);
                                switch (styleName.toLocaleLowerCase()) {
                                    //目前只处理height,min-height,font-size三种style
                                    case "height":
                                    case "min-height":
                                        if ($$.MOBILE) {
                                            //如果不是图片上传控件就转换，图片上传控件涉及到图片尺寸的计算，还是都是px比较好
                                            if (render.renderType !== "BoundPicture") {
                                                convertStyles.push(styleName + ":" + convertRemValue(styleValue, 1));
                                            }
                                        }
                                        break;
                                    case "font-size":
                                        styleValue = convertRelativeValue(styleValue);
                                        if ($$.MOBILE) {
                                            if (styleValue == null) {
                                                styleValue = $IU.trimString(style[1]);
                                            }
                                            convertStyles.push(styleName + ":" + convertRemValue(styleValue, 1.2));
                                        } else {
                                            if (styleValue != null) {
                                                convertStyles.push(styleName + ":" + styleValue);
                                            }
                                        }

                                }

                            }
                        }
                        var convertedStyle = '';
                        for (var ci = 0, cl = convertStyles.length; ci < cl; ci++) {
                            convertedStyle += convertStyles[ci] + ";";
                        }
                        if (convertedStyle !== '') {
                            render.attributes[i]["value"] = render.attributes[i]["value"] + ";" + convertedStyle;
                        }

                    }
                }


            });
        },

        //处理所有view结尾处的空div(只包含一个空格)，去掉这个空格，目的是让结尾处的空div不占高度
        processEmptyDiv: function () {
            var views = this.entity["views"];
            for (var viewIndex = 0; viewIndex < views.length; viewIndex++) {
                var view = views[viewIndex];
                //$$.log(view.name);
                $IU.clearStack();
                $IU.processEmptyDiv(view);
            }
        },

        processAutoViewWidth: function () {
            var views = this.entity["views"];

            var attrHasValue = function (attr) {
                return attr["key"] != null && attr["value"] != null;
            };

            var processWidthStyle = function (viewWidth, render, index) {
                var styles = render.attributes[index]["value"].split(";");
                for (var si = 0, sl = styles.length; si < sl; si++) {
                    var style = styles[si].split(":");
                    if (style.length === 2) {
                        var styleName = $IU.trimString(style[0]),
                            styleValue = $IU.trimString(style[1]);
                        if (styleName.toLocaleLowerCase() === "width") {
                            if (styleValue.substr(styleValue.length - 1) !== "%") {
                                var cssWidth = parseInt(styleValue, 10);
                                if (cssWidth <= viewWidth * 1.1 && cssWidth >= viewWidth * 0.9) {
                                    render.attributes[index]["value"] = render.attributes[index]["value"] + ";width:100%";
                                }
                            }
                        }
                    }
                }
            };

            var allAuto = true;
            for (var viewIndex = 0; viewIndex < views.length; viewIndex++) {
                var view = views[viewIndex];
                if (view.autoWidth === true) {
                    if (view.width !== undefined && view.width <= $(window).width()) {
                        this.eachLayout(function (render) {
                            if (render.attributes == null || !$IU.isArray(render.attributes)) return;
                            //处理表格和重复表
                            if (render.renderType === 'LayoutTable') {
                                for (var i = 0, len = render.attributes.length; i < len; i++) {
                                    if (attrHasValue(render.attributes[i])) {
                                        if (render.attributes[i]["key"].toLocaleLowerCase() === "style") {
                                            processWidthStyle(view.width, render, i)
                                        }
                                    }
                                }
                            }
                            //以下处理重复节
                            if (render.renderType === 'LayoutDivision') {
                                var isRepeatSectionDiv = false;
                                for (i = 0, len = render.attributes.length; i < len; i++) {
                                    if (render.attributes[i]["key"] != null && render.attributes[i]["value"] != null) {
                                        if (render.attributes[i]["key"].toLocaleLowerCase() === "class"
                                            && render.attributes[i]["value"].indexOf("xdRepeatingSection") !== -1) {
                                            isRepeatSectionDiv = true;
                                        }
                                        if (render.attributes[i]["key"].toLocaleLowerCase() === "xctname"
                                            && render.attributes[i]["value"].indexOf("RepeatingSection") !== -1) {
                                            isRepeatSectionDiv = true;
                                        }
                                    }
                                }
                                if (isRepeatSectionDiv) {
                                    for (i = 0, len = render.attributes.length; i < len; i++) {
                                        if (attrHasValue(render.attributes[i])) {
                                            if (render.attributes[i]["key"].toLocaleLowerCase() === "style") {
                                                processWidthStyle(view.width, render, i)
                                            }
                                        }
                                    }
                                }
                            }
                        }, view);
                    }
                } else {
                    allAuto = false;
                }
            }
            $$.params.allAutoWidth = allAuto;
        },

        createViews: function () {
            var views = this.entity["views"],
                len = views.length,
                multiView = (len > 1);

            //在创建所有view之前，先做以下预处理
            //m版视图需要做尺寸转换
            if ($$.MOBILE && len > 0 && views[0].mobileFont === true) {
                //先转换尺寸相关的style
                this.convertSize();
            }
            //找到哪些字段需要同步
            this.findSyncFields();
            //只读字段自动转换成标签
            this.convertReadOnlyControls();
            //识别哪些group是masterDetail的
            this.findMasterDetailGroups();
            //过滤不需要的属性
            this.filterUnusableAttributes();
            //改变ios字体
            this.changeFontStyle();
            //处理自动宽度
            this.processAutoViewWidth();
            //处理每个view结尾处的空div
            this.processEmptyDiv();

            //添加infopath带出来的样式
            this.addViewCss();
            //找到物品控件就可以打印小票
            $$.params.printInvoice = $$.params.printInvoice && this.findBoundThingControl();

            //创建所有view
            this.views = [];
            for (var i = 0; i < len; i++) {
                this.createView(views[i], i, (!$$.PREVIEW && !$$.PRINT && multiView === true));
            }

            //以下处理在创建了view之后再做
            //初始化一些特殊控件
            this.initSpecialControls();
            //初始化全局变量控件
            this.initVarControls();
            //处理动态并行
            this.initDynamicParallel();
        },

        //在这里初始化一些特殊的控件
        initSpecialControls: function () {
            //初始化select2控件,select2的初始化需要在element挂到dom中以后进行，否则会失败
            this.initSelect2($(".infoplus_select2"));
            //初始化richText
            this.initRichText($(".infoplus_richTextControl"));
            //label高度的初始化需要visible后做，所有并没有出现在这里
            //初始化radio控件
            this.initRadio($(".infoplus_radioControl"));
            //初始化check控件
            this.initCheck($(".infoplus_checkControl"));
        },

        initCheck: function ($checks) {
            if ($checks == null || $checks.length === 0) return;
            $checks.each(function () {
                var control = $(this).data($Control.DATA_CONTROL_OBJECT);
                control.initCheck();
            });
        },

        initRadio: function ($radios) {
            if ($radios == null || $radios.length === 0) return;
            $radios.each(function () {
                var control = $(this).data($Control.DATA_CONTROL_OBJECT);
                control.initRadio();
            });
        },

        initSelect2: function ($select2s) {
            if ($select2s == null || $select2s.length === 0) return;
            $select2s.each(function () {
                var control = $(this).data($Control.DATA_CONTROL_OBJECT);
                control.initSelect2();
            });
        },

        initRichText: function ($richTexts) {
            if ($richTexts == null || $richTexts.length === 0) return;
            var init = function (element) {
                var richTextControl = $(element).data($Control.DATA_CONTROL_OBJECT);
                richTextControl.init();
            };

            if (window['CKEDITOR'] == null) {
                loadAllScript([$$.params.libs.ckeditor], function () {
                    $richTexts.each(function () {
                        if (window['CKEDITOR'] != null) {
                            init(this);
                        } else {
                            $IU.debugTip('ckeditor加载出错', 'warning');
                        }
                    });
                });
            } else {
                $richTexts.each(function () {
                    init(this);
                });
            }
        },

        initLabel: function ($labels) {
            if ($labels == null || $labels.length === 0) return;
            $labels.each(function () {
                var labelControl = $(this).data($Control.DATA_CONTROL_OBJECT);
                labelControl.addRepeatInitHeightStyle();
            });
        },

        //寻找需要做同步的字段
        findSyncFields: function () {
            var instance = this,
                fields = {};
            this.eachLayout(function (render) {
                var fieldName = render["field"];
                //不同的控件如果都对应了这个字段，说明这些对应了相同字段的控件需要做同步
                if (fields.hasOwnProperty(fieldName)) {
                    fields[fieldName].needSync = true;
                } else {
                    var field = instance.getField(fieldName);
                    if (field != null) {
                        fields[fieldName] = field;
                    }
                }
            }, null, "Boundable");
        },

        //如果字段只读，自动转换成标签
        convertReadOnlyControls: function () {
            if ($$.params.tenantReadOnlyStyle === 'None') return;
            var instance = this,
                convertControlTypes = ['BoundEdit', 'BoundTextArea', 'BoundRichText', 'BoundDate', 'BoundTime', 'BoundSuggester', 'BoundSuggester2', 'BoundSelect', 'BoundOptionList'];

            //判断是否只读
            var fieldReadOnly = function (permission) {
                permission = permission || '';
                return permission.indexOf('r') !== -1 && permission.indexOf('w') === -1;
            };

            this.eachLayout(function (render) {
                var field = instance.getField(render["field"]);
                if (field != null) {
                    if (fieldReadOnly(field.permission) && $IU.arrayContains(convertControlTypes, render['renderType'])) {
                        //是否是从大文本转换过来的
                        render['convertFromText'] = (render['renderType'] === 'BoundTextArea' || render['renderType'] === 'BoundRichText');
                        render['renderType'] = 'BoundConvertedLabel';
                    }
                }
            }, null, "Boundable");
        },

        //寻找物品控件
        findBoundThingControl: function () {
            var found = false;
            this.eachLayout(function (render) {
                if (render.renderType === "BoundThing") {
                    found = true;
                }
            }, null, "Boundable");
            return found;
        },

        // 改变font这个tag,将其在face属性中的字体改成用style表示，目的是让这个font的tag在ios下起作用(ios下无宋体,SimSun等字体，用SongTi SC等替代)
        // 并将所有tag的style里包含的font-family样式也进行转换
        changeFontStyle: function () {
            var instance = this;
            var findStyleAttribute = function (attributes) {
                if (!$IU.isArray(attributes)) {
                    return null;
                }
                for (var i = 0, len = attributes.length; i < len; i++) {
                    var attribute = attributes[i];
                    if (attribute["key"] != null && attribute["key"].toLocaleLowerCase() === "style") {
                        return attribute;
                    }
                }
                return null;
            };

            //找到ios对应的字体
            var getIosFontName = function (font) {
                switch (font) {
                    case "微软雅黑":
                    case "Microsoft YaHei":
                        return "'PingFang SC'," + font;
                    case "宋体":
                    case "SimSun":
                        return "'Songti SC'," + font;
                    case "黑体":
                    case "SimHei":
                        return "'Heiti SC'," + font;
                    case "楷体":
                    case "KaiTi":
                        return "'Kaiti SC'," + font;
                }
                return "";
            };

            var changeStyleAttr = function (styleAttr, iosFont) {
                var styles = styleAttr["value"].split(";");
                var found = false;
                for (var i = 0, len = styles.length; i < len; i++) {
                    if (styles[i].toLocaleLowerCase().indexOf("font-family") !== -1) {
                        styles[i] += "," + iosFont;
                        found = true;
                        break;
                    }
                }
                if (found) {
                    var value = "";
                    for (i = 0, len = styles.length; i < len; i++) {
                        value += styles[i] + ";"
                    }
                    styleAttr["value"] = value;
                } else {
                    styleAttr["value"] += ";font-family:" + iosFont;
                }
            };

            // 将含有font-family的style加上ios字体支持
            var convertFontFamilyCss = function () {
                instance.eachLayout(function (render) {
                    if (render["attributes"] != null) {
                        var styleAttr = findStyleAttribute(render["attributes"]);
                        if (styleAttr != null && styleAttr["value"] != null) {
                            var styles = styleAttr["value"].split(";");
                            var found = false;
                            for (var i = 0, len = styles.length; i < len; i++) {
                                if (styles[i].toLocaleLowerCase().indexOf("font-family") !== -1) {
                                    var fontValueArray = styles[i].toLocaleLowerCase().split(":");
                                    if (fontValueArray[1] !== undefined) {
                                        var iosFont = getIosFontName($IU.trimString(fontValueArray[1]));
                                        if (iosFont !== "") {
                                            styles[i] = "font-family:" + iosFont;
                                            found = true;
                                        }
                                    }
                                    break;
                                }
                            }
                            if (found) {
                                var value = "";
                                for (i = 0, len = styles.length; i < len; i++) {
                                    value += styles[i] + ";";
                                }
                                styleAttr["value"] = value;
                            }
                        }
                    }
                });
            };

            // 将font tag中的face属性换成font-family的style
            var convertFontTag = function () {
                instance.eachLayout(function (render) {
                    if (render["renderType"] === "LayoutFont" && render["attributes"] != null) {
                        var styleAttr = findStyleAttribute(render["attributes"]);
                        for (var i = 0, len = render["attributes"].length; i < len; i++) {
                            var attr = render["attributes"][i];
                            if (attr["key"].toLocaleLowerCase() === "face") {
                                var iosFont = getIosFontName(attr["value"]);
                                if (iosFont !== "") {
                                    if (styleAttr != null) {
                                        changeStyleAttr(styleAttr, iosFont);
                                    } else {
                                        render["attributes"][len] = {
                                            key: "style",
                                            value: "font-family:" + iosFont
                                        };
                                    }
                                }
                            }
                        }
                    }
                }, null, "Layoutable");
            };

            convertFontFamilyCss();
            convertFontTag();
        },

        //过滤从infopath带出来的又没什么必要的属性
        filterUnusableAttributes: function () {
            var unusableAttrNames = ["type", "binding", "ctrlid", "xctname", "tabindex", "hidefocus", "onvalue", "boundprop"];
            var isUnusableAttr = function (name) {
                for (var i = 0, len = unusableAttrNames.length; i < len; i++) {
                    if (unusableAttrNames[i] === name.toLocaleLowerCase()) {
                        return true;
                    }
                }
                return false;
            };

            this.eachLayout(function (render) {
                if (render.attributes == null || !$IU.isArray(render.attributes)) return;
                var index = 0;
                while (index < render.attributes.length) {
                    if (isUnusableAttr(render.attributes[index]['key'])) {
                        render.attributes.splice(index, 1);
                    } else {
                        index++;
                    }
                }

            }, null, "Boundable");
        },

        //寻找带有masterDetail的group
        findMasterDetailGroups: function () {
            //对于打印模版不必查找masterDetail
            if ($$.PRINT) return;
            var instance = this,
                groups = {};

            var putGroups = function (groupName, isRepeatTable, render) {
                if (!groups.hasOwnProperty(groupName)) {
                    groups[groupName] = {};
                }
                if (isRepeatTable) {
                    groups[groupName].rtRender = render;
                } else {
                    groups[groupName].rsRender = render;
                }
            };
            this.eachLayout(function (render) {
                if (render["repeatable"] === true) {
                    var groupName = render.groupName,
                        isRepeatTable = render.renderType === "LayoutTable";
                    putGroups(groupName, isRepeatTable, render);
                }
            }, null, "Layoutable");


            var changeControlTypes = ["BoundEdit", "BoundTextArea", "BoundRichText", "BoundDate", "BoundTime", "BoundSuggester", "BoundSuggester2",
                "BoundSelect", "BoundOption", "BoundOptionList", "BoundCheckList", "BoundThing"];
            var shouldChangeControlTypeToLabel = function (type) {
                if (type == null) return false;
                for (var i = 0, len = changeControlTypes.length; i < len; i++) {
                    if (changeControlTypes[i] === type) {
                        return true;
                    }
                }
                return false;
            };

            var findFields = function (repeatRender) {
                var fields = [];
                instance.eachLayout(function (render) {
                    fields.push(render.field);
                }, repeatRender, "Boundable");
                return fields;
            };

            for (var name in groups) {
                if (groups.hasOwnProperty(name)) {
                    if (groups[name].rtRender != null && groups[name].rsRender != null) {
                        var group = instance.entity.groups[name];
                        group.isMasterDetail = true;


                        //clone repeat section render
                        var rsRender = $.extend(true, {}, groups[name].rsRender);
                        rsRender.repeatable = false;
                        //向colgroup里增加一个col
                        groups[name].rtRender.columns.push({
                            renderType: "Renderable",
                            renderCategory: "Renderable",
                            width: 0,
                            attributes: [{
                                key: "style",
                                value: "WIDTH: 0px"
                            }]
                        });

                        var contentRowIndex = -1;
                        for (var rowIndex = 0, len = groups[name].rtRender.renders.length; rowIndex < len; rowIndex++) {
                            //向所有不是重复内容的行（表头行可能多个）tr增加一个td
                            if (groups[name].rtRender.renders[rowIndex]['repeating'] !== true) {
                                groups[name].rtRender.renders[rowIndex].renders.push({
                                    renderCategory: "Layoutable",
                                    renderType: "LayoutTableCell",
                                    repeatable: false,
                                    attributes: [{
                                        key: "class",
                                        value: "detailCell"
                                    }],
                                    renders: []
                                });
                            } else {
                                contentRowIndex = rowIndex;
                            }
                        }


                        var detailFields = findFields(rsRender);


                        if (contentRowIndex !== -1) {
                            //对重复表的空行里面的控件做一次转换
                            this.eachLayout(function (render) {
                                if (shouldChangeControlTypeToLabel(render["renderType"])) {
                                    //如果是detail节里有的字段才做转换
                                    if ($IU.arrayContains(detailFields, render.field)) {
                                        render["renderType"] = "BoundLabel";
                                    }
                                }
                            }, groups[name].rtRender.renders[contentRowIndex], "Boundable");


                            //向空数据行里增加一个td，里面的内容是重复节的一块内容
                            groups[name].rtRender.renders[contentRowIndex].renders.push({
                                renderCategory: "Layoutable",
                                renderType: "LayoutTableCell",
                                repeatable: false,
                                attributes: [{
                                    key: "class",
                                    value: "detailCell"
                                }],
                                renders: [rsRender]
                            });
                        }
                    }
                }
            }

        },

        draw: function () {
            var deferred = $.Deferred();

            if (null == this.holder || null == this.entity) {
                return deferred.reject();
            }
            var $holder = $(this.holder);

            $holder.undelegate();
            $holder.empty();
            try {
                CollectGarbage();
            } catch (exp) {
            }

            if (this.entity.step != null) {
                document.title = (this.entity.step.name != null ? this.entity.step.name + " - " : "") + this.entity.app.name;
                //以下代码为了IOS版微信能够刷新title
                if ($$.WECHAT) {
                    var $body = $('body');
                    var $iframe = $("<iframe style='display:none;' src='/static/img/favicon.ico'></iframe>");
                    $iframe.on('load', function () {
                        setTimeout(function () {
                            $iframe.off('load').remove();
                        }, 0);
                    }).appendTo($body);
                }
            }

            $$.dynamics.globalContext = $$.getGlobalContext(this.data);

            var instance = this;

            //参数是一传函数列表，该方法负责一个一个的调用，每次调用都setTimeout(0)，目的是为了progress绘制的内容能有机会渲染在页面上
            var functionCall = function () {
                var fns = Array.prototype.slice.call(arguments);
                if (fns.length > 0) {
                    fns[0].apply();
                    fns.splice(0, 1);
                    setTimeout(function () {
                        functionCall.apply(null, fns);
                    }, 0)

                }
            };

            //初始化时候对重复节表由于minOccur而增加出来的字段计算初始化公式，所有需要计算的字段存放在doDynamicFormulaControls数组里
            //重复节表增加minOccur的行时候向这个数组中添加控件
            this.doDynamicFormulaControls = [];

            functionCall(function () {
                instance.createViews();
                progress($$.lt("load.loadPage"), 80);
            }, function () {
                instance.initDynamicStyles();
                progress($$.lt("load.loadPage"), 83);
            }, function () {
                instance.initDynamicActions();
                progress($$.lt("load.loadPage"), 87);
            }, function () {
                instance.initDynamicValues();
                progress($$.lt("load.loadPage"), 90);
            }, function () {
                //释放缓存
                $$.params.initControls = [];
                instance.initFieldReferedClass();
                instance.processEvent();
                instance.triggerVarUrlChange();
                //在渲染完毕后请求排在队列中的外部代码表
                $$.codeManager.requestCodes();
                progress($$.lt("load.loadPage"), 95);
                setTimeout(function () {
                    deferred.resolve();
                }, 0);
            });

            return deferred.promise();
        },

        //触发_VAR_URL的fieldChange，如果表单上有根据url上参数变化显示的字段(动态公式)，触发change后会正常显示
        triggerVarUrlChange: function () {
            $("#_VAR_URL").change();
        },

        doDynamicFormulas: function (formControls, fromInit) {
            if (formControls == null) return;
            var dynamicFormulas = $$.dynamics.formulas;
            for (var i = 0, len = formControls.length; i < len; i++) {
                var control = formControls[i],
                    dynamicKeyName = control.getDynamicKeyName();
                if (dynamicKeyName == null) {
                    continue;
                }
                if (dynamicFormulas.hasOwnProperty(dynamicKeyName)) {
                    control.setDynamicValue(this, fromInit);
                }
            }
        },

        doDynamicStyles: function (formControls, fromInit) {
            var dynamicStyles = $$.dynamics.styles;
            for (var i = 0, len = formControls.length; i < len; i++) {
                var control = formControls[i],
                    dynamicKeyName = control.getDynamicKeyName();
                if (dynamicKeyName == null) {
                    continue;
                }

                if (dynamicStyles.hasOwnProperty(dynamicKeyName)) {
                    control.setDynamicStyle(this, fromInit);
                }
            }
        },

        doDynamicActions: function (formControls, fromInit) {
            var dynamicActions = $$.dynamics.actions;
            for (var i = 0, len = formControls.length; i < len; i++) {
                var control = formControls[i],
                    dynamicKeyName = control.getDynamicKeyName();
                if (dynamicKeyName == null) {
                    continue;
                }

                if (dynamicActions.hasOwnProperty(dynamicKeyName)) {
                    control.doDynamicAction(this, fromInit);
                }
            }
        },

        doDynamicValidations: function (formControls, fromInit) {
            var dynamicValidations = $$.dynamics.validations;
            for (var i = 0, len = formControls.length; i < len; i++) {
                var control = formControls[i],
                    dynamicKeyName = control.getDynamicKeyName();
                if (dynamicKeyName == null) {
                    continue;
                }

                if (dynamicValidations.hasOwnProperty(dynamicKeyName)) {
                    control.doDynamicValidation(this, fromInit);
                }
            }
        },


        //初始化时候将doDynamicFormulaControls里存放的由于重复节表的minOccur而增加出来的控件执行动态公式
        initDynamicValues: function () {
            this.doDynamicFormulas(this.doDynamicFormulaControls, true);
        },

        //初始化动态样式,主要功能是保存控件原style并根据初始的context设置初始的动态样式
        initDynamicStyles: function () {
            this.doDynamicStyles($IU.getAllControls(), true);
        },

        //初始化执行动态动作
        initDynamicActions: function () {
            this.doDynamicActions($IU.getAllControls(), true);
        },

        //初始化fieldRefered，如果发现某个控件没有初始化过onFieldRefer且需要初始化(该控件可能会改变别的控件的值或者样式或者引起动作)就将onFieldRefer置成true，并给控件添加fieldChange的class
        //由于不存在repeat control的change（总是由repeat中具体某个control的改变触发change事件）事件，所以repeat control上不用加上onFieldRefer这个属性，也不用加上fieldChange的class
        initFieldReferedClass: function () {
            var referedFormulas = $$.dynamics.referedFormulas,
                referedStyles = $$.dynamics.referedStyles,
                referedActions = $$.dynamics.referedActions,
                referedValidations = $$.dynamics.referedValidations;

            $$.params.renderForm.find("." + $Control.CLASSNAME_CONTROL).each(function () {
                var control = $(this).data($Control.DATA_CONTROL_OBJECT);
                if (control == null || control.field === undefined) return;
                if (control.onFieldRefer === false) {
                    var keyName = control.getDynamicKeyName(),
                        refKeyName = control.getDynamicContextControlName();
                    if (referedFormulas[keyName] !== undefined ||
                        referedStyles[keyName] !== undefined ||
                        referedActions[keyName] !== undefined ||
                        referedValidations[keyName] !== undefined ||
                        referedFormulas[refKeyName] !== undefined ||
                        referedStyles[refKeyName] !== undefined ||
                        referedActions[refKeyName] !== undefined ||
                        referedValidations[refKeyName] !== undefined) {
                        control.onFieldRefer = true;
                        control.addFieldChangeClass();
                    }
                }
            });
            //考虑repeat control不改变别的控件，不加onFieldRefer, 不addFieldChangeClass
        },

        //将表单中所有rowIndex字段触发一次change，目的是更新所有的显示序号label字段,在fieldChange返回数据后调用
        updateAllRowIndex: function () {
            $$.params.renderForm.find("." + $Control.CLASSNAME_ROWINDEX).each(function () {
                var element = this;
                //setTimeout(0)是因为fieldChange时候$$.params.fieldChanging会设置成一个对象，避免fieldChange联动
                //而$$.params.fieldChanging会在fieldChange完毕后setTimeout(0)执行，
                setTimeout(function () {
                    $(element).change();
                }, 0);
            });
        },

        doDynamicsAfterFieldChange: function () {
            //fieldChange后将表单上所有控件执行一次动态公式、动态样式，动态动作，动态验证
            //执行前先建立cache
            $$.dynamics.cache.build();
            //todo 这里取所有的control有点浪费，应该是取这次fieldChange返回的path这层及其所有上层和所有下层path里的controls，待优化
            var allControls = $IU.getAllControls();
            this.doDynamicStyles(allControls, false);
            this.doDynamicActions(allControls, false);
            this.doDynamicValidations(allControls, false);
            this.updateAllRowIndex();
        },

        /**
         * get entity value.
         */
        getEntity: function (field, path, entity) {
            var splits = path.split("_");
            splits.shift();
            var data = entity[field];
            if (data == null) return null;
            for (var i = 0; i < splits.length; i++) {
                var index = parseInt(splits[i]);
                if ($IU.isArray(data) && index < data.length) {
                    data = data[index];
                } else {
                    return null;
                }
                if (data == null) return null;
            }
            return data;
        },

        /**
         * set an entity value. if val(null) is given, remove the field entry
         * if entity is not null, setEntity to entity[field][[path]] = val
         */
        setEntity: function (val, field, path, entity, omitIfExist) {

            if (null == entity) entity = this.data;

            var splits = [];
            var i;
            if (null != path && "" !== path.length) {
                splits = path.split("_");
                i = 0;
                var s = splits[i];
                while (null != s) {
                    if ($IU.trimString(s) === "") {
                        splits.splice(i, 1);
                    } else {
                        i++;
                    }
                    s = splits[i];
                }
            }

            if (splits.length > 0) {
                i = 0; // Create if not exist
                if (null == entity[field]) {
                    entity[field] = [];
                }
                var data = entity[field];
                var index;
                while (i < splits.length - 1) {
                    index = parseInt(splits[i++]);
                    if (null == data[index]) {
                        data[index] = [];
                    }
                    data = data[index];
                }

                index = parseInt(splits[splits.length - 1]);
                // Remove entry if null is give
                if (null == val) {
                    data.splice(index, 1);
                } else {
                    if (data[index] == null || !omitIfExist) {
                        data[index] = val;
                    }
                }
            } else {
                if (entity[field] == null || !omitIfExist) {
                    entity[field] = val;
                }
            }
            return entity;
        },

        /**
         * Enumerate fields which needed in the repeatable layout
         */
        diceLayout: function (layout) {
            var dice = [];
            this.eachLayout(function (render) {
                var field = render["field"];
                if (field != null && !$IU.arrayContains(dice, field)) {
                    dice.push(field);
                }
            }, layout, "Boundable");
            return dice;
        },

        createView: function (viewRender, index, hasLabel) {
            var viewDom = this.createLayout(viewRender, this.data, "");
            if (viewDom != null) {
                var view = new InfoPlus.Layout.View({
                    prefix: this.prefix,
                    index: index,
                    render: viewRender,
                    element: viewDom,
                    holder: this.holder,
                    hasLabel: hasLabel
                });
                this.views.push(view);
                this.dynamicAnalyzer.analysisDynamic(viewRender.properties, view.getDynamicKeyName());
            }
        },

        createDisplayElement: function (render) {
            var element;
            switch (render["renderType"]) {
                case "DisplayText":
                    //处理wiki语法
                    if (render["syntax"] === "mdx") {
                        element = document.createElement("span");
                        if (render["cssClass"] != null) {
                            $(element).addClass(render["cssClass"]);
                        }
                        if (render["emoji"] != null) {
                            var emojiSpan = document.createElement("span");
                            $(emojiSpan).addClass("mdx_emoji mdx_emoji_" + render["emoji"]);
                            $(element).append(emojiSpan);
                        }
                        $(element).append(document.createTextNode(render["text"]));
                    } else {
                        element = document.createTextNode(render["text"]);
                    }
                    break;
                case "DisplayBreak":
                    element = document.createElement("br");
                    break;
                case "DisplayAnchor":
                    element = document.createElement("a");
                    element.setAttribute("href", render["uri"] || "");
                    element.setAttribute("target", "_blank");
                    $(element).text(render["text"] || "");
                    break;
                case "DisplayImage":
                    element = document.createElement("img");
                    element.setAttribute("border", "0");
                    if (render["uri"] != null) {
                        element.setAttribute("src", $$.params.baseUrl + "file/form/" + this.entity.viewId + "/" + render["uri"]);
                    }
                    if (render["attributes"] != null && $IU.isArray(render["attributes"])) {
                        for (var i = 0, len = render["attributes"].length; i < len; i++) {
                            var attr = render["attributes"][i];
                            if (attr["key"] === "style") {
                                element.setAttribute("style", attr["value"]);
                                break;
                            }
                        }
                    }
                    break;
                case "DisplayLabel":
                    element = document.createElement("label");
                    element.innerText = render["text"];
                    element.setAttribute("for", render["labelFor"] || "");
                    if (render["attributes"] != null && $IU.isArray(render["attributes"])) {
                        for (var x = 0; x < render["attributes"].length; x++) {
                            if (render["attributes"][x]["key"] === "class") {
                                // set class
                                element.className += (" " + render["attributes"][x]["value"]);
                            }
                        }
                    }
                    break;
            }
            return element;
        },

        /**
         * The path gives the repeat levels (zero based)
         * a path of _2_1 tells the current layout is in the 2nd level repeater
         * which the 1st level index is 2 and the 2nd level index is 1
         */
        createLayout: function (layout, data, path) {
            var getAddLinkText = function (nextRender) {
                if (nextRender != null && nextRender.renders !== undefined && nextRender.renders.length > 0 && nextRender.renders[0].text !== undefined) {
                    return nextRender.renders[0].text;
                }
                return null;
            };

            var element = this.createLayoutElement(layout);
            var elementContainer = element;
            // Append Attributes
            this.createAttributes(element, layout["attributes"]);
            //如果是table给其加上一个tbody,为了能在ie6 7 下显示
            if (layout["renderType"] === "LayoutTable") {
                var tbody = document.createElement("tbody");
                element.appendChild(tbody);
                elementContainer = tbody;
            }

            var renderList = layout["renders"];
            // Create layouts
            var lastIsRepeatable = false;
            for (var i = 0; i < renderList.length; i++) {
                var render = renderList[i];
                if (render == null) continue;

                var cate = render["renderCategory"];
                if (cate == null) continue;
                var child;
                switch (cate) {
                    case "Boundable":
                        child = this.createControl(render, data, path);
                        if (elementContainer != null && child != null) {
                            elementContainer.appendChild(child);
                        }
                        break;
                    case "Displayable":
                        child = this.createDisplayElement(render);
                        if (elementContainer != null && child != null) {
                            elementContainer.appendChild(child);
                        }
                        break;
                    case "Layoutable":
                        if (render["repeatable"] === true) {
                            var repeatParentElement = elementContainer,
                                isRepeatTable = (render.renderType === "LayoutTable");
                            var groupName = render['groupName'];
                            if (groupName == null) {
                                $IU.debugTip('重复节表缺少必要的名称', 'warning');
                                break;
                            }
                            //重复表字段从repeating===true的render.renders那行里取，不考虑表头;重复节就从render里取
                            if (!isRepeatTable) {
                                var fieldNames = this.diceLayout(render);
                            } else {
                                var contentRowIndex = -1;
                                for (var rowIndex = 0, len = render.renders.length; rowIndex < len; rowIndex++) {
                                    if (render.renders[rowIndex]['repeating'] === true) {
                                        contentRowIndex = rowIndex;
                                        break;
                                    }
                                }
                                if (contentRowIndex !== -1) {
                                    fieldNames = this.diceLayout(render.renders[contentRowIndex]);
                                } else {
                                    $IU.debugTip('重复表' + groupName + '缺少必要的数据行', 'warning');
                                    break;
                                }
                            }

                            var firstControlNamePrefix = fieldNames.length > 0 ? fieldNames[fieldNames.length - 1] : null;

                            var groupInformation = this.entity.groups[groupName];

                            if (groupInformation.isMasterDetail === true && !isRepeatTable) {
                                groupInformation.detailRender = render;
                            } else {
                                //获取新增按钮上的文字
                                var addLinkText = getAddLinkText(renderList[i + 1]);

                                var repeatControl = new InfoPlus.Repeat.RepeatControl({
                                    initData: data,
                                    formRender: this,
                                    render: render,
                                    path: path,
                                    repeatParentElement: repeatParentElement,
                                    repeatContentParentElement: repeatParentElement,
                                    firstControlNamePrefix: firstControlNamePrefix,
                                    repeatType: isRepeatTable ? InfoPlus.Repeat.RepeatControl.REPEAT_TYPE_TABLE : InfoPlus.Repeat.RepeatControl.REPEAT_TYPE_SECTION,
                                    addLinkText: addLinkText,
                                    fieldNames: fieldNames,
                                    groupInformation: groupInformation
                                });

                                this.dynamicAnalyzer.analysisDynamic(render.properties, repeatControl.getDynamicKeyName(),
                                    repeatControl.rowIndexFieldName, repeatControl.groupCountFieldName);
                            }
                            lastIsRepeatable = true;
                        } else {
                            //如果lastIsRepeatable==true，上一个Layoutable是一个重复块或table就跳过该Layoutable，因为该Layoutable是infopath加上的新增按钮div，我们有自己的新增按钮，不需要infopath加上的
                            if (lastIsRepeatable === true) {
                                lastIsRepeatable = false;
                            } else {
                                // keep data and path
                                child = this.createLayout(render, data, path);
                                if (elementContainer != null) {
                                    elementContainer.appendChild(child);
                                    if ($$.params.mobileAutoView) {
                                        //如果是mobileAutoView，将新增按钮放到外面来，使左右拖动时候新增按钮不移动
                                        if ($(child).hasClass("infoplus_auto_view_repeatTable_wrap_outer")) {
                                            var $addLink = $(child).children().children(".infoplus_addLinkContainerDiv").first();
                                            if ($addLink.length > 0) {
                                                $addLink.detach().appendTo(elementContainer);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                }

            }
            // Return the element that just created.
            return element;
        },

        createColGroup: function (layout, tableElement) {
            var columns = layout["columns"];
            if (columns != null) {
                var colgroup = document.createElement("colgroup");
                for (var i = 0; i < columns.length; i++) {
                    var col = document.createElement("col");
                    if (columns[i].width > 0) {
                        col.width = columns[i].width;
                    }
                    this.createAttributes(col, columns[i]["attributes"]);
                    colgroup.appendChild(col);
                }
                tableElement.appendChild(colgroup);
            }
        },

        createLayoutElement: function (layout) {
            var element = null;
            switch (layout["renderType"]) {
                case "FormView":
                case "LayoutDivision":
                    element = document.createElement("div");
                    break;
                case "LayoutTable":
                    element = document.createElement("table");
                    //create colgroup tag to ensure column width
                    this.createColGroup(layout, element);
                    break;
                case "LayoutTableRow":
                    element = document.createElement("tr");
                    break;
                case "LayoutTableCell":
                    element = document.createElement("td");
                    break;
                case "LayoutHeader":
                    element = document.createElement("h" + layout["size"]);
                    break;
                case "LayoutFont":
                    element = document.createElement("font");
                    break;
                case "LayoutPhrase":
                    switch (layout.phraseType) {
                        case "Emphasized":
                            element = document.createElement("em");
                            break;
                        case "Strong":
                            element = document.createElement("strong");
                            break;
                        case "Definition":
                            element = document.createElement("dfn");
                            break;
                        case "Code":
                            element = document.createElement("code");
                            break;
                        case "Keyboard":
                            element = document.createElement("kbd");
                            break;
                        case "Sample":
                            element = document.createElement("samp");
                            break;
                        case "Variable":
                            element = document.createElement("var");
                            break;
                        case "Citation":
                            element = document.createElement("cite");
                            break;
                        case "Superscript":
                            element = document.createElement("sup");
                            break;
                        case "Subscript":
                            element = document.createElement("sub");
                            break;
                        case "Underline":
                            element = document.createElement("u");
                            break;
                        case "Italic":
                            element = document.createElement("i");
                            break;
                        case "Small":
                            element = document.createElement("small");
                            break;
                        case "StrikeThrough":
                            element = document.createElement("s");
                            break;
                        case "Big":
                            element = document.createElement("big");
                            break;
                    }
                    break;
                case "LayoutOrderedList":
                    element = document.createElement("ol");
                    break;
                case "LayoutUnorderedList":
                    element = document.createElement("ul");
                    break;
                case "LayoutListItem":
                    element = document.createElement("li");
                    break;
                case  "LayoutAnchor":
                    element = document.createElement("a");
                    element.setAttribute("href", layout["uri"] || "");
                    element.setAttribute("target", "_blank");
                    break;
                case "LayoutLabel":
                    element = document.createElement("label");
                    break;
                default: // this must be an UFO! commented by marstone.
                    element = document.createElement("div");

            }
            return element;
        },

        /*
         * 获得displayValue(目前就是suggester控件的显示值、<a>的显示值、select控件的显示值)
         */
        getDisplayText: function (render, data, path, key) {
            var text;
            if (data[key + "_displayText"] !== undefined) {
                //新增repeat section或者table row时
                text = data[key + "_displayText"];
            } else {
                //初始化时
                var keyText = render["fieldText"] || key + "_Name";
                text = this.getEntity(keyText, path, this.data);
            }
            return text;
        },

        getAttributeValue: function (path, fieldName, data) {
            //初始化时候才从this.data取属性，重复节表新增时候不应该从this.data取
            if ($$.params.initializing === true) {
                var attribute = this.getEntity(fieldName + '_Attr', path, this.data);
                if (attribute != null) {
                    return $.parseJSON(attribute);
                }
            }

            if (data != null && data.hasOwnProperty(fieldName + "_Attr")) {
                //fieldChange处理过的数据
                return data[fieldName + "_Attr"];
            }
            return null;
        },

        getParentValue: function (path, fieldName, parentFieldName) {
            //先从attribute中获取(数据load出来后_parent这个attribute应该有，如果parent的值发生变化，该值会跟随变动，只有那些重复节或重复表中新增出来的控件才没有_parent这个attribute)
            var attribute = this.getAttributeValue(path, fieldName);
            if (attribute != null) {
                return attribute['_parent'];
            }
            //如果attribute中没有，那么从this.data中获取(重复节或重复表在新增时候会调用save把数据存在this.data中) ,考虑到父亲值可能来自于兄弟或者祖先，那么要从当前path出发，一层一层向上找
            if (parentFieldName !== undefined) {
                return this.getParentValueOrAttributes(path, parentFieldName, true);
            }
            return null;
        },

        //根据path和parentFieldName取parent的值或者attributes
        //parent只可能是兄弟或者祖先，那么从当前path出发，一层一层向上找
        //isGetValue===true代表取parent值，否则取attributes值
        getParentValueOrAttributes: function (path, parentFieldName, isGetValue) {
            var paths = [],
                pathSplit = path.split("_");
            paths.push("");
            for (var i = 1; i < pathSplit.length; i++) {
                paths.push(paths[paths.length - 1] + "_" + pathSplit[i]);
            }
            var nowPath = paths.pop(),
                value = null;
            while (nowPath !== undefined) {
                value = (isGetValue === true) ? this.getEntity(parentFieldName, nowPath, this.data) : this.getAttributeValue(nowPath, parentFieldName);
                if (value != null) {
                    break;
                }
                nowPath = paths.pop();
            }
            return value;
        },

        getParentAttributes: function (path, parentFieldName) {
            return this.getParentValueOrAttributes(path, parentFieldName, false);
        },

        getField: function (fieldName) {
            var field = null;
            if (null != fieldName && null != this.entity["fields"]) {
                field = this.entity["fields"][fieldName];
                if (field == null) {
                    $IU.debugTip('未找到字段' + fieldName + ",请检查主表单", 'warning');
                }
            }
            return field;
        },

        createControl: function (render, data, path) {
            var fieldName = render["field"];
            if (fieldName == null) return null;
            var field = this.getField(fieldName);
            if (field == null) return null;

            var val = data[fieldName],
                text = '',
                parentValue = null;

            if (val !== undefined && val !== '') {
                text = this.getDisplayText(render, data, path, fieldName);
            }
            if (field.parent !== undefined) {
                parentValue = this.getParentValue(path, fieldName, field.parent);
            }

            var attributes = this.getAttributeValue(path, field.name, data);

            return this.createControlElement(path, field, render, val, text, parentValue, attributes);
        },

        getSelectDataSource: function (field) {
            var items = null;
            if (field.code != null) {
                if (this.entity.codes[field.code] != null) {
                    items = this.entity.codes[field.code].items;
                }
            }
            return items;
        },

        createControlElement: function (path, field, render, value, text, parentValue, attributes) {
            var element = null;
            var control = null;
            //add default settings
            render['settings'] = $.extend(DEFAULT_SETTINGS, render['settings']);

            switch (render["renderType"]) {
                case $Control.CONTROL_TYPE_EDIT:
                    control = new $Controls.Edit(path, field, render, value);
                    break;
                case $Control.CONTROL_TYPE_PASSWORD:
                    control = new $Controls.Password(path, field, render, value);
                    break;
                case $Control.CONTROL_TYPE_TEXT:
                    //if (field.type === $Control.DATA_TYPE_XHTML) {
                    //    control = new $Controls.RichText(path, field, render, value);
                    //} else {
                    control = new $Controls.Text(path, field, render, value);
                    //}
                    break;
                case $Control.CONTROL_TYPE_RICHTEXT:
                    control = new $Controls.RichText(path, field, render, value);
                    break;
                case $Control.CONTROL_TYPE_DATE:
                    control = new $Controls.Date(path, field, render, value);
                    break;
                case $Control.CONTROL_TYPE_TIME:
                    control = new $Controls.Time(path, field, render, value);
                    break;
                case $Control.CONTROL_TYPE_CHECKBOX:
                    control = new $Controls.Check(path, field, render, value);
                    break;
                case $Control.CONTROL_TYPE_CHECKBOX_LIST:
                    control = new $Controls.CheckList(path, field, render, value, text);
                    break;
                case $Control.CONTROL_TYPE_RADIO:
                    //如果数据类型为布尔,那么创建RadioGroup用于重复节表中选中一行
                    if (field.type === $Control.DATA_TYPE_BOOL) {
                        control = new $Controls.RadioGroup(path, field, render, value);
                    } else {
                        control = new $Controls.Radio(path, field, render, value);
                    }
                    break;
                case $Control.CONTROL_TYPE_RADIO_LIST:
                    control = new $Controls.RadioList(path, field, render, value, text, parentValue, attributes);
                    break;
                case $Control.CONTROL_TYPE_SELECT:
                    control = new $Controls.Select(path, field, render, value, text, parentValue, attributes);
                    break;
                case $Control.CONTROL_TYPE_REMARK:
                    control = new $Controls.Remark(path, field, render, value);
                    break;
                case $Control.CONTROL_TYPE_BUTTON:
                    control = new $Controls.Button(path, field, render, value, text);
                    break;
                case $Control.CONTROL_TYPE_CHECK_BUTTON:
                    control = new $Controls.CheckButton(path, field, render, value, text, attributes);
                    break;
                case $Control.CONTROL_TYPE_LINK_BUTTON:
                    control = new $Controls.LinkButton(path, field, render, value, text);
                    break;
                case $Control.CONTROL_TYPE_ANCHOR:
                    control = new $Controls.Anchor(path, field, render, value, text);
                    break;
                case $Control.CONTROL_TYPE_LABEL:
                    control = new $Controls.Label(path, field, render, value, text, attributes);
                    break;
                case $Control.CONTROL_TYPE_CONVERTED_LABEL:
                    control = new $Controls.Label(path, field, render, value, text, attributes, true);
                    break;
                case $Control.CONTROL_TYPE_HIDDEN:
                    control = new $Controls.Hidden(path, field, render, value, text, attributes);
                    break;
                case $Control.CONTROL_TYPE_SUGGESTER:
                    var tipFormat = (field.code != null) ? this.entity.codes[field.code].tipFormat : null;
                    control = new $Controls.Suggester(path, field, render, this, value, text, parentValue, tipFormat,
                        this.suggestService, this.suggestInitializeService, attributes);
                    break;
                case $Control.CONTROL_TYPE_SUGGESTER2:
                    control = new $Controls.Suggester2(path, field, render, value, text, parentValue, this.suggestService, attributes);
                    break;
                case $Control.CONTROL_TYPE_DOC:
                    control = new $Controls.Doc(path, field, render, value);
                    break;
                case $Control.CONTROL_TYPE_FILE:
                    control = new $Controls.File(path, field, render, value);
                    break;
                case $Control.CONTROL_TYPE_HELP:
                    control = new $Controls.Help(path, field, render, value);
                    break;
                case $Control.CONTROL_TYPE_IMAGE:
                    control = new $Controls.Image(path, field, render, value, text, attributes);
                    break;
                case $Control.CONTROL_TYPE_PICTURE:
                    control = new $Controls.Picture(path, field, render, value);
                    break;
                case $Control.CONTROL_TYPE_IFRAME:
                    control = new $Controls.Iframe(path, field, render, value);
                    break;
                case $Control.CONTROL_TYPE_THING:
                    control = new $Controls.Thing(path, field, render, value, text, attributes);
                    break;
                case $Control.CONTROL_TYPE_SWITCH:
                    control = new $Controls.Switch(path, field, render, value);
                    break;
                case $Control.CONTROL_TYPE_MAP:
                    control = new $Controls.Map(path, field, render, value, text, attributes);
                    break;
            }
            if (control != null) {
                this.dynamicAnalyzer.analysisDynamic(render.properties, control.getDynamicKeyName(),
                    control.getGroupRowIndexName(), control.getGroupCountName(), field.parent);
                element = control.getControlContainer();
                $$.registerControlEvents(control);

                //如果不是不是文本框，去除xdTextBox这个class,因为很多控件都可以用文本框来画，会自带这个class
                if (!(control instanceof $Controls.Edit)) {
                    $(control.element).removeClass("xdTextBox");
                    $(element).removeClass("xdTextBox");
                }
            }

            return element;
        },

        createAttributes: function (element, attributes) {
            if (element == null) return;
            if (attributes == null || !$IU.isArray(attributes)) return;

            var isTableElement = function () {
                if (element.nodeName == null) return false;
                var name = element.nodeName.toLocaleLowerCase();
                return name === "table" || name === "tbody" || name === "tr" || name === "td" || name === "th";
            };

            var filterMinHeight = function (originalStyle) {
                if (originalStyle == null || originalStyle === "") {
                    return "";
                }
                if (originalStyle.toLocaleLowerCase().indexOf("min-height") === -1) {
                    return originalStyle;
                }
                var styles = originalStyle.split(";");
                var newStyles = [];
                for (var i = 0, len = styles.length; i < len; i++) {
                    var style = $IU.trimString(styles[i]);
                    if (style !== "") {
                        if (style.toLocaleLowerCase().indexOf("min-height") === -1) {
                            newStyles.push(style);
                        }
                    }
                }
                return newStyles.join(";");
            };

            for (var i = 0; i < attributes.length; i++) {
                var attribute = attributes[i];
                var key = attribute["key"];
                if (null != attribute["namespace"] && "" !== attribute["namespace"]) {
                    key = attribute["namespace"] + ":" + key;
                }
                try {
                    switch (key.toLocaleLowerCase()) {
                        case "class":
                            $(element).addClass(attribute["value"]);
                            /*原先代码中需要排除label的原因不明，现在考虑infopath中用input替代anchor来放置label，故先不采用原来做法，效果待观察
                             if (controlType != $Control.CONTROL_TYPE_LABEL) {
                             if (null != element.className && "" != element.className)
                             element.className += " ";
                             element.className += attribute["value"];
                             }*/
                            break;
                        case "onclick":
                        case "value":
                            break;
                        case "style":
                            if (isTableElement()) {
                                //如果是table元素，过滤min-height
                                var filterStyle = filterMinHeight(attribute["value"]);
                                if (filterStyle !== "") {
                                    element.setAttribute(key, filterStyle);
                                }
                            } else {
                                element.setAttribute(key, attribute["value"]);
                            }
                            break;
                        default:
                            element.setAttribute(key, attribute["value"]);
                            break;
                    }
                } catch (exception) {
                }
            }
        },

        //保存attribute和parent值
        saveAttributes: function (control, fieldName, path, entity, omitIfExist) {
            var attr = control.getAttributes(),
                parentValue = control.getParentValue();
            if (attr != null || parentValue != null) {
                if (attr == null) {
                    attr = {};
                }
                if (parentValue != null) {
                    attr['_parent'] = parentValue;
                }
            }
            if (attr != null) {
                this.setEntity($.toJSON(attr), fieldName + "_Attr", path, entity, omitIfExist);
            } else {
                //如果有初始属性，且目前属性为null，那么设置空字串值，目的是让后台将该字段的attribute值清除
                if (control.initAttributes != null) {
                    this.setEntity('', fieldName + "_Attr", path, entity, omitIfExist);
                }
            }
        },

        /**
         * Save current data to entity.data
         */
        save: function (entity, detailAdv) {
            if (detailAdv === undefined) {
                detailAdv = false;
            }
            if (null == this.holder || null == this.entity) return entity;
            if (null == entity) {
                //清除this.data中所有表单数据，保留全局变量
                var fields = this.entity.fields;
                for (var formField in fields) {
                    if (fields.hasOwnProperty(formField)) {
                        //目前就存field,filed_Name,field_Attr，以后如果有扩展，这里再添加
                        if (this.data.hasOwnProperty(formField)) {
                            delete this.data[formField];
                        }
                        if (this.data.hasOwnProperty(formField + "_Name")) {
                            delete this.data[formField + "_Name"];
                        }
                        if (this.data.hasOwnProperty(formField + "_Attr")) {
                            delete this.data[formField + "_Attr"];
                        }
                    }
                }
                entity = this.data;
            }


            //保存重复块或table的keyIndex信息
            var $repeatParentElements = $("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_PARENT_ELEMENT);
            for (var i = 0, len = $repeatParentElements.length; i < len; i++) {
                var repeatControl = $($repeatParentElements[i]).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                if (repeatControl == null) continue;
                this.setEntity(repeatControl.keyIndex, repeatControl.groupName, repeatControl.path, entity, false);
            }

            var instance = this;
            $$.params.renderForm.find("." + $Control.CLASSNAME_CONTROL).each(function () {
                var $element = $(this);
                //重复节表中的rowIndex字段或者count不用存盘
                if ($element.hasClass($Control.CLASSNAME_ROWINDEX)) {
                    return;
                }
                if ($element.hasClass($Control.CLASSNAME_GROUP_COUNT)) {
                    return;
                }
                var path = $element.data($Control.DATA_PATH);
                var field = $element.data($Control.DATA_FIELD);
                var control = $element.data($Control.DATA_CONTROL_OBJECT);

                if (field != null && control != null) {
                    var omitIfExist = (detailAdv === true && !control.isDetailControl()) || (detailAdv === false && control.isDetailControl());
                    var val = control.getValue();
                    if (val instanceof $Controls.Data.ValuePair) {
                        instance.setEntity(val.value, field, path, entity, omitIfExist);
                        instance.setEntity(val.displayValue, field + "_Name", path, entity, omitIfExist);
                        //保存parent值以及attribute值，目前只有Data为ValuePair的Suggester和Select有parent值以及Attribute值，以后如果扩充再改写此段代码
                        instance.saveAttributes(control, field, path, entity, omitIfExist);
                    } else {
                        if (val instanceof $Controls.Data.Uri) {
                            instance.setEntity(val.value, field, path, entity, omitIfExist);
                        } else {
                            if (val != null) {
                                instance.setEntity(val, field, path, entity, omitIfExist);
                            }
                        }
                    }
                }
            });

            // alert(count + " data items have been saved.");
            //debug(entity);
            return entity;
        },

        /**
         * Discard all modifications and reload original data
         */
        discard: function () {
            if (null == this.entity["data"])
                this.entity["data"] = {};
            this.data = $.extend(true, {}, this.entity["data"]);
        },

        /*
         *   category: null to traverse all. else: Layoutable, Boundable, Displayable
         */
        eachLayout: function (callback, layout, category) {

            // top level?
            if (null == layout) {
                var allRenders = [];
                for (var i = 0; i < this.entity.views.length; i++) {
                    var view = this.entity.views[i];
                    if (null != view) {
                        var renders = this.eachLayout(callback, view, category);
                        for (var n = 0; n < renders.length; n++)
                            allRenders.push(renders[n]);
                    }
                }
                return allRenders;
            }

            // layout is give, traverse it.

            var entities = [];
            // Visit laytou first
            if (null == category || category === layout["renderCategory"]) {
                if (typeof callback === "function") {
                    callback(layout);
                }
                entities.push(layout);
            }

            // Traverse
            var stack = [];
            var current = layout;
            while (null != current) {
                var renderList = current["renders"];
                for (i = 0; i < renderList.length; i++) {
                    var render = renderList[i];
                    var cate = render["renderCategory"];
                    if (null == category || category === render["renderCategory"]) {
                        if (typeof callback === "function") {
                            callback(render);
                        }
                        entities.push(render);
                    }
                    if (cate === "Layoutable") stack.push(render);
                }
                current = stack.pop();
            }

            return entities;
        },


        //infoplus_control change事件
        //此事件仅限于<input>元素，<textarea>框和<select>元素。
        //对于选择框，复选框和单选按钮，当用户用鼠标作出选择，该事件立即触发，但对于其他类型元素，该事件触发将推迟到元素失去焦点
        //所以，这个事件可以直接处理由界面控件(Edit,Text,Password,Date,Check,Option,Select,RadioList)值变化引起的fieldChange事件
        //Hidden、Label、Remark、Help、Suggester、File、Picture、CheckList在setValue时自己判断是否change，如果change则用代码触发change事件，代码转至此处执行
        onFieldChange: function (event) {
            //如果正在进行字段同步，那么一切fieldChange,fieldRefer都不进行
            if ($$.params.fieldSyncing === true) {
                return;
            }
            //取Label,Remark,Help,File的control对象
            var control = $(this).data($Control.DATA_SOURCE_CONTROL);
            if (control === undefined) {
                //取其他控件的control对象
                control = $(this).data($Control.DATA_CONTROL_OBJECT);
            }
            if (control != null) {
                var render = event.data.render;

                var doFieldChange = function () {
                    //已经正在发生fieldChange且不是button,linkButton,anchor的click触发的
                    if ($$.params.fieldChanging != null && !control.clickFireFieldChange) {
                        return;
                    }

                    //如果该控件是suggester或者suggester2在移动版弹出的Page页里的那个suggester2，那么替换成原来的那个控件触发fieldChange
                    if (control instanceof InfoPlus.Controls.Suggester2 && control.isOnPagePopup && control.originSuggester != null) {
                        control = control.originSuggester;
                    }

                    var data = {};
                    data = render.save(data, control.isDetailControl());
                    control.fieldChangeEvent(data).done(function () {
                        //fieldChange结束后所有控件执行一次动态样式，动作，验证
                        render.doDynamicsAfterFieldChange();
                        //触发全局fieldChanged事件
                        $$.fieldChanged($$(control));
                        //触发control的fieldChanged事件
                        $$(control).fieldChanged();
                    }).fail(function (data) {
                        //如果是canceled(messenger端抛错)，仍旧需要执行所有动态
                        if (data['errCode'] === 'EVENT_CANCELLED') {
                            render.doDynamicsAfterFieldChange();
                        }
                    }).always(function () {
                        //在fieldChange的最后，如果发生fieldChange的控件是Button,LinkButton,CheckButton，移除disabled属性
                        if (control instanceof $Controls.Button || control instanceof $Controls.LinkButton || control instanceof $Controls.CheckButton) {
                            $(control.element).removeAttr("disabled");
                        }
                    });
                };

                //最先做同步，使得表单上的数据保持一致
                if (control.onFieldSync) {
                    control.fieldSyncEvent();
                }

                if (control.onFieldRefer) {
                    $$.dynamics.cache.build();
                    control.fieldReferEvent(render, true, true, true, true, true);
                    //触发全局fieldRefered事件
                    $$.fieldRefered($$(control));
                    //触发control的fieldRefered事件
                    $$(control).fieldRefered();
                }

                if (control.onFieldChange && ($$.params.fieldChanging == null || control.clickFireFieldChange)) {
                    if (control.onFieldRefer) {
                        //如果fieldRefer后还要触发fieldChange，那么延时触发，让前面fieldRefer中由于变动而再次触发的公式，动作，样式都做完（那些再次触发的公式等也是setTimeout里做的）
                        //之所以settimeout(200),而不是settimeout(0),是为了避免再次触发的公式等还能触发下一级公式，
                        //那些触发都是settimeout(0),如果这里也settimeout(0),那么fieldchange会比那些公式的再触发先做，这里期待200毫秒内那些公式都会完成再触发（虽然不是太严谨）
                        setTimeout(doFieldChange, 200);
                    } else {
                        doFieldChange();
                    }
                }

            }
        },

        onFieldFocus: function () {
            //取Label,Remark,Help,File的control对象
            var control = $(this).data($Control.DATA_SOURCE_CONTROL);
            if (control == null) {
                //取其他控件的control对象
                control = $(this).data($Control.DATA_CONTROL_OBJECT);
            }
            if (control == null) {
                //取suggester控件
                control = $($(this).data($Control.DATA_ORIGIN_INPUT)).data($Control.DATA_CONTROL_OBJECT);
            }
            if (control != null) {
                control.showTooltip();
            }
        }
    };

    define("InfoPlus.FormRender", formRender);

})(window);

﻿/**
 * 办理历史
 * @Author Du Jinbo
 * @Since 2010/10/11
 */

(function (window, undefined) {
    var remarkRender = function (options) {
        this.progress = options["progress"];
        this.stepId = options["stepId"];
        this.instanceId = options["instanceId"];
        this.userId = options["userId"];
        this.readOnly = options["readOnly"];
        this.administrable = options["administrable"];
        this.subEntryId = options["subEntryId"];
        this.slide = options["slide"];
    };

    var HIDDEN_TEXT = "[Hidden]";
    var PUBLIC = "PUBLIC";

    var getPopTipPlacement = function (popper) {
        var placement = "top-left";
        if ($$.MOBILE) {
            if ($(popper).offset().left > ($(window).width() / 2)) {
                placement = "top-right";
            }
        }
        return placement;
    };

    var createPopTip = function (popper, text) {
        return new InfoPlus.Render.PopTip({
            popper: popper,
            container: $$.params.renderContainer[0],
            text: text,
            colorClass: "remarkTip",
            placement: getPopTipPlacement(popper),
            effect: "bounce",
            onClick: function () {
                return false;
            },
            onClose: $IU.refreshReviewByForm
        });
    };

    var moveToTip = function (popper, poppers) {

        var getTotalOffsetTop = function (obj) {
            var top = 0;
            if (obj.offsetParent) {
                do {
                    top += obj.offsetTop;
                    obj = obj.offsetParent;
                } while (obj);
            }
            return top;
        };
        if ($(popper).data("popTip") != null) {
            var top = parseInt($($(popper).data("popTip").element).css("top"), 10);
            $IU.scrollTo(top > 60 ? top - 60 : 0, 500);
            setTimeout(function () {
                $($(popper).data("popTip").element).effect("bounce", {}, 150);
            }, 500);
        } else {
            top = getTotalOffsetTop(popper);
            var tip = createPopTip(popper, $(popper).data("remark"));
            createPopMenu(poppers, tip);
            $IU.scrollTo(top > 100 ? top - 100 : 0, 500);
        }
        return false;
    };

    var getMenuItems = function (poppers) {
        return function () {
            var element = this.element;
            var findVisiblePoppers = function () {
                var visiblePoppers = [];
                for (var j = 0; j < poppers.length; j++) {
                    var p = poppers[j];
                    if ($(p).is(":visible")) {
                        visiblePoppers.push(p);
                    }
                }
                return visiblePoppers;
            };
            var getThisPopperIndex = function () {
                var thisTipControl = $(element).parent().data("tipControl");
                for (var j = 0; j < visiblePoppers.length; j++) {
                    var p = visiblePoppers[j];
                    if (p === thisTipControl.options.popper) {
                        return j;
                    }
                }
                return -1;
            };
            var visiblePoppers = findVisiblePoppers();
            visiblePoppers.sort(function (a, b) {
                var offsetA = $(a).offset(),
                    offsetB = $(b).offset();
                if (offsetA.top === offsetB) {
                    return offsetA.left - offsetB.left;
                } else {
                    return offsetA.top - offsetB.top;
                }
            });
            var thisPopperIndex = getThisPopperIndex(visiblePoppers);
            var hasPrev = thisPopperIndex !== -1 && thisPopperIndex > 0,
                hasNext = thisPopperIndex !== -1 && thisPopperIndex < visiblePoppers.length - 1;
            var items = [];
            if (hasPrev) {
                items.push({
                    id: "prev",
                    text: $$.lt("remarkHistory.review.previous"),
                    iconClass: "i-icon-triangle-left",
                    click: function () {
                        return moveToTip(visiblePoppers[thisPopperIndex - 1], visiblePoppers);
                    }
                });
            }
            if (hasNext) {
                items.push({
                    id: "next",
                    text: $$.lt("remarkHistory.review.next"),
                    iconClass: "i-icon-triangle-right",
                    click: function () {
                        return moveToTip(visiblePoppers[thisPopperIndex + 1], visiblePoppers);
                    }
                });
            }

            items.push({
                id: "close",
                text: $$.lt("remarkHistory.review.close"),
                iconClass: "i-icon-cross",
                click: function () {
                    var tipControl = $(element).parent().data("tipControl");
                    tipControl.close();
                    return false;
                }
            });

            return items;
        };
    };

    var createPopMenu = function (poppers, tip) {
        new InfoPlus.Render.PopMenu({
            container: tip.element,
            items: getMenuItems(poppers)
        });
    };


    remarkRender.prototype = {
        progress: null,
        stepId: null,
        instanceId: null,
        prefix: "infoplus_remark_" + Math.round(Math.random() * 9000 + 1000) + "_",


        //将step排序，做完的排在最后，未做完的排前面，当前这步排在最前面（如果当前这步未做完）
        sortSteps: function () {
            var doneSteps = [],     //已办步骤
                undoSteps = [],     //未办步骤
                thisUndoStep,       //当前未办步骤
                allSteps = this.progress.remarks,
                activities = this.progress.activities,
                status = this.progress.status,
                administrable = this.administrable,
                thisStepId = this.stepId;


            var insertStepToArray = function (stepArray, insertStep, isDone) {
                var arrayLength = stepArray.length;
                for (var n = 0; n < arrayLength; n++) {
                    if (isDone) {
                        if (stepArray[n].actionTime > insertStep.actionTime) {
                            break;
                        }
                    } else {
                        if (stepArray[n].assignTime > insertStep.assignTime) {
                            break;
                        }
                    }
                }
                stepArray.splice(n, 0, insertStep);
            };

            //将activities合并到办理历史
            var mergeActivities = function () {
                //管理查看页和管理数据页都需要将activities并入，查看页会有一个显示链接，点击显示，管理数据页直接显示
                if (administrable || $$.params.adminView) {
                    for (var i = 0, len = activities.length; i < len; i++) {
                        var activity = activities[i];
                        allSteps.push({
                            actionTime: activity.timestamp,
                            trueName: activity.user != null ? activity.user.name : $$.lt("remarkHistory.user.system"),
                            userName: activity.user != null ? activity.user.id : "",
                            activityType: activity.tags,
                            remark: activity.description
                        });
                    }
                } else {
                    //非管理页面，如果状态是终止，那么将最后一个终止拼上
                    if (status === "killed") {
                        for (i = activities.length - 1; i >= 0; i--) {
                            activity = activities[i];
                            if (activity.tags === "INSTANCE_KILL") {
                                allSteps.push({
                                    actionTime: activity.timestamp,
                                    trueName: activity.user != null ? activity.user.name : $$.lt("remarkHistory.user.system"),
                                    userName: activity.user != null ? activity.user.id : "",
                                    activityType: activity.tags,
                                    remark: activity.description
                                });
                                break;
                            }
                        }
                    }
                }
            };

            //将所有办理历史分类
            var sortAllSteps = function () {
                for (var i = 0, len = allSteps.length; i < len; i++) {
                    var step = allSteps[i];
                    if (step.actionTime !== undefined) {
                        //不是管理员查看，且是撤回的步骤，就不在办理历史里显示了
                        if (!administrable && step.withdrawTo != null) {
                            continue;
                        }
                        insertStepToArray(doneSteps, step, true);
                    } else {
                        if (step.formStepId === thisStepId) {
                            //当前正在办理步骤
                            thisUndoStep = step;
                        } else {
                            insertStepToArray(undoSteps, step, false);
                        }
                    }
                }
            };

            //标记当前正在办理步骤的上一步已办(有批注或者备注的)
            var markPreviousDoneStep = function () {
                //表单不可执行或者是查看snapshot情况下都不需要看上一步已办的备注或批注
                if ($$.params.snapshot !== true && !this.readOnly) {
                    if (thisUndoStep !== undefined && thisUndoStep.prevStepId !== undefined) {
                        for (var i = doneSteps.length - 1; i >= 0; i--) {
                            var doneStep = doneSteps[i];
                            if (doneStep.formStepId === thisUndoStep.prevStepId) {
                                doneStep.isPreviousDone = true;
                                break;
                            }
                        }
                    }
                }
            };

            mergeActivities();
            sortAllSteps();
            markPreviousDoneStep();

            //当前状态是doing，那么把待办或草稿状态的步骤拼上
            if (this.progress.status === "doing") {
                var steps = doneSteps.concat(undoSteps);
                //当前步骤放到最后
                if (thisUndoStep !== undefined) {
                    steps.push(thisUndoStep);
                }
                return steps;
            } else {
                return doneSteps;
            }
        },

        //显示批注
        showReviews: function (step) {
            var count = 0;
            if (step.review == null) return count;
            var review;
            try {
                review = $.parseJSON(step.review);
            } catch (e) {
            }
            if (review != null && review['remarks'] != null && $IU.isArray(review['remarks'])) {
                var poppers = [];
                for (var i = 0, len = review['remarks'].length; i < len; i++) {
                    var formRemark = review['remarks'][i];
                    if (formRemark.remark == null || formRemark.remark === '') {
                        continue;
                    }
                    var $$control = $$("&" + formRemark.field).filter({ path: formRemark.path });
                    if ($$control.length > 0) {
                        var control = $$control[0].control;
                        //移动版，如果这个有批注的控件在一个收缩起来的view下面，那么就展开这个view
                        if ($$.MOBILE) {
                            var $viewOuterWrap = $(control.element).parents(".infoplus_view_wrap_outer");
                            if ($viewOuterWrap.hasClass("unexpanded")) {
                                var viewLabel = $viewOuterWrap.children(".infoplus_view_label").data("label");
                                if (viewLabel != null) {
                                    viewLabel.expand(false);
                                }
                            }
                        }
                        if ((control.controlContainer != null && $(control.controlContainer).is(":visible")) || $(control.element).is(":visible")) {
                            count++;
                            var popper = control.controlContainer || control.element;
                            poppers.push(popper);
                            createPopTip(popper, formRemark.remark);
                        }
                    }
                }

                for (i = 0, len = poppers.length; i < len; i++) {
                    createPopMenu(poppers, $(poppers[i]).data("popTip"));
                }


            }
            return count;
        },

        //小窗口提示显示上一步已办的备注和批注（表单上显示批注）
        showPreviousStepRemark: function (step) {
            var instance = this;
            var contentDiv = document.createElement("div"),
                $contentDiv = $(contentDiv),
                userDiv = document.createElement("div"),
                $userDiv = $(userDiv),
                remarkDiv = document.createElement("div"),
                $remarkDiv = $(remarkDiv),
                timeDiv = document.createElement("div"),
                $timeDiv = $(timeDiv);
            $userDiv.addClass("done_remark_user").text(step.trueName === HIDDEN_TEXT ? $$.lt("remarkHistory.user.related") : step.trueName);
            $remarkDiv.html($IU.htmlEncode(step.remark === HIDDEN_TEXT ? $$.lt("remarkHistory.hideRemark") : step.remark)).addClass("done_remark_content");
            $timeDiv.text($IU.unixTimeToString(step.actionTime)).addClass("done_remark_time");
            $contentDiv.append(userDiv).append(remarkDiv);
            if (step.review != null) {
                var remarkCount = this.showReviews(step);
                if (remarkCount > 0) {
                    var reviewDiv = document.createElement("div"),
                        $reviewDiv = $(reviewDiv),
                        reviewLink = document.createElement("a"),
                        $reviewLink = $(reviewLink);
                    $reviewLink.attr("href", "#").text($$.lt("remarkHistory.showReview", remarkCount, remarkCount > 1 ? "s" : ""));
                    $reviewDiv.append(reviewLink).addClass("done_remark_review");
                    $contentDiv.append(reviewDiv);

                    $reviewLink.click(function () {
                        InfoPlus.Render.PopTip.clear(true);
                        instance.showReviews(step);
                        var minTop = null;
                        $(".popTip.remarkTip").each(function () {
                            var tipControl = $(this).data("tipControl");
                            if (tipControl != null) {
                                var top = $(tipControl.options.popper).offset().top;
                                minTop = (minTop == null) ? top : (top < minTop ? top : minTop);
                            }
                        });
                        if (minTop != null) {
                            $IU.scrollTo(minTop > 100 ? minTop - 100 : 0, 500);
                        }

                        return false;
                    });
                }
            }
            $contentDiv.append(timeDiv);

            new InfoPlus.Tip({
                content: contentDiv,
                position: "right",
                width: "310"
            });
        },

        //创建办理历史显示列表
        createHistoryList: function (steps) {

            var instance = this;

            var addStepItemClass = function (item, step, isFirst, isLast) {
                var $item = $(item);
                $item.addClass("remark_item");
                switch (step.activityType) {
                    case 'INSTANCE_ADMIN':
                        //管理员管理数据
                        $item.addClass("remark_admin");
                        instance.showAdminButton = true;
                        break;
                    case 'INSTANCE_WITHDRAW':
                        //撤回
                        $item.addClass("remark_withdraw");
                        instance.showAdminButton = true;
                        break;
                    case 'INSTANCE_KILL':
                        //终止
                        $item.addClass("remark_kill");
                        if (isFirst) {
                            $item.addClass("firstStep");
                        } else {
                            instance.showAdminButton = true;
                        }
                        break;
                    default:
                        if (step.withdrawTo != null) {
                            $item.addClass("remark_withdrawn");
                            instance.showAdminButton = true;
                        } else {
                            $item.css("display", "block");
                        }
                        break;
                }
                if (isLast) {
                    $item.css("border-bottom", "none");
                }
            };

            var createHideHistoryStepDiv = function (hideHistoryCount, lastVisibleMore) {
                var div = document.createElement("div"),
                    innerDiv = document.createElement("div"),
                    span = document.createElement("span");

                $(innerDiv).css("height", "0px");
                $(span).addClass("moreHistory").html("<i class='i-icon-angle-double-down'></i> " + $$.lt("remarkHistory.showHide", hideHistoryCount)).attr("title", "点击展开历史");
                if (lastVisibleMore) {
                    $(div).addClass("lastMore");
                }
                $(div).click(function () {
                    $(this).hide();
                    $(this).nextAll().not(".remark_admin,.remark_withdraw,.remark_withdrawn,.remark_kill").filter("li:lt(" + $(this).data("hideHistoryCount") + ")").show('slide', { direction: 'up' }, 'slow', function () {
                        //for ie8 to adjust height of holder immediately
                        $$.params.holder.remark.css("height", "100%");
                    });
                    $(this).prev("li").css("border-bottom", "");
                });


                innerDiv.appendChild(span);
                div.appendChild(innerDiv);
                $(div).data("hideHistoryCount", hideHistoryCount);
                return div;
            };


            //找到historyStep之前最近的一个可见的step的li
            var findLastVisibleStep = function (historyStep, historyList) {
                var filterVisibleNormal = function () {
                    return $(this).css("display") !== 'none' &&
                        (!$(this).hasClass("remark_admin") && !$(this).hasClass("remark_withdraw")
                            && !$(this).hasClass("remark_withdrawn") && (!$(this).hasClass("remark_kill") || $(this).hasClass("firstStep")));
                };

                var filterVisible = function () {
                    return $(this).css("display") !== 'none';
                };

                if (historyStep != null) {
                    //prevAll取到的兄弟节点是按照离item近到远的次序来排序的
                    var $lastVisibleStep = $(historyStep).prevAll().filter(filterVisibleNormal);
                    if ($lastVisibleStep.length === 0) {
                        $lastVisibleStep = $(historyStep).prevAll().filter(filterVisible);
                    }
                    return $lastVisibleStep.first();
                } else {
                    return $(historyList).children("li").filter(filterVisibleNormal).last();
                }

            };

            var getSnapshotUrl = function (step) {
                return $$.params.baseUrl + "form/" + step.formStepId + "/render?snapshot=true";
            };

            var getSnapshotLink = function (step) {
                return "<a target='_blank' title='" + $$.lt("remarkHistory.snapshotTitle") + "' href='" + getSnapshotUrl(step) + "'>" + (step.stepName || '') + "</a>";
            };

            var getStepLink = function (stepName) {
                return "<a target='_blank' href='" + $$.params.baseUrl + "form/" + step.formStepId + "/render?entrust=true'>" + stepName + "</a>";
            };

            var getUserName = function (step, isCurrent, isSubWorkflow) {
                if (isSubWorkflow === true) {
                    return $$.lt("remarkHistory.user.related");
                }
                var getName = function () {
                    if (step.userVisibility === PUBLIC) {
                        return "<a class='relatedUser' stepId='" + step.formStepId + "'>" + $$.lt("remarkHistory.user.related") + "</a>";
                    } else {
                        return $$.lt("remarkHistory.user.related");
                    }
                };
                var userName = step.trueName || step.userName || "",
                    hideUser = (userName === HIDDEN_TEXT);
                if (hideUser) {
                    userName = $$.lt("remarkHistory.user.related");
                } else if (userName === "") {
                    if (!instance.readOnly) {
                        userName = isCurrent ? $$.lt("remarkHistory.user.you") : getName();
                    } else {
                        userName = getName();
                    }
                } else if (step.userName === instance.userId) {
                    userName = $$.lt("remarkHistory.user.you") + "(" + userName + ")";
                }
                // 如果是管理页需要显示调试或者委托信息
                // 如果当前用户是委托方或者被委托方(实际调试人或者被模拟调试人)那么就显示调试或委托信息
                if (($$.params.adminView === true || instance.userId === step.userName || instance.userId === step.entrusteeId) && step.entrusteeName != null) {
                    userName += "(" + (step.entrusted === true ? ($$.lt("remarkHistory.entrust") + (hideUser ? $$.lt("remarkHistory.user.related") : step.entrusteeName))
                        : (step.entrusteeName + $$.lt("remarkHistory.debug"))) + ")";
                }

                return userName;
            };

            var getStepName = function (step) {
                return step.actionTime != null ? getSnapshotLink(step) : ($$.params.entrust === "true" ? getStepLink(step.stepName || '') : (step.stepName || ''));
            };

            var getActionDescription = function (status, activityType, isSelf, isSubWorkflow) {
                var actionDescription;
                if (activityType == null) {
                    switch (status) {
                        case InfoPlus.Settings.STEP_STATE_TODO:
                        case InfoPlus.Settings.STEP_STATE_DRAFT:
                            actionDescription = isSelf ? $$.lt("remarkHistory.action.youDoing") : $$.lt("remarkHistory.action.doing");
                            break;
                        case InfoPlus.Settings.STEP_STATE_SUB:
                            actionDescription = $$.lt("remarkHistory.action.sub");
                            break;
                        default:
                            if (isSubWorkflow === true) {
                                actionDescription = $$.lt("remarkHistory.action.doneSub");
                            } else {
                                actionDescription = $$.lt("remarkHistory.action.done");
                            }
                    }
                } else {

                    switch (activityType) {
                        case "INSTANCE_ADMIN":
                            actionDescription = $$.lt("remarkHistory.action.admin");
                            break;
                        case "INSTANCE_KILL":
                            actionDescription = $$.lt("remarkHistory.action.kill");
                            break;
                        case "INSTANCE_WITHDRAW":
                            actionDescription = $$.lt("remarkHistory.action.withdraw");
                            break;
                        default:
                            actionDescription = $$.lt("remarkHistory.action.done2");
                    }
                }

                return actionDescription;
            };

            var getReviewCount = function (step) {
                var count = 0;
                if (step.review == null) return count;
                var review;
                try {
                    review = $.parseJSON(step.review);
                } catch (e) {
                }
                if (review != null && review['remarks'] != null && $IU.isArray(review['remarks'])) {
                    for (var i = 0, len = review['remarks'].length; i < len; i++) {
                        var formRemark = review['remarks'][i];
                        if (formRemark.remark == null || formRemark.remark === '') {
                            continue;
                        }
                        count++;
                    }
                }
                return count;
            };

            var createItemRemark = function (item, step) {
                var divContent = document.createElement("div");
                $(divContent).addClass("form_remark_content");
                if (step.activityType != null) {
                    $(divContent).addClass("activity");
                }
                var remarkContent = (step.remark === HIDDEN_TEXT ? $$.lt("remarkHistory.hideRemark") : (step.remark || ""));
                var remarkHtml = $IU.htmlEncode(remarkContent);
                $(divContent).html(remarkHtml);
                item.appendChild(divContent);
            };

            var createItemReviewOrCc = function (item, step) {
                var containerDiv = document.createElement("div"),
                    $containerDiv = $(containerDiv);
                $containerDiv.addClass("form_remark_review_cc");
                item.appendChild(containerDiv);

                if (hasReview) {
                    var reviewLink = document.createElement("a"),
                        count = getReviewCount(step);
                    $(reviewLink).attr("href", getSnapshotUrl(step))
                        .attr("target", "_blank")
                        .attr("title", $$.lt("remarkHistory.viewReviews"))
                        .text($$.lt("remarkHistory.viewReviewLink", count, count > 1 ? "s" : ""));
                    $containerDiv.append(reviewLink);
                }

                if (hasCc) {
                    var ccLink = document.createElement("a");
                    count = step.ccUsers.length;
                    $(ccLink).attr("href", "#").addClass("ccUser")
                        .data("stepId", step.formStepId)
                        .attr("title", $$.lt("remarkHistory.viewCcs"))
                        .text($$.lt("remarkHistory.viewCcLink", count))
                        .click(function () {
                            if (!$ccUserDiv.is(":visible")) {
                                $ccUserDiv.show("slide", { direction: "up" }, "slow");
                                $(this).text($$.lt("remarkHistory.searchCc")).append("<i class='i-icon-search'/>");
                            } else {
                                var link = this,
                                    stepId = $(this).data("stepId");

                                if (stepId != null) {
                                    var csrfToken = $(document).find("meta[itemscope=csrfToken]").attr("content");
                                    var requestData = "{reviewers(stepId:" + stepId + ",keyword:?){id,name,account,email}}";
                                    var candidates = new InfoPlus.Render.Candidates({
                                        popper: link,
                                        requestUrl: $$.params.graphqlUrl + "?csrfToken=" + csrfToken,
                                        requestData: requestData,
                                        dataEntityName: "reviewers"
                                    });
                                }
                            }

                            return false;
                        });
                    $containerDiv.append(ccLink);

                    var ccUserDiv = document.createElement("div"),
                        $ccUserDiv = $(ccUserDiv);
                    $ccUserDiv.addClass("form_remark_ccUser_div");
                    for (var i = 0, len = step.ccUsers.length; i < len; i++) {
                        var ccUser = step.ccUsers[i],
                            userSpan = document.createElement("span"),
                            $userSpan = $(userSpan);
                        $userSpan.text(ccUser.trueName).attr("title", ccUser.trueName + "(" + ccUser.tenantUserId + ")");
                        $ccUserDiv.append(userSpan);
                    }
                    $containerDiv.append(ccUserDiv);
                }
            };

            //隐藏办理历史，隐藏条件如下述,hideCount为外面带进来的变量，记录当前已经藏起来几个
            var hideItem = function (historyList, item, step, hasRemark, hasReview) {
                //显示上一个隐藏起来的办理历史
                var showPrevHideItem = function ($item) {
                    var $prevs = $item.prevAll();
                    for (var i = 0, len = $prevs.length; i < len; i++) {
                        if ($($prevs[i]).data("hide") === true) {
                            $($prevs[i]).show();
                            break;
                        }
                    }
                };

                var $item = $(item);
                //没有备注批注(且不是上一步已办，不是activity，不是被撤回的那个步骤)且不是第一个（第一个总是显示的），需要隐藏
                //activity和撤回的并不需要上来就显示，只是在css层面，它们本来就隐藏，就不需要人工隐藏了
                if (!hasRemark && !hasReview) {
                    if (!step.isPreviousDone && step.activityType == null && step.withdrawTo == null && !isFirst) {
                        $item.css("display", "none").data("hide", true);
                        hideCount++;
                    }
                }

                if (hideCount > 0) {
                    //本步骤不隐藏
                    if ((hasRemark || hasReview || step.isPreviousDone) && !(step.activityType === 'INSTANCE_ADMIN' || step.activityType === 'INSTANCE_WITHDRAW'
                        || step.activityType === 'INSTANCE_KILL' || step.withdrawTo != null)) {
                        if (hideCount !== 1) {
                            findLastVisibleStep(item, historyList).after(createHideHistoryStepDiv(hideCount, false));
                        } else {
                            //找上一个隐藏起来的显示
                            showPrevHideItem($item);
                        }
                        hideCount = 0;
                    } else {
                        //是最后一项
                        if (isLast) {
                            if (hideCount !== 1) {
                                findLastVisibleStep(item, historyList).after(createHideHistoryStepDiv(hideCount, true));
                            } else {
                                //最后一项且只有自己隐藏，那么就把最后一项显示
                                if ($item.data("hide") === true) {
                                    $item.show();
                                } else {
                                    //如果最后一项自己没隐藏，说明前面有隐藏的，显示上一个隐藏的历史
                                    showPrevHideItem($item);
                                }
                            }
                            hideCount = 0;
                        }
                    }
                }
            };

            //创建办理历史标题
            var createHistoryTitleDiv = function (item, step, isCurrent) {
                var divTitle = document.createElement("div");
                $(divTitle).addClass("form_remark_title");

                var isSubWorkflow = (step.sub !== undefined || step.subEntry !== undefined),
                    stepName = getStepName(step),
                    userName = getUserName(step, isCurrent, isSubWorkflow),
                    actionDescription = getActionDescription(step.status, step.activityType, isCurrent, isSubWorkflow);


                if (step.thing == null) {
                    if (step.activityType != null) {
                        divTitle.innerHTML = "<span class='color_b4'><b>" + userName + "</b>   " + actionDescription + "</span>";
                    } else {
                        var actionName = step.actionName != null ? "(<span class='color_b3'><b>" + step.actionName + "</b></span>)" : "";
                        divTitle.innerHTML = "<span class='color_b2' style='" +
                            (step.withdrawTo != null ? "text-decoration:line-through" : "") + "'><span class='" + (isCurrent ? "color_o1" : "") +
                            "'><b>" + userName + "</b></span>   " + actionDescription + "<b>" + stepName + "</b>" + actionName + "</span>";
                    }
                } else {
                    if (step.activitytype != null) {
                        divTitle.innerHTML = "<span class='color_b4'><b>" + userName + "</b>   " + actionDescription + "</span>";
                    } else {
                        stepName = step.stepName != null ? "(<span><b>" + stepName + "</b></span>)" : "";
                        if (step.actionName != null) {
                            divTitle.innerHTML = "<span class='color_b2' style='" +
                                (step.withdrawTo != null ? "text-decoration:line-through" : "") + "'><span class='" + (isCurrent ? "color_o1" : "") +
                                "'><b>" + userName + "</b></span>   <span class='color_b4' style='font-weight:bold'>" + step.actionName + "了</span> " + step.thing.thingName + " " + stepName + "</span>";
                        } else {
                            divTitle.innerHTML = "<span class='color_b2'><span class='" + (isCurrent ? "color_o1" : "") +
                                "'><b>" + userName + "</b></span>   <span class='color_b4' style='font-weight:bold'>" + $$.lt("remarkHistory.action.receiving") + "</span> " + step.thing.thingName + " " + stepName + "</span>";
                        }
                    }

                    var iconSpan = document.createElement("span");
                    var icon = document.createElement("i");
                    $(icon).addClass("i-icon-truck");
                    $(iconSpan).append(icon).css("margin-right", "6px").addClass("color_b4");
                    $(divTitle).addClass("thing").prepend(iconSpan);
                }

                if (!isCurrent) {
                    var dateFormat = "yyyy/MM/dd hh:mm";
                    var spanTime = document.createElement("span");
                    $(spanTime).addClass("form_remark_time");
                    if (step.assignTime != null) {
                        var dateAttachment = new Date(step.assignTime * 1000);
                        var divTimeTitle = $$.lt("remarkHistory.createTime") + ":" + $IU.dateFormat(dateAttachment, dateFormat);
                    } else {
                        divTimeTitle = "";
                    }

                    if (step.actionTime != null) {
                        var dateAction = new Date(step.actionTime * 1000);
                        divTimeTitle += ("  " + $$.lt("remarkHistory.actionTime") + ":" + $IU.dateFormat(dateAction, dateFormat));
                    } else {
                        $(spanTime).addClass("form_remark_todo");
                    }
                    var dateDisplay = null == step.actionTime ? step.assignTime : step.actionTime;
                    spanTime.innerHTML = $IU.dateFormat(new Date(dateDisplay * 1000), dateFormat);
                    spanTime.title = divTimeTitle;

                    var now = (new Date()).getTime();
                    if ((now - dateDisplay * 1000) < 1000 * 3600 * 12) {
                        $(spanTime).attr("datetime", $IU.getDateIsoString(new Date(dateDisplay * 1000)))
                            .addClass("remark_display_time")
                            .data("originDisplayTime", $IU.dateFormat(new Date(dateDisplay * 1000), dateFormat))
                            .click(function () {
                                this.innerHTML = $(this).data("originDisplayTime");
                            });
                    }


                    //待办且已经渲染过，显示已阅读
                    if (step.status === InfoPlus.Settings.STEP_STATE_TODO && step.renderTime != null) {
                        var readSpan = document.createElement("span");
                        $(readSpan).addClass("form_remark_read round-corner").text($$.lt("remarkHistory.read"));
                        var containerSpan = document.createElement("span");
                        $(containerSpan).append(spanTime).append(readSpan).css("float", "right");
                        divTitle.appendChild(containerSpan);
                    } else {
                        divTitle.appendChild(spanTime);
                    }
                }

                item.appendChild(divTitle);
                return divTitle;
            };

            //创建子流程办理历史标题
            var createSubEntryHistoryTitleDiv = function (historyListContainer, subEntryId) {
                if (subEntryId == null) {
                    return;
                }
                var titleDiv = document.createElement("div");
                $(titleDiv).text($$.lt("remarkHistory.subHistory.title", subEntryId)).addClass("sub_entry_title");
                historyListContainer.appendChild(titleDiv);
            };

            //创建子流程历史
            var createSubHistory = function (item, step) {
                if (step.sub === undefined && step.subEntry === undefined) {
                    return;
                }
                $(item).addClass("remark_item_sub");
                var subProgress = step.sub || { entry: step.subEntry };
                var divSubHistory = document.createElement("div");
                $(divSubHistory).addClass("form_remark_sub");
                item.appendChild(divSubHistory);
                if (subProgress.remarks != null && subProgress.remarks.length > 0) {
                    var subRemarkRender = new InfoPlus.RemarkRender({
                        //子流程流水号
                        subEntryId: subProgress.entry,
                        stepId: instance.stepId,
                        // instanceId貌似没用，这里先不传了，subProgress
                        // instanceId: subProgress.instanceId,
                        progress: subProgress,
                        userId: instance.userId,
                        readOnly: $$.params.readOnly,
                        administrable: $$.params.administrable
                    });
                    subRemarkRender.draw(divSubHistory);
                } else {
                    if (subProgress.entry == null) {
                        return;
                    }
                    var showSubLink = document.createElement("a");
                    $(showSubLink).attr("href", "#").addClass("show_sub_workflow")
                        .text($$.lt("remarkHistory.subHistory.link"))
                        .click(function () {
                            $$.loadHistory({
                                entryId: subProgress.entry,
                                stepId: -1,
                                includingTop: false
                            }).done(function (data) {
                                var progress = data.entities[0];
                                var subRemarkRender = new InfoPlus.RemarkRender({
                                    subEntryId: progress.entry,
                                    stepId: instance.stepId,
                                    progress: progress,
                                    userId: instance.userId,
                                    readOnly: $$.params.readOnly,
                                    administrable: $$.params.administrable,
                                    slide: true
                                });
                                subRemarkRender.draw(divSubHistory);
                            });
                            return false;
                        });
                    divSubHistory.appendChild(showSubLink);
                }
            };

            this.showAdminButton = false;    //是否显示"显示数据管理历史"链接
            var historyList = document.createElement("ul");
            createSubEntryHistoryTitleDiv(historyList, this.subEntryId);

            var hideCount = 0;
            for (var i = steps.length - 1; i >= 0; i--) {
                var step = steps[i],
                    isCurrent = this.readOnly ? false : (this.stepId === step.formStepId),
                    isLast = (i === 0),
                    isFirst = (i === steps.length - 1),
                    hasRemark = !$IU.isEmptyStr(step.remark),
                    //待办的步骤不在办理历史中显示已打上批注（自己当前这步或者别的正在办理的步骤已经保存的批注）
                    hasReview = (step.status !== InfoPlus.Settings.STEP_STATE_TODO) && (!$IU.isEmptyStr(step.review)),
                    hasCc = (step.ccUsers !== undefined && $IU.isArray(step.ccUsers) && step.ccUsers.length > 0);

                if ($$.params.snapshot === true && step.formStepId === $$.params.formStepId) {
                    this.currentSnapshotStep = step;
                }

                var item = document.createElement("li");
                addStepItemClass(item, step, isFirst, isLast);
                createHistoryTitleDiv(item, step, isCurrent);
                if (hasRemark) {
                    createItemRemark(item, step);
                }
                if (hasReview || hasCc) {
                    createItemReviewOrCc(item, step);
                }
                createSubHistory(item, step);
                historyList.appendChild(item);
                hideItem(historyList, item, step, hasRemark, hasReview);

            }


            findLastVisibleStep(null, historyList).css("border-bottom", "none");
            if ($$.params.adminView) {
                $(historyList).children(".remark_admin,.remark_withdraw,.remark_withdrawn,.remark_kill").addClass("show");
            }


            return historyList;
        },

        draw: function (holder) {
            var instance = this;

            var $remarkHolder = (holder == null ? $$.params.holder.remark : $(holder));
            if ($remarkHolder.length === 0 || this.progress == null) {
                return;
            }
            $remarkHolder.hide().empty();

            //创建显示管理历史链接
            var createAdminLink = function (historyList) {
                if (instance.showAdminButton && instance.administrable) {
                    var showAdminLi = document.createElement("li"),
                        showAdminLink = document.createElement("a"),
                        $showAdminLink = $(showAdminLink);
                    $showAdminLink.attr("href", "#");
                    if ($remarkHolder.find(".ccUser").length > 0) {
                        $showAdminLink.text($$.lt("remarkHistory.showAdminOrCc"));
                    } else {
                        $showAdminLink.text($$.lt("remarkHistory.showAdmin"));
                    }


                    $(showAdminLi).addClass("remark_show_admin").append(showAdminLink).css("border-bottom", "none");
                    historyList.appendChild(showAdminLi);
                    $(showAdminLink).click(function () {
                        var $showLiItems = $(this).parent().siblings(".remark_admin,.remark_withdraw,.remark_withdrawn,.remark_kill");
                        $showLiItems.addClass("show");
                        $(this).parent().hide();
                        $remarkHolder.children("ul").children("li").not(".remark_show_admin").not(":last").css("border-bottom", "");
                        $remarkHolder.find("ul li:visible:last").css("border-bottom", "none");
                        $IU.scrollTo($showLiItems.first().offset().top - 40, 500);
                        $(".ccUser").each(function () {
                            var $ccUserDiv = $(this).siblings(".form_remark_ccUser_div");
                            if (!$ccUserDiv.is(":visible")) {
                                $ccUserDiv.show("slide", { direction: "up" }, "slow");
                                $(this).text($$.lt("remarkHistory.searchCc")).append("<i class='i-icon-search'/>");
                            }
                        });
                        return false;
                    });
                }
            };

            //初始化显示时间的插件
            var initDisplayTime = function () {
                $("span.remark_display_time").timeago({
                    selector: 'span.remark_display_time'
                });
            };

            //如果上一步的已办有备注或者批注，就显示小窗口提示用户
            var showPreviousDoneStepHintWindow = function (steps) {
                if ($$.params.snapshot !== true && !instance.readOnly) {
                    for (var i = steps.length - 1; i >= 0; i--) {
                        if (steps[i].isPreviousDone) {
                            var prevStep = steps[i];
                            break;
                        }
                    }
                    if (prevStep != null && (!$IU.isEmptyStr(prevStep.remark) || !$IU.isEmptyStr(prevStep.review))) {
                        $$.visible(function () {
                            instance.showPreviousStepRemark(prevStep);
                        });
                    }
                }
            };

            //显示snapshot步的批注
            var showSnapshotStepReviews = function () {
                if ($$.params.snapshot === true && instance.currentSnapshotStep != null && instance.currentSnapshotStep.review != null) {
                    $$.visible(function () {
                        instance.showReviews(instance.currentSnapshotStep);
                    });
                }
            };

            //注册相关用户查询事件
            var registerRelatedUserEvents = function () {
                $(historyList).find(".relatedUser").click(function () {

                    var link = this,
                        stepId = $(this).attr("stepId");

                    if (stepId != null) {
                        var csrfToken = $(document).find("meta[itemscope=csrfToken]").attr("content");
                        var requestData = "{candidates(stepId:" + stepId + ",keyword:?){id,name,account,email}}";
                        var candidates = new InfoPlus.Render.Candidates({
                            popper: link,
                            requestUrl: $$.params.graphqlUrl + "?csrfToken=" + csrfToken,
                            requestData: requestData,
                            dataEntityName: "candidates"
                        });
                    }
                });
            };

            //显示办理历史
            var showHistory = function () {
                //有历史才显示
                if ($remarkHolder.children("ul").children().length > 0) {
                    //子流程的slide属性会设置成true,动画下拉显示
                    if (instance.slide === true) {
                        $remarkHolder.show("slide", { direction: "up" }, "slow");
                    } else {
                        $remarkHolder.show();
                    }
                }
            };


            var steps = this.sortSteps();
            var historyList = this.createHistoryList(steps);
            $remarkHolder.append(historyList);
            createAdminLink(historyList);
            initDisplayTime();
            showPreviousDoneStepHintWindow(steps);
            showSnapshotStepReviews();
            registerRelatedUserEvents();
            showHistory();
        }
    };

    //static methods
    //处理子流程
    remarkRender.processSubProgress = function (progress) {
        //从ancestorProgress寻找一个办理历史，这个办理历史的子流水号是subProgress的流水号，找不到说明树不完整
        var findRemark = function (ancestorProgress, subProgress) {
            var found = false;
            if (!$IU.isArray(ancestorProgress.remarks)) {
                return false;
            }
            for (var i = 0, len = ancestorProgress.remarks.length; i < len; i++) {
                var remark = ancestorProgress.remarks[i];
                if (remark.subEntry !== undefined) {
                    //寻找子流水号的同时组装子流程对象
                    if (remark.subEntry === subProgress.entry) {
                        remark.sub = subProgress;
                        found = true;
                    } else {
                        remark.sub = {
                            entry: remark.subEntry
                        };
                    }
                }

            }
            return found;
        };

        var ancestors = progress.ancestors;
        //progress上有父流程的流水号，说明当前是一个子流程
        if (progress.entryTop !== undefined && $IU.isArray(ancestors)) {
            //以下判断使用progress.ancestors是否能组装成一颗完整的树，有两种情况会使这棵树不完整
            //1) 子流程过深，目前只允许嵌套16层，超过16层的，只加载最接近请求{id}的16层和主流程
            //2) 子流程节点是可以设置对用户不可见，这样会造成ancestors树的不完整
            //目前这种情况下就不显示父流程的办理历史了，仍旧显示子流程的办理历史

            //ancestors第一个元素的entry和progress.entryTop相同，说明没发生情况1，嵌套层次过多造成断裂的问题
            if (ancestors.length > 0 && ancestors[0].entry === progress.entryTop) {
                var currentProgress = progress;
                //所有祖先遍历一次，看是否子流程都能接上
                for (var i = ancestors.length - 1; i >= 0; i--) {
                    var ancestorProgress = ancestors[i];
                    //如果没找到，说明是情况2，树不完整
                    if (!findRemark(ancestorProgress, currentProgress)) {
                        return;
                    }
                    currentProgress = ancestorProgress;
                }
                //树是完整的，返回最顶级的主流程progress
                return ancestors[0];
            }
        }
    };

    define("InfoPlus.RemarkRender", remarkRender);

})(window);

/**
 * Created by yech on 15/12/29.
 *
 */

(function (window, undefined) {
    var milestoneRender = function (config) {
        this.milestones = config.milestones;
        this.status = config.status;
        this.milestoneHolder = $("#form_milestone_holder")[0];
    };

    milestoneRender.prototype = {
        milestoneHolder: null,
        status: null,

        drawMilestone: function () {
            var $holder = $(this.milestoneHolder),
                $holderInner = $holder.find(".form_milestone_holder_wrap_inner"),
                $viewer = $holderInner.children(".form_milestone_view");

            if (this.milestones == null || this.milestones.length === 0) {
                $holder.remove();
                return
            }
            if (this.milestoneHolder == null) {
                return;
            }


            var workflowDone = (this.status === "done");

            var getColorClass = function (done, current) {
                var color = "gray";
                if (done === true || (current === true && workflowDone)) {
                    color = "green";
                } else {
                    if (current === true) {
                        color = "blue";
                    }
                }
                return color;
            };


            $holder.hide();
            $viewer.empty();

            var milestones = this.milestones;

            for (var i = 0, len = milestones.length, lastColor = ""; i < len; i++) {
                var milestone = milestones[i];
                var stepLi = document.createElement("li"),
                    $stepLi = $(stepLi);
                var color = getColorClass(milestone.done, milestone.current);
                $stepLi.addClass("form_milestone_step").addClass(color);
                if (i === 0) {
                    $stepLi.addClass("first");
                }
                if (i === (len - 1)) {
                    $stepLi.addClass("last");
                }

                //content
                var floater = document.createElement("div"),
                    $floater = $(floater);
                $floater.addClass("floater").addClass(color);

                var contentWrap = document.createElement("div"),
                    $contentWrap = $(contentWrap);
                $contentWrap.addClass("content");
                var content = document.createElement("div");
                $(content).text(milestone.name);
                $(content).addClass("content_name");
                $contentWrap.append(content);

                var tip = document.createElement("div");
                $(tip).addClass("milestone_tip").addClass("round-corner").addClass("z-depth-1");
                if (milestone.current === true && !workflowDone) {
                    $floater.addClass("singleLine");
                    $(tip).text($$.lt("milestone.doing")).addClass("singleLine");
                } else {
                    if (milestone.done === true || (milestone.current === true && workflowDone)) {
                        if (milestone.actionTime !== undefined) {
                            $floater.addClass("doubleLine");
                            var time = document.createElement("div");
                            $(time).attr("datetime", $IU.getDateIsoString($IU.unixTimeToLocalTime(milestone.actionTime))).addClass("content_time");
                            $contentWrap.append(time);
                            $(tip).text($$.lt("milestone.doAt", $IU.unixTimeToLocalTimeString(milestone.actionTime)));
                        } else {
                            $floater.addClass("singleLine");
                            $(tip).text($$.lt("milestone.done")).addClass("singleLine");
                        }
                    } else {
                        $floater.addClass("singleLine");
                        $(tip).text($$.lt("milestone.todo")).addClass("singleLine");
                    }
                }
                if (!$$.MOBILE) {
                    $contentWrap.append(tip);
                }


                if (i > 0) {
                    var arrowLi = document.createElement("li");
                    $(arrowLi).addClass("form_milestone_step_arrow_li").addClass(color);
                    var arrow = document.createElement("div");
                    $(arrow).addClass("form_milestone_step_arrow").addClass(lastColor);
                    var arrowWhite = document.createElement("div");
                    $(arrowWhite).addClass("form_milestone_step_arrow").addClass("white");
                    var arrowWrapDiv = document.createElement("div");
                    $(arrowWrapDiv).addClass("form_milestone_step_arrow_wrap").append(arrow).append(arrowWhite);
                    $(arrowLi).append(arrowWrapDiv);
                    $viewer.append(arrowLi);
                }
                $stepLi.append($floater).append($contentWrap);
                $viewer.append(stepLi);
                lastColor = color;
            }

            if ($$.visibility.milestone) {
                $holder.show();
            }


            $("div.content_time").timeago({
                selector: 'div.content_time'
            });


            if ($$.MOBILE) {
                $holderInner.find(".clear").css("height", "10px");
                $holder.addClass("round-corner");
            }
            var instance = this;

            if ($$.visibility.milestone) {
                //表单可见后再调整宽度（不可见情况下取分段宽度都是0）
                $$.visible(function () {
                    instance.adjustMilestoneWidth(true);
                    $holder.find(".form_milestone_step .milestone_tip").each(function () {
                        var $tip = $(this),
                            $parent = $tip.parent();
                        $tip.css("left", ($parent.outerWidth() - $tip.outerWidth()) / 2 + "px");
                    });
                });

                $holder.css("visibility", "visible");
            }

            //对于移动版，因为有些浏览器的重绘有问题，此处手动重绘
            /*
            if ($$.MOBILE) {
                $holder.hide();
                setTimeout(function () {
                    $holder.show();
                }, 100);
            }
            */

        },

        adjustMilestoneWidth: function (isInit) {
            if (!$$.visibility.milestone) return;
            var instance = this,
                $holder = $(this.milestoneHolder),
                $holderInner = $holder.find(".form_milestone_holder_wrap_inner"),
                $viewer = $holderInner.children(".form_milestone_view"),
                $holderOuter = $holder.find(".form_milestone_holder_wrap_outer"),
                formWidth = $("#form_holder").outerWidth(),
                clientWidth = $("#div_render_container").outerWidth(),
                $steps = $holderInner.find(".form_milestone_step");


            if ($holder.length === 0) {
                return;
            }

            if ($holder.data("originalTotalWidth") == null) {
                var stepWidth = [],
                    paddingArray = [],
                    totalBarWidth = 0;


                $steps.each(function () {
                    var $stepLi = $(this);
                    stepWidth.push($stepLi.width());
                    paddingArray.push(parseInt($stepLi.css("padding-left"), 10) + parseInt($stepLi.css("padding-right"), 10));
                    var outerWidth = $stepLi.outerWidth();
                    $stepLi.data("originalWidth", outerWidth);
                    totalBarWidth += outerWidth;
                });

                var $arrows = $holderInner.find(".form_milestone_step_arrow_li"),
                    arrowWidth = 0;
                $arrows.each(function () {
                    //移动版初始化时候宽度会没有，children宽度会有，所以这里||一下，桌面版没这个问题
                    arrowWidth += ($(this).outerWidth() || $(this).children().outerWidth());
                });

                totalBarWidth += arrowWidth;

                $holder.data("stepWidthArray", stepWidth);
                $holder.data("stepPaddingArray", paddingArray);
                $holder.data("originalTotalWidth", totalBarWidth);
                $holder.data("arrowTotalWidth", arrowWidth);
            } else {
                totalBarWidth = $holder.data("originalTotalWidth");
            }


            if (!$$.MOBILE) {
                if (isInit === true) {
                    if (totalBarWidth < formWidth) {
                        var adjustToWidth = formWidth;
                    } else {
                        if (totalBarWidth > clientWidth) {
                            adjustToWidth = formWidth > clientWidth ? formWidth : clientWidth - 5;
                        } else {
                            adjustToWidth = totalBarWidth;
                        }
                    }
                    if (adjustToWidth !== totalBarWidth) {
                        var newWidthArray = this.adjustWidth($holder, adjustToWidth);
                        for (var index = 0, l = $steps.length; index < l; index++) {
                            $($steps[index]).width(newWidthArray[index]);
                        }
                        $holderInner.width(adjustToWidth);
                    }
                } else {
                    if (totalBarWidth > formWidth) {
                        if (totalBarWidth > clientWidth) {
                            adjustToWidth = formWidth > clientWidth ? formWidth : clientWidth - 5;
                            newWidthArray = this.adjustWidth($holder, adjustToWidth);
                            for (index = 0, l = $steps.length; index < l; index++) {
                                $($steps[index]).width(newWidthArray[index]);
                            }
                            $holderInner.width(adjustToWidth);
                        } else {
                            for (index = 0, l = $steps.length; index < l; index++) {
                                $($steps[index]).css("width", "");
                            }
                            $holderInner.css("width", "");
                        }
                    }
                }
            } else {
                if (totalBarWidth <= clientWidth) {
                    //宽度小于屏幕宽度，拉大至屏幕宽度
                    adjustToWidth = clientWidth;
                    newWidthArray = this.adjustWidth($holder, adjustToWidth);
                    for (index = 0, l = $steps.length; index < l; index++) {
                        $($steps[index]).width(newWidthArray[index]);
                    }

                    $holderOuter.width(clientWidth);
                    $viewer.width(clientWidth);
                    $holder.width(clientWidth);
                } else {
                    $holderOuter.width(clientWidth);
                    //为了防止计算不精确，加上一保证不会变成两行
                    $viewer.width(totalBarWidth + 1);
                    $holder.css("width", "");
                    $steps.css("width", "");
                    //移动到显示第一个灰色节点
                    var foundGray = false,
                        scrollLeft = 0,
                        lastStepWidth = 0,
                        totalWidth = 0;
                    $steps.each(function () {
                        if (!foundGray && $(this).hasClass("gray")) {
                            scrollLeft = totalWidth - clientWidth / 2;
                            scrollLeft -= lastStepWidth / 2;
                            foundGray = true;
                        }
                        lastStepWidth = $(this).outerWidth();
                        totalWidth += lastStepWidth;
                        var $prev = $(this).prev();
                        if ($prev.hasClass("form_milestone_step_arrow_li")) {
                            totalWidth += $prev.outerWidth();
                        }
                    });

                    //移动到显示第一个灰色节点前的那个节点，以那个节点为中心
                    if (scrollLeft > 0) {
                        $holderInner.scrollLeft(scrollLeft);
                    } else {
                        $holderInner.scrollLeft(0);
                    }

                }
            }
        },


        //将进度条中的width数组按照total宽度调整，调整以平均分配剩余空间为标准，返回值是调整后的宽度数组
        adjustWidth: function ($holder, total) {
            var widths = $holder.data("stepWidthArray").slice(0),
                paddingArray = $holder.data("stepPaddingArray"),
                originalTotalWidth = $holder.data("originalTotalWidth"),
                adjustTotal = 0;

            adjustTotal += $holder.data("arrowTotalWidth");

            for (var i = 0, len = widths.length; i < len; i++) {
                var padding = paddingArray[i];
                widths[i] = Math.round((total - originalTotalWidth) / len + padding + widths[i]);
                adjustTotal += widths[i];
            }

            if (adjustTotal !== total) {
                var deltaAvg = Math.ceil((total - adjustTotal) / widths.length);
                for (i = 0, len = widths.length; i < len; i++) {
                    if (total === adjustTotal) {
                        break;
                    }
                    if ((deltaAvg > 0 && deltaAvg < (total - adjustTotal)) || (deltaAvg < 0 && deltaAvg > (total - adjustTotal))) {
                        widths[i] += deltaAvg;
                        adjustTotal += deltaAvg;
                    } else {
                        if (i === 0 && deltaAvg === 0) {
                            var minDelta = total > adjustTotal ? 1 : -1;
                            for (var index = 0, length = Math.abs(total - adjustTotal); index < length; index++) {
                                widths[index] += minDelta;
                            }
                            adjustTotal = total;
                        } else {
                            widths[i] += (total - adjustTotal);
                            adjustTotal = total;
                        }
                    }
                    if ((adjustTotal !== total) && i === (len - 1)) {
                        widths[i] += (total - adjustTotal);
                    }
                }
            }

            return widths;

        },

        //监听mouseenter,mouseleave事件
        //当浏览器窗口宽度小于总的进度条宽度，会对进度条每个步骤的宽度进行缩小，上面的关键步骤名称显示不下会显示...(text-overflow:ellipsis)
        //当鼠标移上去后将该步骤宽度放大到原来正常显示的宽度，从边上两个相邻步骤上借点宽度过来，鼠标移出去后恢复原来的宽度
        processEvent: function () {
            var instance = this;

            if (!$$.MOBILE) {
                var $steps = $(".form_milestone_step");
                $steps.mouseenter(function () {

                    var setWidth = function ($step, width) {
                        if (width > 0) {
                            $step.data("widthBeforeReduce", $step.outerWidth());
                            $step.width(width);
                        }
                    };

                    var $current = $(this),
                        $prev = $(this).prevAll(".form_milestone_step").first(),
                        $next = $(this).nextAll(".form_milestone_step").first(),
                        newWidth = $current.data("originalWidth") + 1;
                    var expandWidth = newWidth - $current.outerWidth();
                    if (expandWidth > 1) {
                        if ($prev.length > 0) {
                            if ($next.length > 0) {
                                var prevReduce = Math.ceil(expandWidth / 2),
                                    nextReduce = expandWidth - prevReduce,
                                    newPrevWidth = $prev.outerWidth() - prevReduce,
                                    newNextWidth = $next.outerWidth() - nextReduce;
                                setWidth($prev, newPrevWidth);
                                setWidth($next, newNextWidth);
                                setWidth($current, newWidth);
                            } else {
                                setWidth($prev, $prev.outerWidth() - expandWidth);
                                setWidth($current, newWidth);
                            }
                        } else {
                            if ($next.length > 0) {
                                setWidth($next, $next.outerWidth() - expandWidth);
                                setWidth($current, newWidth);
                            }
                        }
                    }

                });

                $steps.mouseleave(function () {
                    var setWidth = function ($step) {
                        if ($step.data("widthBeforeReduce") != null) {
                            $step.width($step.data("widthBeforeReduce"));
                            $step.data("widthBeforeReduce", null);
                        }
                    };

                    var $current = $(this),
                        $prev = $(this).prevAll(".form_milestone_step").first(),
                        $next = $(this).nextAll(".form_milestone_step").first();
                    setWidth($prev);
                    setWidth($next);
                    setWidth($current);
                });

            }

            $$.visible(function () {
                $(window).resize(function () {
                    instance.adjustMilestoneWidth(false);
                })
            });

        },

        draw: function () {
            this.drawMilestone();
            this.processEvent();

        }
    };

    define("InfoPlus.MilestoneRender", milestoneRender);


})
(window);
﻿/**
 * The InfoPlus Transformer is In Charge Of:
 *      Communicating with Servers & Coordinating with Renders & Interacting with Users
 *
 * @Author marstone
 * @Since 2010/12/14
 */

(function (window, undefined) {

    var transformer = function (config) {
        // Initialize
        this.initializeConfig(config);
    };

    transformer.ACTION_TYPE_SAVE = 0;
    transformer.ACTION_TYPE_OPERATE = 1;
    transformer.ACTION_TYPE_UPLOAD = 2;
    transformer.ACTION_TYPE_DELETE_ATTACHMENT = 3;
    transformer.ACTION_TYPE_LOAD = 4;
    transformer.INFOPLUS_SPLITER = "|INFOPLUS_SPLITER|";

    var HIDDEN_TEXT = "[Hidden]";
    var PUBLIC = "PUBLIC";

    var convertMobileView = function (view, isRepeat) {


        var divRender = {
            renderCategory: 'Layoutable',
            renderType: 'LayoutDivision',
            repeatable: false,
            renders: []
        };

        var tableRowRender = {
            renderCategory: "Layoutable",
            renderType: "LayoutTableRow",
            repeatable: false,
            renders: [{
                renderCategory: "Layoutable",
                renderType: "LayoutTableCell",
                repeatable: false,
                renders: []
            }]
        };

        var tableRender = {
            attributes: [{
                key: "class",
                value: "infoplus_auto_view_table"
            }, {
                key: "style",
                value: (isRepeat ? "width:100%" : "width:98%")
            }, {
                key: "cellspacing",
                value: "0"
            }],
            renderCategory: "Layoutable",
            renderType: "LayoutTable",
            repeatable: false,
            renders: []
        };


        //最外层的框架table
        var frameTable = $.extend(true, {}, tableRender);

        var findStyleAttributeIndex = function (attributes) {
            if (attributes == null || !$IU.isArray(attributes)) return -1;
            for (var i = 0, len = attributes.length; i < len; i++) {
                if (attributes[i]['key'] != null) {
                    if (attributes[i]['key'].toLowerCase() === 'style') {
                        return i;
                    }
                }
            }
            return -1;
        };

        var findSizeStyle = function (styles) {
            var result = {};
            for (var i = 0, len = styles.length; i < len; i++) {
                var styleArray = styles[i].split(":");
                if (styleArray.length > 1) {
                    var name = $IU.trimString(styleArray[0]).toLowerCase(),
                        value = $IU.trimString(styleArray[1]).toLowerCase();
                    if (name === "width" && $IU.endWith(value, "px")) {
                        result["width"] = parseInt(value);
                    }
                    if (name === "height" && $IU.endWith(value, "px")) {
                        result["height"] = parseInt(value);
                    }
                }

            }
            return result;
        };

        var isOneHundredPercentControl = function (type) {
            var types = ["BoundEdit", "BoundTextArea", "BoundRichText", "BoundDate", "BoundTime", "BoundCheckList", "BoundOptionList",
                "BoundSelect", "BoundAnchor", "BoundLabel", "BoundSuggester", "BoundSuggester2", "BoundFile",
                "BoundPassword", "BoundThing", "BoundIFrame"];
            for (var i = 0, len = types.length; i < len; i++) {
                if (types[i] === type) return true;
            }
            return false;
        };

        //将width的style改换成width:100%
        var replaceWidthStyle = function (styleAttribute) {
            var result = "";
            var styles = styleAttribute.split(";");
            for (var i = 0, len = styles.length; i < len; i++) {
                var style = styles[i].split(":");
                if (style.length === 2 && $IU.trimString(style[0].toLocaleLowerCase()) === "width") {
                    result += "width:100%;";
                } else {
                    result += styles[i] + ";";
                }
            }
            return result;
        };

        if (view.title != null) {
            var titleRowRender = $.extend(true, {}, tableRowRender),
                titleDivRender = $.extend(true, {}, divRender);
            titleDivRender.attributes = [{
                key: "class",
                value: "title_div"
            }];
            titleRowRender.renders[0].renders.push(titleDivRender);
            titleDivRender.renders.push({
                renderCategory: "Displayable",
                renderType: "DisplayText",
                text: view.title
            });
            frameTable.renders.push(titleRowRender);
        }

        var index = 0,
            len = view.entities.length,
            lastRowDivRender = null;
        while (index < len) {
            var entity = view.entities[index];
            if (entity.field != null) {
                //控件
                var controlRender = entity.render;
                //设宽度为100%
                if (isOneHundredPercentControl(controlRender.renderType)) {
                    if (controlRender.attributes == null) {
                        controlRender.attributes = [];
                    }
                    var styleAttributeIndex = findStyleAttributeIndex(controlRender.attributes);
                    if (styleAttributeIndex === -1) {
                        controlRender.attributes.push({
                            key: "style",
                            value: "width:100%"
                        });
                    } else {
                        var styleAttribute = controlRender.attributes[styleAttributeIndex];
                        //styleAttribute.value = styleAttribute.value + ";width:100%";
                        styleAttribute.value = replaceWidthStyle(styleAttribute.value);
                    }
                }

                //如果image或者picture设置的宽度大于目前屏幕宽度的98%再减去2个padding(3*2)的宽度
                if (controlRender.renderType === "BoundImage" || controlRender.renderType === "BoundPicture") {
                    styleAttributeIndex = findStyleAttributeIndex(controlRender.attributes);
                    if (styleAttributeIndex !== -1) {
                        styleAttribute = controlRender.attributes[styleAttributeIndex];
                        var styles = styleAttribute["value"].split(";"),
                            size = findSizeStyle(styles),
                            windowWidth = Math.floor($(window).width() * 0.98 - 6);
                        if (size["width"] != null && size["width"] > windowWidth) {
                            controlRender.attributes[styleAttributeIndex].value = controlRender.attributes[styleAttributeIndex].value + ";width:" + windowWidth + "px";
                            if (size["height"] != null) {
                                var newHeight = windowWidth / size["width"] * size["height"];
                                controlRender.attributes[styleAttributeIndex].value = controlRender.attributes[styleAttributeIndex].value + ";height:" + newHeight + "px";
                            }
                        }
                    }
                }


                if ((controlRender.renderType === "BoundCheck" || controlRender.renderType === "BoundOption") && lastRowDivRender != null) {
                    lastRowDivRender.renders.push(controlRender);
                    rowDivRender = lastRowDivRender;
                } else {
                    var rowRender = $.extend(true, {}, tableRowRender),
                        rowDivRender = $.extend(true, {}, divRender);
                    rowDivRender.attributes = [{
                        key: "class",
                        value: "row_div"
                    }];
                    rowRender.renders[0].renders.push(rowDivRender);

                    if (entity.field.label != null) {
                        rowDivRender.renders.push({
                            attributes: [{
                                key: "class",
                                value: "label_div"
                            }],
                            renderCategory: 'Layoutable',
                            renderType: 'LayoutDivision',
                            repeatable: false,
                            renders: [{
                                renderCategory: "Displayable",
                                renderType: "DisplayText",
                                text: entity.field.label
                            }]
                        });
                    }
                    rowDivRender.renders.push(controlRender);
                    frameTable.renders.push(rowRender);
                }


                if (controlRender.renderType === "BoundCheck" || controlRender.renderType === "BoundOption") {
                    if (controlRender.label != null) {
                        rowDivRender.renders.push({
                            renderCategory: "Displayable",
                            renderType: "DisplayText",
                            text: controlRender.label + " "
                        });
                    }
                    lastRowDivRender = rowDivRender;
                } else {
                    lastRowDivRender = null;
                }

                if (controlRender.renderType === "BoundHidden") {
                    rowRender.attributes = [{
                        key: "class",
                        value: "hidden_row"
                    }];
                }

                //本entity是个控件，下一个是helper控件或者hidden控件,就放到一起
                if (entity.field != null && (index + 1 < len) &&
                    view.entities[index + 1].field != null && (view.entities[index + 1].render.renderType === "BoundHelp"
                        || view.entities[index + 1].render.renderType === "BoundHidden")) {
                    var helperRender = view.entities[index + 1].render;
                    if (rowDivRender.renders.length > 1) {
                        //如果第一个是label，那么放到label之后
                        if (entity.field.label != null) {
                            rowDivRender.renders.splice(1, 0, helperRender);
                            if (rowDivRender.renders[0].attributes == null) {
                                rowDivRender.renders[0].attributes = [];
                            }
                            rowDivRender.renders[0].attributes.push({
                                key: "style",
                                value: "display:inline-block"
                            });
                        } else {
                            rowDivRender.renders.push(helperRender);
                        }
                    } else {
                        rowDivRender.renders.push(helperRender);
                    }

                    index++;
                }
            } else {
                lastRowDivRender = null;
                rowRender = $.extend(true, {}, tableRowRender);
                rowDivRender = $.extend(true, {}, divRender);

                if (entity.group.label != null && entity.group.label !== "") {
                    var repeatTitleDivRender = $.extend(true, {}, divRender, {
                        attributes: [{
                            key: "class",
                            value: "infoplus_repeat_title"
                        }]
                    });
                    repeatTitleDivRender.renders.push({
                        renderCategory: "Displayable",
                        renderType: "DisplayText",
                        text: entity.group.label
                    });
                    rowRender.renders[0].renders.push(repeatTitleDivRender);
                }

                if (entity.render.renderType === "LayoutTable") {
                    var outWrapDivRender = $.extend(true, {}, divRender, {
                        attributes: [{
                            key: "class",
                            value: "infoplus_auto_view_repeatTable_wrap_outer"
                        }]
                    });
                    var inWrapDivRender = $.extend(true, {}, divRender, {
                        attributes: [{
                            key: "class",
                            value: "infoplus_auto_view_repeatTable_wrap_inner"
                        }]
                    });

                    /*
                     var addRender = entity.render.renders[1];
                     addRender.renderType = "LayoutDivision";
                     entity.render.renders.length = 1;
                     */
                    inWrapDivRender.renders.push(entity.render);
                    outWrapDivRender.renders.push(inWrapDivRender);
                    rowDivRender.renders.push(outWrapDivRender);
                    //rowDivRender.renders.push(addRender);


                } else {
                    var repeatSectionRender = $.extend(true, {}, divRender, {
                            groupName: entity.group.name,
                            repeatable: true
                        }),
                        addButtonRender = $.extend(true, {}, divRender);
                    addButtonRender.renders.push({
                        renderCategory: "Displayable",
                        renderType: "DisplayText",
                        text: entity.render.addText || $$.lt("repeatAddLink.defaultText")
                    });

                    rowDivRender.attributes = [{
                        key: "class",
                        value: "row_div"
                    }];
                    rowRender.renders[0].attributes = [{
                        key: "style",
                        value: "padding:0"
                    }];
                    rowDivRender.renders.push(repeatSectionRender);
                    rowDivRender.renders.push(addButtonRender);
                    repeatSectionRender.renders.push(convertMobileView(entity, true));
                }
                rowRender.renders[0].renders.push(rowDivRender);
                frameTable.renders.push(rowRender);
            }


            index++;
        }


        return frameTable;
    };


    transformer.prototype = {

        render: null,

        loadDefault: function () {
            //将来可能只需要这一个container
            this.container = $("#div_render_container");

            //this.title_holder = $("#title_holder");
            this.command_bar = $("#form_command_bar");
            //this.form_holder = $("#form_holder");
            //this.title_content = $("#title_content");

            this.printable = false; //本step是否可以打印
            this.downloadable = true;//本步骤是否可下载数据
            this.withdrawable = false; //本步骤是否可撤回
            this.killable = false; //本步骤是否可以终止
            this.needSwitchMenu = false; //是否需要在resize时切换命令按钮或命令菜单
            this.printAfterAction = false; //是否在提交后可以选择打印
            this.boundFields = [];

        },

        initPropFromUrl: function () {
            var urlParam = $IU.getParamFromUrl(window.location.href);
            this.urlLang = urlParam.lang;
            this.back = urlParam.back;
            /* 取消判断，放到退回的时候判
            if ($IU.isPositiveInt(this.back)) {
                //如果是数字类型的back参数，如果数字大于等于history.length，说明是无效back参数，忽略
                if (parseInt(this.back, 10) >= window.history.length) {
                    this.back = undefined;
                }
            }
             */
            this.membership = urlParam.membership;
            this.showRemark = urlParam.showRemark;
            this.theme = urlParam.theme;
            this.snapshot = urlParam.snapshot;
            this.entrust = urlParam.entrust;
            this.mobileAutoView = urlParam.mobileAutoView;
            this.previewReadOnly = urlParam.previewReadOnly;
            this.entrance = urlParam.entrance;
            this.cc = (urlParam.cc != null) ? true : undefined;
            this.width = urlParam.width;
        },

        initializeConfig: function (config) {

            this.loadDefault();

            // clone all properties
            for (var prop in config) {
                if (config.hasOwnProperty(prop)) {
                    if (typeof (config[prop]) !== 'function') {
                        this[prop] = config[prop];
                    }
                }
            }

            this.initPropFromUrl();

        },

        refreshRemarks: function (isDoing) {
            if (!$$.visibility.remark) return;
            if ($$.params.holder.remark.length === 0) return;
            var instance = this;
            // 移动版下这个提示信息可能会和app主题的按钮位置冲突，就不显示这个提示了
            if (!$$.MOBILE) {
                $$.params.holder.remark.addClass("loading")
                    .block({
                        message: "<span class='loading'>" + $$.lt("remarkHistory.loading") + "</span>",
                        css: {
                            "margin": "0 auto",
                            "left": "0",
                            "right": "0",
                            "padding": "6px",
                            "border-radius": "5px",
                            "background-color": "#000000",
                            "opacity": "0.4",
                            "min-width": "300px",
                            "border": "none"
                        }
                    });
            }

            $$.loadHistory({
                includingTop: true
            }).done(function (data) {
                if (!$$.MOBILE) {
                    $$.params.holder.remark.removeClass("loading");
                }

                var entity = data.entities[0];

                instance.layout.remarkReady({
                    progress: entity,
                    userId: instance.userId,
                    isDoing: isDoing
                });

            });
        },

        redraw: function () {
            if (null == this.render) return false;
            this.render.draw();
            return false;
        },

        draw: function (formEntity) {
            $$.params.holder.form.hide();
            //this.form_holder.hide();

            this.render = new InfoPlus.FormRender({
                formStepId: this.formStepId,
                workflowId: this.workflowId,
                holderId: $$.params.holder.form.attr("id"),
                entity: formEntity,
                suggest: this.interface_suggest,
                suggestInitialize: this.interface_suggestInitialize,
                fieldChange: this.interface_fieldChange,
                buttonService: this.interface_buttonClick,
                tenantTimeZoneOffset: this.tenantTimeZoneOffset,
                thingService: this.interface_thing
            });


            $$.initCore({
                viewToken: this.viewToken,                                          //ajax时候传递一个viewToken供后台判断
                formRender: this.render,                                            //FormRender对象
                //userId: this.userId,
                userId: formEntity.userId,                                          //这个userId已经被后台处理过,不是委托模式就是当前登录人id,委托模式就是委托办理人的id
                timestamp: this.timestamp,                                          //最后处理时间
                tenantTimeZoneOffset: this.tenantTimeZoneOffset,                    //租户时区位移量(秒)
                tenantReadOnlyStyle: this.tenantReadOnlyStyle,                      //控件只读自动转换模式（None,Label,Underline）
                tenantDomain: this.tenantDomain,                                    //租户域名
                synthesizeEmail: this.synthesizeEmail,                              //是否拼接email
                formInstanceId: this.instanceId,                                    //流水号guid
                formEntryId: this.entryId,                                          //流水号数字
                formEntryIdTop: this.entryIdTop,                                    //流水号数字（主流程）
                formEntryIdDisplay: this.entryIdDisplay,                            //显示的流水号(父流水号/子流水号)
                formStepId: this.formStepId,                                        //步骤号数字
                workflowId: this.workflowId,                                        //工作流定义guid
                release: this.release,                                              //url参数上的release参数
                isRelease: this.entryRelease,                                       //是否是release发起
                doActionUrl: this.interface_do_action,                              //提交执行url
                boundFields: this.boundFields,                                      //表单字段数组
                instanceView: this.instanceView,
                adminView: this.adminView,                                          //是否在管理表单数据页中
                baseUrl: this.base_url,
                printAfterAction: this.printAfterAction && this.printable,          //办理后打印
                downloadAfterAction: this.printAfterAction && this.downloadable,    //办理后下载
                saveable: !(this.readOnly && (!this.adminView || this.withdrawable)),//是否可保存
                printable: this.printable,                                          //是否可打印
                downloadable: this.downloadable,                                    //是否可下载
                withdrawable: this.withdrawable,                                    //是否可撤回
                killable: this.killable,                                            //是否可终止
                administrable: this.administrable,                                  //是否可管理数据
                instructionUrl: this.instructionUrl,                                //填表帮助url
                printUrl: this.url_print,                                           //打印url
                supportUrl: this.url_support,                                       //帮助流程发起url
                entrustUrl: this.url_entrust,                                       //委托流程发起url
                adminViewUrl: this.url_admin_view,                                  //管理查看url
                adminUrl: this.url_admin,                                           //管理数据url
                downloadWordUrl: this.url_download_word,                            //导出word的url
                downloadPdfUrl: this.url_download_pdf,                              //导出pdf的url
                reLoginUrl: this.url_reLogin,                                       //重新登录的url
                membership: this.membership,                                        //第三方登陆id
                back: this.back,                                                    //第三方调用时候提供的返回地址
                showRemark: this.showRemark,                                        //是否显示办理历史和进度条
                theme: this.theme,                                                  //主题名称
                lang: this.lang,                                                    //语言
                urlLang: this.urlLang,                                              //url上带的语言参数，用于url跳转时候参数传递
                dynamicParallel: this.dynamicParallel,                              //动态并行信息
                printInvoice: ((this.interface_printInvoice || '') !== ''),         //是否打印小票
                instanceName: this.instanceName,                                    //实例名称
                instanceTags: this.instanceTags,                                    //标签
                receiveThing: this.receiveThing,                                    //是否是接收物品步骤
                entrust: this.entrust,                                              //是否是委托
                entrusts: this.entrusts,                                            //代办委托信息
                uriHistory: this.interface_list_remarks,                            //办理历史接口
                uriBarcode: this.interface_printInvoice,                            //条码显示api接口
                uriFilePreview: this.interface_filePreviewUrl,                      //文件预览的接口
                uriWordEdit: this.interface_wordEditUrl,                            //office365文件编辑接口
                uriSave: this.interface_save,                                       //保存接口
                uriUsers: this.interface_users,                                     //取用户接口
                uriEntrust: this.interface_entrust,                                 //委托接口
                uriCompare: this.interface_compare,                                 //比较历史数据接口
                uriCkUploadImage: this.interface_ckUploadImage,                     //ckeditor图片上传接口
                uriChangePriority: this.interface_changePriority,                   //改变优先级接口
                uriKill: this.interface_kill,                                       //终止接口
                uriWithdraw: this.interface_withdraw,                               //撤回接口
                uriListNextSteps: this.interface_list_next_steps,                   //列下一步审核者接口
                mobileAutoView: this.mobileAutoView,                                //是否用移动自动视图
                snapshot: (this.snapshot === "true"),                               //是否是快照
                readOnly: this.readOnly,                                            //是否不可执行
                exportReadOnly: this.exportReadOnly,                                //是否只读导出
                attachmentUrl: this.interface_attachment,                           //上传文件url
                attachmentTokenUrl: this.interface_attachmentToken,                 //请求文件下载token的url
                graphqlUrl: this.interface_graphql,                                 //graphql请求url
                copyright: this.copyright,                                          //版权信息
                cc: this.cc,                                                        //是否是抄送
                mapKey: this.mapKey,                                                //地图apikey
                defaultLocation: this.defaultLocation,                              //地图缺省中心点
                libs: {
                    ckeditor: this.lib_ckeditor                                     //ckeditor加载的地址
                }
            });

            this.layout = new InfoPlus.Render.Layout({
                formEntity: formEntity,
                formRender: this.render
            });
            $$.params.layout = this.layout;
            // 触发beforeRender事件
            $$.beforeRender();
            return this.render.draw();

        },

        //将groups的groupName按//分割放到数组里，便于以后使用
        processGroups: function (groups) {
            if (groups != null) {
                for (var key in groups) {
                    if (groups.hasOwnProperty(key)) {
                        var group = groups[key];
                        if (group['groupName'] != null) {
                            group['groupArray'] = group.groupName.split("//");
                        }
                    }
                }
            }
        },

        //将fields的groupName按//分割放到数组里，便于以后使用
        processFields: function (fields) {
            var boundFields = [];
            var dataObject = { fields: {} };
            if (fields != null) {
                for (var key in fields) {
                    if (fields.hasOwnProperty(key)) {
                        var field = fields[key];
                        if (field['groupName'] != null) {
                            field['groupArray'] = field.groupName.split("//");
                        }
                        if (field.bound === true && field.name !== undefined) {
                            boundFields.push(field.name);
                            if (field.groupArray != null) {
                                if (field.groupArray.length > 1) {
                                    var currentObject = dataObject;
                                    for (var i = 1; i < field.groupArray.length; i++) {
                                        var groupName = field.groupArray[i];
                                        if (currentObject.groups == null) {
                                            currentObject.groups = {};
                                        }
                                        if (currentObject.groups[groupName] == null) {
                                            currentObject.groups[groupName] = {
                                                fields: {}
                                            };
                                        }
                                        currentObject = currentObject.groups[groupName];
                                    }
                                    currentObject.fields[field.name] = field;
                                } else {
                                    dataObject.fields[field.name] = field;
                                }
                            }
                        }
                    }
                }
            }
            this.boundFields = boundFields;
            this.dataObject = dataObject;
        },

        //depth-first traverse
        traverse: function (layout) {
            var result = {
                renders: []
            };


            var stack = [];
            var current = layout;
            while (current != null) {
                //取控件
                if (current["renderCategory"] === "Boundable") {
                    result.renders.push(current);
                }
                //取重复节表
                if (current["repeatable"] === true) {
                    result.renders.push(current);
                }
                //以下为特殊逻辑
                //取标题，遇到的第一个LayoutHeader认为是标题
                if (result['title'] == null) {
                    if (current['renderCategory'] === "Layoutable" && current['renderType'] === "LayoutHeader") {
                        if (current['renders'] != null && current['renders'].length > 0) {
                            var titleRender = current['renders'][0];
                            if (titleRender['text'] != null) {
                                result['title'] = titleRender['text'];
                            }
                        }
                    }
                }
                //对于Check或者Option取相邻的文字放到其text属性中
                var renderList = current["renders"];
                if (renderList != null) {
                    for (var i = renderList.length - 1; i >= 0; i--) {
                        var render = renderList[i];
                        var cate = render["renderCategory"];
                        if (cate === "Boundable" && (render["renderType"] === "BoundCheck" || render["renderType"] === "BoundOption")) {
                            if ((i + 1) < renderList.length) {
                                var nextRender = renderList[i + 1];
                                if (nextRender["renderCategory"] === "Displayable" && nextRender["renderType"] === "DisplayText") {
                                    //将来这个label在渲染的时候特殊处理
                                    render["label"] = nextRender["text"];
                                }
                            }
                        }
                        if (cate === "Layoutable" && render["repeatable"] === true) {
                            if ((i + 1) < renderList.length) {
                                nextRender = renderList[i + 1];
                                if (nextRender.renders != null && nextRender.renders.length > 0) {
                                    var childRender = nextRender.renders[0];
                                    if (childRender["renderCategory"] === "Displayable" && childRender["renderType"] === "DisplayText") {
                                        //将来这个addText在渲染的时候特殊处理
                                        render["addText"] = childRender["text"];
                                    }
                                }
                            }
                        }
                        if (cate === "Layoutable" || cate === "Boundable") stack.push(render);
                    }
                }
                current = stack.pop();
            }
            return result;
        },

        getRenderWidth: function () {
            if (this.width == null || this.width === '') {
                return $IU.getWindowWidth();
            } else {
                var width = parseInt(this.width, 10);
                if (isNaN(width)) {
                    return $IU.getWindowWidth();
                } else {
                    return width;
                }
            }
        },

        preview: function (config) {
            var deferred = $.Deferred();


            var loadError = function (errorMessage, detailMessage, errorCode, showErrorTip) {
                loadFormError();
                $IU.errorMessageBox(errorMessage, detailMessage, $$.lt("preview.loadError"), null, errorCode, showErrorTip, true);
            };


            var processPreviewPermission = function (formEntity) {
                var fields = formEntity.fields;
                for (var key in fields) {
                    if (fields.hasOwnProperty(key)) {
                        var field = fields[key];
                        field.permission = "rw";
                    }
                }
                var groups = formEntity.groups;
                for (key in groups) {
                    if (groups.hasOwnProperty(key)) {
                        var group = groups[key];
                        group.permission = "r";
                    }
                }
            };

            progress($$.lt("load.workflowInfo"), 20, 60, 5000);

            if (this.workflowId == null) {
                loadError($$.lt("error.parameter"), null, null, true);
                return deferred.reject();
            }

            var instance = this;
            $$.ajax({
                type: "POST",
                url: this.interface_preview,
                data: {
                    workflowId: this.workflowId,
                    rand: Math.random() * 999,
                    width: this.getRenderWidth()
                },
                requestMsg: $$.lt("load.loadWorkflow"),
                beforeShowErrorMsg: function () {
                    $.unblockUI();
                },
                showParseErrMsg: false
            }).fail(function (error) {
                var errorMessage = error.msg,
                    detailMessage = null;
                if (errorMessage == null) {
                    errorMessage = $$.lt("error.unknown");
                }
                var messageArray = errorMessage.split("|INFOPLUS_SPLITER|");

                if (messageArray.length > 1) {
                    errorMessage = messageArray[0];
                    detailMessage = messageArray[1];
                }

                loadError(errorMessage, detailMessage, null, error.errno < 0);

            }).done(function (data) {
                progress($$.lt("load.loading"), 60, 80, 1000);
                var formEntity = data["entities"][0];

                instance.processFields(formEntity.fields);
                instance.processGroups(formEntity.groups);

                if (instance.previewReadOnly === 'true') {
                    instance.removePagePermission(formEntity);
                }

                //processPreviewPermission(formEntity);
                var permission = formEntity.permission;
                config.startable = (permission.startable === true) && (config.clear !== true);
                instance.release = config.release;
                instance.draw(formEntity).done(function () {
                    var introduce = new InfoPlus.Preview.Introduce({
                            hide: (config.clear === true),
                            app: config.app
                        }),
                        start = new InfoPlus.Preview.Start({
                            startable: config.startable,
                            onClick: function () {
                                if (!config.startable) {
                                    return false;
                                }
                                if ($IU.doValidate(false, true) === false) {
                                    return false;
                                }

                                if ($$.PREVIEW_APP_URI !== undefined) {
                                    document.body.onbeforeunload = null;
                                    window.location.href = $$.PREVIEW_APP_URI;
                                    return false;
                                }

                                var data = {};
                                data = instance.render.save(data, false);
                                var jsonData = $.toJSON(data);

                                $$.blockUI({
                                    message: "<span class='loading'>" + $$.lt("preview.starting") + "</span>",
                                    css: {
                                        width: $$.MOBILE ? '80%' : '45%',
                                        left: $$.MOBILE ? '10%' : '28%'
                                    }
                                });
                                $$.ajax({
                                    type: "POST",
                                    url: instance.interface_start,
                                    data: {
                                        idc: config.idc,
                                        release: config.release,
                                        csrfToken: $(document).find("meta[itemscope=csrfToken]").attr("content"),
                                        formData: jsonData,
                                        entrance: instance.entrance
                                    },
                                    requestMsg: $$.lt("preview.start"),
                                    errorTitle: $$.lt("preview.refused"),
                                    beforeShowErrorMsg: function () {
                                        $.unblockUI();
                                    }
                                }).done(function (data) {
                                    var href = data.entities[0];
                                    document.body.onbeforeunload = null;
                                    window.location.href = $IU.processUrl(href);
                                });
                            }
                        }),
                        previewLayout = new InfoPlus.Preview.Layout({
                            views: instance.render.views,
                            introduce: introduce,
                            start: start
                        });
                    //instance.createEntrustHelper();
                    instance.layout.createEntrustHelper();

                    instance.layout.showForm();
                    //instance.form_holder.show();

                    deferred.resolve();
                });
            });

            return deferred.promise();
        },

        convertMobileView: function (view) {

            return {
                id: view.id,
                index: view.index,
                name: view.name,
                mobile: true,
                renderCategory: 'Layoutable',
                renderType: 'FormView',
                repeatable: false,
                styleSheetUri: view.styleSheetUri,
                attributes: [{
                    key: "class",
                    value: "infoplus_auto_view"
                }],
                renders: [{
                    attributes: [{
                        key: "align",
                        value: "center"
                    }],
                    display: "Inline",
                    renderCategory: "Layoutable",
                    renderType: "LayoutDivision",
                    repeatable: false,
                    renders: [convertMobileView(view, false)]
                }]
            };

        },

        getViewEntity: function (view, fields, groups) {

            var findEntity = function (parentEntityArray, name, type) {
                //倒过来找是为了如果有MasterDetail，那么会将该字段放入detail的重复节中，master中的字段添加时候detail的重复节尚未添加，所以会添加到master的重复表中
                for (var i = parentEntityArray.length - 1; i >= 0; i--) {
                    var entity = parentEntityArray[i];
                    if (entity.type === type && entity.name === name) {
                        return entity;
                    }
                }
                return null;
            };

            var addField = function (parentEntityArray, field, render) {
                if (findEntity(parentEntityArray, field.name, 'field') == null || render['renderType'] === 'BoundOption') {
                    parentEntityArray.push({
                        name: field.name,
                        type: 'field',
                        render: render,
                        field: field
                    });
                }
            };

            var addGroup = function (parentEntityArray, group, render) {
                //第二个判断条件用于MasterDetail,对于detail的重复节也需要增加一个group的entity
                if (findEntity(parentEntityArray, group.name, 'group') == null || render.renderType !== "LayoutTable") {
                    parentEntityArray.push({
                        name: group.name,
                        type: 'group',
                        render: render,
                        group: group,
                        entities: []
                    });
                }
            };

            var viewObj = this.traverse(view),
                renders = viewObj.renders;

            var viewRoot = {
                id: view.id,
                index: view.index,
                name: view.name,
                type: 'rootView',
                title: viewObj['title'],
                styleSheetUri: view.styleSheetUri,
                entities: []
            };

            for (var n = 0; n < renders.length; n++) {
                var render = renders[n];
                if (render['renderCategory'] === "Layoutable") {
                    var group = groups[render.groupName];
                    if (group != null) {
                        var currentParent = viewRoot;
                        var groupNames = group.groupArray;
                        if (groupNames != null && groupNames.length > 2) {
                            for (var index = 1; index < groupNames.length - 1; index++) {
                                var groupEntity = findEntity(currentParent.entities, groupNames[index], 'group');
                                if (groupEntity != null) {
                                    currentParent = groupEntity;
                                } else {
                                    hasError = true;
                                    $IU.debugTip('重复节表' + group.name + '有问题，请检查', 'warning');
                                    break;
                                }
                            }
                            if (!hasError) {
                                addGroup(currentParent.entities, group, render);
                            }
                        } else {
                            addGroup(viewRoot.entities, group, render);
                        }
                    }
                } else {
                    var field = fields[render.field];
                    if (field != null) {
                        currentParent = viewRoot;
                        groupNames = field.groupArray;
                        if (groupNames != null && groupNames.length > 1) {
                            var hasError = false;
                            for (index = 1; index < groupNames.length; index++) {
                                groupEntity = findEntity(currentParent.entities, groupNames[index], 'group');
                                if (groupEntity != null) {
                                    currentParent = groupEntity;
                                } else {
                                    hasError = true;
                                    $IU.debugTip('字段' + field.name + '有问题，请检查', 'warning');
                                    break;
                                }
                            }
                            if (!hasError) {
                                addField(currentParent.entities, field, render);
                            }
                        } else {
                            addField(viewRoot.entities, field, render);
                        }
                    }
                }
            }

            return viewRoot;
        },

        //初始化参数
        initParameter: function (formEntity, step) {
            var processSplitPath = function (path) {
                if (path == null) return [];
                var pathArray = path.split("/");
                pathArray.splice(0, 1);
                return pathArray;
            };
            //从服务器端取得instanceId、stepId、timestamp
            this.instanceId = step.instanceId;
            this.entryId = step.entryId;
            this.entryIdTop = step.entryIdTop;
            this.entryIdDisplay = step.entryIdDisplay;
            this.entryRelease = step.entryRelease;
            this.formStepId = step.flowStepId;
            this.timestamp = step.timestamp;
            this.printAfterAction = step.printAfterAction;
            this.exportReadOnly = step.exportReadOnly;
            this.dynamicParallel = {
                splitPath: processSplitPath(step.splitPath),
                splitPathGroup: processSplitPath(step.splitPathGroup)
            };
            this.instanceName = step.instanceName;
            this.instanceTags = step.instanceTags;
            this.receiveThing = (step.thing != null);

            //readOnly应该由服务器传递
            this.readOnly = !formEntity.permission.executable;
            //本步骤是否可以打印
            this.printable = formEntity.permission.printable;
            //本步骤是否可下载数据
            this.downloadable = formEntity.permission.exportable;
            //for test
            //instance.printable = false;
            //instance.downloadable = true;
            //本步骤是否可撤回
            this.withdrawable = formEntity.permission.withdrawable;
            this.killable = formEntity.permission.killable;
            //可管理数据
            this.administrable = this.instanceView === true && formEntity.permission.administrable === true;

            //this.buttonPrefix = "infoplus_action_" + Math.round(Math.random() * 9000 + 1000) + "_";

            this.instructionUrl = null;
            if (formEntity.previewId != null && formEntity.step.definitionId != null) {
                this.instructionUrl = this.base_url + "form/" + formEntity.step.definitionId + "/start?clear=true&previewReadOnly=true&preview=true&release=" + step.entryRelease;
                if (this.theme != null) {
                    this.instructionUrl = this.instructionUrl + "&theme=" + this.theme;
                }
            }
        },

        //预处理表单数据(Fields && Groups)
        preprocessFormEntity: function (formEntity) {
            this.processFields(formEntity.fields);
            this.processGroups(formEntity.groups);
        },

        //转换移动自动视图
        processMobileAutoView: function (formEntity) {
            if (!$$.MOBILE) return;
            for (var i = 0, len = formEntity.views.length; i < len; i++) {
                //view上面有mobileView这个标记或者有全局的mobileAutoView(目前这个主要是调试用)标记，就自动转换移动视图
                if (this.mobileAutoView === true || formEntity.views[i].mobileView === true) {
                    var view = this.getViewEntity(formEntity.views[i], formEntity.fields, formEntity.groups);
                    formEntity.views[i] = this.convertMobileView(view);
                }
            }
        },

        /*mockSnapshots: function (formEntity) {
            if (formEntity.snapshots) {
                formEntity.snapshots = formEntity.snapshots || [];
                var fakeData = {}, fakeData2 = {};
                $.extend(true, fakeData, formEntity.data);
                $.extend(true, fakeData2, formEntity.data);
                fakeData['fieldEdit'] = 'abc';
                formEntity.snapshots.push({
                    name: '初始数据',
                    compare: true,
                    data: fakeData
                });
                formEntity.snapshots.push({
                    name: '初始数据2',
                    compare: true,
                    data: fakeData2
                });
                formEntity.snapshots.push({
                    name: '初始数据3',
                    compare: true,
                    data: fakeData
                });
            }

        },*/

        processSnapshots: function (formEntity) {
            // this.mockSnapshots(formEntity);
            var snapshots = formEntity.snapshots;
            if ($IU.isArray(snapshots) && snapshots.length > 0) {
                $$.params.sameStepHistoryList = [];
                for (var i = 0, len = snapshots.length, initCompared = false; i < len; i++) {
                    $$.params.sameStepHistoryList.push({
                        name: snapshots[i].name,
                        data: snapshots[i].data
                    });
                    // 如果compare属性为true，表示表单load完就要比较，初始化比较第一个compare为true的
                    // 这里setTimeout是因为需要等待别的注册在visible事件上的做完再执行比较
                    if (snapshots[i].compare === true && initCompared === false) {
                        initCompared = true;
                        var compare = function (index) {
                            return function () {
                                $IU.compareInitData(index);
                            };
                        }(i);
                        $$.visible(function () {
                            setTimeout(compare, 1000);
                        });
                    }
                }
            }
        },

        //在打印页将所有字段和重复节表设置为只读，并且去除所有字段fieldChange事件
        removePrintPagePermission: function (formEntity) {
            if ($$.PRINT) {
                this.removePagePermission(formEntity);
            }
        },

        //将所有字段和重复节表设置为只读，并且去除所有字段fieldChange事件
        removePagePermission: function (formEntity) {
            var fields = formEntity.fields;
            for (var key in fields) {
                if (fields.hasOwnProperty(key)) {
                    var field = fields[key];
                    if (field.permission !== undefined) {
                        if (field.permission.indexOf("r") !== -1) {
                            field.permission = "r";
                        } else {
                            field.permission = "";
                        }
                    }
                    if (field.fieldChanging !== undefined) {
                        field.fieldChanging = false;
                    }
                    if (field.fieldChangeMappingList !== undefined) {
                        field.fieldChangeMappingList = null;
                    }
                }
            }
            var groups = formEntity.groups;
            for (key in groups) {
                if (groups.hasOwnProperty(key)) {
                    var group = groups[key];
                    if (group.permission !== undefined) {
                        if (group.permission.indexOf("r") !== -1) {
                            group.permission = "r";
                        } else {
                            group.permission = "";
                        }
                    }
                }
            }
        },

        load: function () {

            var instance = this;
            //transformer.load()的时候可能引起浏览器出现滚动条，以至于改变renderContent_holder这个div的宽度，使得设置命令工具条宽度错误
            //所以设立一个定时器，检查renderContent_holder宽度的变化，改变后就可取消该定时器
            var originRenderHolderWidth = $("#renderContent_holder").width();
            var intervalFlag = setInterval(function () {
                if (instance.layout != null) {
                    if (originRenderHolderWidth !== $("#renderContent_holder").width()) {
                        instance.layout.onResize(true);
                        //instance.layout.switchCommandButtonOrMenu(true);
                        //instance.layout.switchTitleWidth();
                        clearInterval(intervalFlag);
                    }
                }
            }, 30);

            var loadError = function (errorMessage, detailMessage, errorCode, showErrorTip) {
                if (window['loadFormError'] !== undefined && (typeof window['loadFormError'] === 'function')) {
                    loadFormError();
                }
                $IU.errorMessageBox(errorMessage, detailMessage, ($$.PRINT ? $$.lt("print.fail") : $$.lt("load.fail")), null, errorCode, showErrorTip, true);
            };

            var isDoing = function (step) {
                return (step.entryStatus !== InfoPlus.Settings.INSTANCE_STATE_COMPLETE &&
                    step.entryStatus !== InfoPlus.Settings.INSTANCE_STATE_TERMINATED &&
                    step.entryStatus !== InfoPlus.Settings.INSTANCE_STATE_OFFLINE && step.status === 2);
            };


            progress($$.lt("load.loadPage"), 20, 60, 5000);


            if (this.formStepId < 0 && this.instanceId == null) {
                loadError($$.lt("load.paramError"), null, null, true);
                return $.Deferred().reject();
            }

            var url = !$$.PRINT ? this.interface_render : this.interface_print,
                deferred = $.Deferred(),
                data = {
                    stepId: this.formStepId == null ? -1 : this.formStepId,
                    instanceId: this.instanceId,
                    admin: this.adminView,
                    rand: Math.random() * 999,
                    width: this.getRenderWidth(),
                    lang: this.lang
                };
            if (this.cc === true) {
                data['markAsRead'] = true;
            }

            if (this.snapshot === 'true') {
                data['snapshot'] = true;
            }

            $$.ajax({
                type: "POST",
                url: url,
                data: data,
                requestMsg: $$.lt("load.loadForm"),
                beforeShowErrorMsg: function () {
                    $.unblockUI();
                },
                showParseErrMsg: false
            }).fail(function (error) {
                //会签特殊处理,如果是15008说明要跳转
                if (error.errCode === 'STEP_PARALLEL') {
                    window.location.href = $IU.processUrl(error.data.entities[0]['step']['renderUri']);
                    deferred.reject();
                    return;
                }
                //如果是处于委托模式下，发生了没有权限的错误，那么弹出换委托人（或退出委托）的框
                if (error.errCode === 'ACCESS_DENIED' && (instance.entrusts != null && instance.entrusts.entruster != null)) {
                    $IU.chooseEntrust(instance.entrusts, error, ($$.PREVIEW ? startPreview : startLoad), instance.interface_entrust);
                    return;
                }

                var errorMessage = error.msg,
                    detailMessage = null;
                if (errorMessage == null) {
                    errorMessage = $$.lt("load.unknownError");
                }
                var oldSpliter = "|INFOPLUS_SPLITER|",
                    newSpliter = "\n\n";
                var pos = errorMessage.indexOf(oldSpliter);
                if (pos !== -1) {
                    detailMessage = errorMessage.substr(pos + oldSpliter.length);
                    errorMessage = errorMessage.substring(0, pos);
                } else {
                    pos = errorMessage.indexOf(newSpliter);
                    if (pos !== -1) {
                        detailMessage = errorMessage.substr(pos + newSpliter.length);
                        errorMessage = errorMessage.substring(0, pos);
                    }
                }

                loadError(errorMessage, detailMessage, error.errCode, error.errno < 0);

            }).done(function (data) {

                progress($$.lt("load.loadPage"), 60, 80, 1000);

                var formEntity = data["entities"][0],
                    step = formEntity.step;
                //显示流水号 (有父流程的显示父流水号+父子流水号差值)
                step.entryIdDisplay = step.entryId;
                if(step.entryIdTop != null && step.entryIdTop != step.entryId) {
                    var entryIdDiff = step.entryId - step.entryIdTop;
                    step.entryIdDisplay = step.entryIdTop + (entryIdDiff > 0 ? "+" : "-") + Math.abs(entryIdDiff); 
                }

                instance.preprocessFormEntity(formEntity);
                instance.processMobileAutoView(formEntity);
                instance.initParameter(formEntity, step);
                instance.removePrintPagePermission(formEntity);
                instance.processSnapshots(formEntity);

                instance.draw(formEntity).done(function () {
                    $IU.initValidationEngine();

                    if (!$$.PRINT) {
                        instance.layout.render(formEntity, step);
                    }

                    instance.layout.adjustRender();
                    instance.layout.showForm();

                    if ($$.visibility.remark) {
                        instance.refreshRemarks(isDoing(step));
                    }
                    deferred.resolve();

                }).always(function () {
                    $$.params.initializing = false;
                });


            }).always(function () {
                //$.unblockUI();
            });


            return deferred.promise();
        },

        registerGlobalEvents: function () {
            var instance = this;

            $$.visible(function () {

                //resize事件在visible后再注册，因为发现ie9下会先于visible触发resize，造成先去checkViewVisibility了一次，此时
                //所有view高度都为0，就都隐藏了，然后真的visible触发时候再checkViewVisibility就不对了，这只在ie9下发生，为了解决这个问题
                //就再visible事件里最后再注册window的resize事件
                $(window).resize(function () {
                    $IU.adjustRenderWidth();
                    //resize时候更新气泡不用动画
                    $IU.updateFormTipsAndViews(false);
                });

                if ($$.MOBILE) {
                    $$.resize($(window).width());
                }

            });


            /*以下处理拖放文件到渲染页面时，显示可drop区域*/
            var lastEnter = null;
            $(window).on("dragenter", function (e) {
                lastEnter = e.target;
                $(document.body).addClass("dragging-over");
            });
            $(window).on("dragleave", function (e) {
                if (lastEnter === e.target) {
                    $(document.body).removeClass("dragging-over");
                    e.stopPropagation();
                    e.preventDefault();
                }
            });
            $(window).on("drop", function (e) {
                $(document.body).removeClass("dragging-over");
            });


            //对于需要安全下载的文件控件屏蔽鼠标右键
            $(document).bind("contextmenu", function (e) {
                var source = e.srcElement || e.target;
                if ($(source).parent().hasClass("infoplus_fileControl_link")) {
                    var fileControl = $(source).parents(".infoplus_fileControl").data(InfoPlus.Controls.Control.DATA_CONTROL_OBJECT);
                    if (fileControl != null) {
                        var field = fileControl.field;
                        if (field != null && field.settings != null && field.settings["fileSecure"] === true) {
                            return false;
                        }
                    }
                }
                return true;
            });

            //如果有返回链接(微信中),按了手机的返回按钮后退回到返回链接地址
            if (!$IU.isEmptyStr($$.params.back)) {
                //非数字模式，back里面带着返回的url
                if (!$IU.isPositiveInt($$.params.back)) {
                    window.history.pushState({
                        title: "title",
                        url: "#"
                    }, "title", "#");
                    window.addEventListener("popstate", function (e) {
                        window.location.href = $$.params.back;
                    });
                } else {
                    //数字模式不用这里处理
                }
            }

            var weixinJSBridgeReady = function () {
                $$.MINIPROGRAM = (navigator.userAgent.match(/miniprogram/i) || window.__wxjs_environment === 'miniprogram');
                if ($$.MINIPROGRAM) {
                    loadAllScript(["https://res.wx.qq.com/open/js/jweixin-1.3.2.js"]);
                }
            };

            //判断是否在微信小程序中
            if (!window.WeixinJSBridge || !WeixinJSBridge.invoke) {
                document.addEventListener('WeixinJSBridgeReady', weixinJSBridgeReady, false);
            } else {
                weixinJSBridgeReady();
            }


        }


    };

    define("InfoPlus.Transformer", transformer);

})(window);

﻿/**
 * ExternalLink
 * @Author yech
 * @Since 2011/07/04
 */

(function (window, undefined) {

    var externalLink = function (endPoint, settings, text) {
        if (settings == null) {
            settings = {};
        }
        this.settings = settings;
        this.endPoint = endPoint;
        if (endPoint.indexOf("http://") === -1) {
            this.endPoint = "http://" + endPoint;
        }

        this.assignSize = false;
        this.mode = InfoPlus.ExternalLink.DEFAULT_MODE;

        if (settings.windowMode != null && $IU.isInt(settings.windowMode)) {
            var m = parseInt(settings.windowMode, 10);
            if (!isNaN(m) && (m >= InfoPlus.ExternalLink.MODE_INNER_MODAL && m <= InfoPlus.ExternalLink.MODE_SELF)) {
                this.mode = m;
            }
        }
        if (settings.windowWidth != null && $IU.isNumber(settings.windowWidth)) {
            var w = parseFloat(settings.windowWidth);
            if (!isNaN(w)) {
                this.width = w;
                this.assignSize = true;
            }
        }
        if (settings.windowHeight != null && $IU.isNumber(settings.windowHeight)) {
            var h = parseFloat(settings.windowHeight);
            if (!isNaN(h)) {
                this.height = h;
                this.assignSize = true;
            }
        }

    };

    externalLink.MODE_INNER_MODAL = 1;      //本窗口模式
    externalLink.MODE_INNER_MODALESS = 2;   //本窗口非模式
    externalLink.MODE_OUTER_DIALOG = 3;     //新窗口对话框
    externalLink.MODE_OUTER_MODAL = 4;      //新窗口模式
    externalLink.MODE_OUTER_MODALESS = 5;   //新窗口非模式
    externalLink.MODE_SELF = 6;             //本窗口打开
    externalLink.DEFAULT_MODE = externalLink.MODE_INNER_MODAL;

    externalLink.DEFAULT_DIALOG_WIDTH = $(window).width();
    externalLink.DEFAULT_DIALOG_HEIGHT = $(window).height() * 0.7;

    externalLink.prototype = {
        assignSize: false,
        mode: externalLink.MODE_INNER_MODAL,
        width: externalLink.DEFAULT_DIALOG_WIDTH,
        height: externalLink.DEFAULT_DIALOG_HEIGHT,
        endPoint: null,
        dialogDiv: null,
        href: null,

        openWindow: function () {
            var retValue = true;
            switch (this.mode) {
                case InfoPlus.ExternalLink.MODE_INNER_MODAL:
                case InfoPlus.ExternalLink.MODE_INNER_MODALESS:
                    if (!$$.MOBILE) {
                        var $titleHolder = $("#title_holder"),
                            titleHeight = $titleHolder.height(),
                            commandHeight = $("#command_holder").height(),
                            titleTop = parseInt($titleHolder.parent().css("top"), 10),
                            titleCommandHeight = titleHeight + commandHeight + (isNaN(titleTop) ? 0 : titleTop),//如果标题栏滚动后隐藏，titleTop会是一个负数
                            suggestHeight = $(window).height() - titleCommandHeight - 40 - 48 - 4 - 20;//40是dialog的title高度，48是dialog_body的padding,4是iframe的border,20是留白高度，由于Dialog还没创建显示，所以无法动态计算，这里只能写这些固定值，如果未来改变CSS，需要这里改动这些数字
                        $IU.iframeBox(this.href, this.settings.displayText, this.mode === InfoPlus.ExternalLink.MODE_INNER_MODAL, false, this.width, this.assignSize ? this.height : suggestHeight);
                    } else {
                        var page = new InfoPlus.Render.Mobile.Page({
                            title: this.settings.displayText,
                            uri: this.href
                        });
                        page.show();
                    }
                    break;
                case InfoPlus.ExternalLink.MODE_OUTER_DIALOG:
                    var options = 'directories=0,location=0,menubar=0,resizable=1,scrollbars=1,status=0,titlebar=0,toolbar=0';
                    if (!this.assignSize) {
                        options += ',channelmode=1,fullscreen=1';
                    } else {
                        options += ',channelmode=0,fullscreen=0,width=' + this.width + ',height=' + this.height + ',top=' + (screen.availHeight - this.height) / 2 + ',left=' + (screen.availWidth - this.width) / 2;
                    }
                    window.open(this.href, '', options);
                    break;
                case InfoPlus.ExternalLink.MODE_OUTER_MODAL:
                    $IU.messageBox($$.lt("anchor.closeAfterAction"), $$.hlt("anchor.closeAfterActionDescription"), null, 300);
                    retValue = false;
                    break;
                case InfoPlus.ExternalLink.MODE_SELF:
                case InfoPlus.ExternalLink.MODE_OUTER_MODALESS:
                    retValue = false;
                    break;
            }
            return retValue;
        }
    };

    define("InfoPlus.ExternalLink", externalLink);

})(window);
﻿/*
 * ValuePair
 * @Author yech 
 * @Since 2012/02/21
 */
(function (window, undefined) {

    var valuePair = function (value, displayValue, parentId) {
        this.value = value;
        this.displayValue = displayValue;
        this.name = displayValue;
        this.parentId = parentId;
    };

    valuePair.prototype = {};

    define("InfoPlus.Controls.Data.ValuePair", valuePair);

})(window);
/*
 * Thing
 * @Author yech
 * @Since 2016/10/27
 */
(function (window, undefined) {

    var thing = function (value, displayValue) {
        InfoPlus.Controls.Data.ValuePair.call(this, value, displayValue)
    };

    thing.prototype = $.extend(new InfoPlus.Controls.Data.ValuePair(), {});

    define("InfoPlus.Controls.Data.Thing", thing);

})(window);

/**
 * Uri
 * @Author yech
 * @Since 2016/09/21
 */

(function (window, undefined) {
    var uri = function (value) {
        this.value = value;
    };
    uri.prototype = {};
    define("InfoPlus.Controls.Data.Uri", uri);
})(window);

﻿(function (window, undefined) {

    var style = function (dynamicStyle) {
        this.styles = this.splitStyles(dynamicStyle.style);
        this.condition = dynamicStyle.condition || '';
        this.isRowStyle = dynamicStyle.isRowStyle === true;
        this.isRepeatItemStyle = dynamicStyle.isRepeatItemStyle === true;
        this.keyName = dynamicStyle.keyName;

        var fieldRowIndexName = dynamicStyle.fieldRowIndexName || '';
        if (fieldRowIndexName !== '') {
            if (this.condition.indexOf('$INDEX') !== -1) {
                this.condition = this.condition.replace(/\$INDEX/g, '$' + fieldRowIndexName);
            }
        }

        var fieldGroupCountName = dynamicStyle.fieldGroupCountName || '';
        if (fieldGroupCountName !== '') {
            if (this.condition.indexOf('$COUNT') !== -1) {
                this.condition = this.condition.replace(/\$COUNT/g, '$' + fieldGroupCountName);
            }
        }


        if (this.condition === '' || this.condition.toLowerCase() === 'true') {
            this.ignoreCondition = true;
        } else {
            this.conditionAsts = $$.parseDynamic(this.condition, this.keyName);
            var compiler = new InfoPlus.Dynamics.Parser.Compile(this.conditionAsts);
            this.references = compiler.getReferenceNameArray();
        }
    };

    style.prototype = {

        styles: null,               //样式数组，格式是[{name:,value:}]
        ignoreCondition: false,     //是否忽略条件，即条件总是true
        condition: '',              //条件(string)
        conditionAsts: null,        //编译出来的条件对象,用于求条件值
        references: [],             //条件中涉及到的别的字段的名字数组
        isRowStyle: false,          //是否是控件所在行Style
        isRepeatItemStyle: false,   //是否是重复节表行数据的style
        keyName: '',                //样式所在字段或者重复节表的名称

        splitStyles: function (dynamicStyles) {
            var retValue = [];
            var styleArray = dynamicStyles.split(";");
            for (var index = 0; index < styleArray.length; index++) {
                var s = styleArray[index];
                var stylePair = s.split(":");
                if (stylePair.length === 2) {
                    retValue.push({name: stylePair[0], value: stylePair[1]});
                }
            }
            return retValue;
        },

        getReferedStyle: function (targetFieldName) {
            return new InfoPlus.Dynamics.ReferedStyle(targetFieldName, this);
        }
    };

    define("InfoPlus.Dynamics.Style", style);

})(window);
﻿(function (window, undefined) {

    var formula = function (dynamicFormula) {
        this.formula = dynamicFormula.formula;
        this.condition = dynamicFormula.condition || '';
        this.keyName = dynamicFormula.keyName;

        var fieldRowIndexName = dynamicFormula.fieldRowIndexName || '';
        if (fieldRowIndexName !== '') {
            if (this.formula.indexOf('$INDEX') !== -1) {
                this.formula = this.formula.replace(/\$INDEX/g, '$' + fieldRowIndexName);
                this.isRowIndex = true;
            }
            if (this.condition.indexOf('$INDEX') !== -1) {
                this.condition = this.condition.replace(/\$INDEX/g, '$' + fieldRowIndexName);
            }
        }

        var fieldGroupCountName = dynamicFormula.fieldGroupCountName || '';
        if (fieldGroupCountName !== '') {
            if (this.formula.indexOf('$COUNT') !== -1) {
                this.formula = this.formula.replace(/\$COUNT/g, '$' + fieldGroupCountName);
            }
            if (this.condition.indexOf('$COUNT') !== -1) {
                this.condition = this.condition.replace(/\$COUNT/g, '$' + fieldGroupCountName);
            }
        }

        var conditionRefNames = [];
        if (this.condition === '' || this.condition.toLowerCase() === 'true') {
            this.ignoreCondition = true;
        } else {
            this.conditionAsts = $$.parseDynamic(this.condition, this.keyName);
            var compiler = new InfoPlus.Dynamics.Parser.Compile(this.conditionAsts);
            conditionRefNames = compiler.getReferenceNameArray();
        }

        this.formulaAsts = $$.parseDynamic(this.formula, this.keyName);
        compiler = new InfoPlus.Dynamics.Parser.Compile(this.formulaAsts);
        var formulaRefNames = compiler.getReferenceNameArray();

        var refNames = [];
        for (var vrIndex = 0; vrIndex < formulaRefNames.length; vrIndex++) {
            var valueRefName = formulaRefNames[vrIndex];
            var found = false;
            for (var crIndex = 0; crIndex < conditionRefNames.length; crIndex++) {
                if (conditionRefNames[crIndex] === valueRefName) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                refNames.push(valueRefName);
            }
        }
        this.references = refNames.concat(conditionRefNames);
    };

    formula.prototype = {
        formula: '',            //公式(string)
        formulaAsts: null,      //编译出来的公式对象,用于求公式值
        ignoreCondition: false, //是否忽略条件，即条件总是true
        condition: '',          //条件(string)
        conditionAsts: null,    //编译出来的条件对象,用于求条件值
        references: [],         //条件中涉及到的别的字段的名字数组
        isRowIndex: false,      //是否是显示rowIndex的公式
        keyName: '',            //公式所在字段或者重复节表的名称

        getReferedFormula: function (targetFieldName) {
            return new InfoPlus.Dynamics.ReferedFormula(targetFieldName, this);
        }
    };

    define("InfoPlus.Dynamics.Formula", formula);

})(window);
﻿(function (window, undefined) {

    var referedFormula = function (targetFieldName, formula) {
        this.targetFieldName = targetFieldName;
        this.formula = formula.formula;
        this.formulaAsts = formula.formulaAsts;
        this.ignoreCondition = formula.ignoreCondition;
        this.condition = formula.condition;
        this.conditionAsts = formula.conditionAsts;
    };

    referedFormula.prototype = {
        targetFieldName: '', //可以是control.field.name，也可以是repeatControl.groupName
        formula: '',
        formulaAsts: null,
        condition: '',
        conditionAsts: null,
        ignoreCondition: false
    };

    define("InfoPlus.Dynamics.ReferedFormula", referedFormula);

})(window);
﻿(function (window, undefined) {

    var referedStyle = function (targetFieldName, style) {
        this.targetFieldName = targetFieldName;
        this.styles = style.styles;
        this.ignoreCondition = style.ignoreCondition;
        this.condition = style.condition;
        this.conditionAsts = style.conditionAsts;
    };

    referedStyle.prototype = {
        targetFieldName: '', //可以是control.field.name，也可以是repeatControl.groupName
        style: [],
        condition: '',
        conditionAsts: null,
        ignoreCondition: false
    };

    define("InfoPlus.Dynamics.ReferedStyle", referedStyle);

})(window);
﻿(function (window, undefined) {
    var action = function (dynamicAction) {
        this.action = dynamicAction.action;
        this.condition = dynamicAction.condition || '';
        this.isRepeatItemAction = dynamicAction.isRepeatItemAction === true;
        this.keyName = dynamicAction.keyName;
        var conditionRefNames = [];

        var fieldRowIndexName = dynamicAction.fieldRowIndexName || '';
        if (fieldRowIndexName !== '') {
            if (this.action.indexOf('$INDEX') !== -1) {
                this.action = this.action.replace(/\$INDEX/g, '$' + fieldRowIndexName);
            }
            if (this.condition.indexOf('$INDEX') !== -1) {
                this.condition = this.condition.replace(/\$INDEX/g, '$' + fieldRowIndexName);
            }
        }

        var fieldGroupCountName = dynamicAction.fieldGroupCountName || '';
        if (fieldGroupCountName !== '') {
            if (this.action.indexOf('$COUNT') !== -1) {
                this.action = this.action.replace(/\$COUNT/g, '$' + fieldGroupCountName);
            }
            if (this.condition.indexOf('$COUNT') !== -1) {
                this.condition = this.condition.replace(/\$COUNT/g, '$' + fieldGroupCountName);
            }
        }


        if (this.condition === '' || this.condition.toLowerCase() === 'true') {
            this.ignoreCondition = true;
        } else {
            this.ignoreCondition = false;
            this.conditionAsts = $$.parseDynamic(this.condition, this.keyName);
            var compiler = new InfoPlus.Dynamics.Parser.Compile(this.conditionAsts);
            conditionRefNames = compiler.getReferenceNameArray();
        }

        this.actionAsts = $$.parseDynamic(this.action, this.keyName);
        compiler = new InfoPlus.Dynamics.Parser.Compile(this.actionAsts);
        var actionRefNames = compiler.getReferenceNameArray();

        var refNames = [];
        for (var vrIndex = 0; vrIndex < actionRefNames.length; vrIndex++) {
            var valueRefName = actionRefNames[vrIndex];
            var found = false;
            for (var crIndex = 0; crIndex < conditionRefNames.length; crIndex++) {
                if (conditionRefNames[crIndex] === valueRefName) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                refNames.push(valueRefName);
            }
        }
        this.references = refNames.concat(conditionRefNames);
    };

    action.prototype = {
        action: '',                 //动作(string)
        actionAsts: null,           //编译出来的动作对象
        ignoreCondition: false,     //是否忽略条件
        condition: '',              //条件(string)
        conditionAsts: null,        //编译出来的条件对象,用于求条件值
        references: [],             //动作中涉及到的别的字段的名字数组
        isRepeatItemAction: false,  //是否是重复节表中的行数据的Action
        keyName: '',                //动作所在字段或者重复节表的名称

        getReferedAction: function (targetFieldName) {
            return new InfoPlus.Dynamics.ReferedAction(targetFieldName, this);
        }
    };

    define("InfoPlus.Dynamics.Action", action);

})(window);
﻿(function (window, undefined) {

    var referedAction = function (targetFieldName, action) {
        this.targetFieldName = targetFieldName;
        this.action = action.action;
        this.actionAsts = action.actionAsts;
        this.ignoreCondition = action.ignoreCondition;
        this.condition = action.condition;
        this.conditionAsts = action.conditionAsts;
    };

    referedAction.prototype = {
        targetFieldName: '', //可以是control.field.name，也可以是repeatControl.groupName
        action: '',
        actionAsts: null,
        condition: '',
        conditionAsts: null,
        ignoreCondition: true
    };

    define("InfoPlus.Dynamics.ReferedAction", referedAction);

})(window);
/**
 *  Validation 动态验证
 *  @Author yech
 *  @Since 2018/03/21
 */
(function (window, undefined) {

    var validation = function (dynamicValidation) {
        this.tip = dynamicValidation.tip;
        this.condition = dynamicValidation.condition || '';
        this.keyName = dynamicValidation.keyName;

        var fieldRowIndexName = dynamicValidation.fieldRowIndexName || '';
        if (fieldRowIndexName !== '') {
            if (this.tip.indexOf('$INDEX') !== -1) {
                this.tip = this.tip.replace(/\$INDEX/g, '$' + fieldRowIndexName);
            }
            if (this.condition.indexOf('$INDEX') !== -1) {
                this.condition = this.condition.replace(/\$INDEX/g, '$' + fieldRowIndexName);
            }
        }

        var fieldGroupCountName = dynamicValidation.fieldGroupCountName || '';
        if (fieldGroupCountName !== '') {
            if (this.tip.indexOf('$COUNT') !== -1) {
                this.tip = this.tip.replace(/\$COUNT/g, '$' + fieldGroupCountName);
            }
            if (this.condition.indexOf('$COUNT') !== -1) {
                this.condition = this.condition.replace(/\$COUNT/g, '$' + fieldGroupCountName);
            }
        }


        var conditionRefNames = [];
        if (this.condition === '' || this.condition.toLowerCase() === 'true') {
            this.ignoreCondition = true;
        } else {
            this.conditionAsts = $$.parseDynamic(this.condition, this.keyName);
            var compiler = new InfoPlus.Dynamics.Parser.Compile(this.conditionAsts);
            conditionRefNames = compiler.getReferenceNameArray();
        }

        this.tipAsts = $$.parseDynamic(this.tip, this.keyName);
        compiler = new InfoPlus.Dynamics.Parser.Compile(this.tipAsts);
        var tipRefNames = compiler.getReferenceNameArray();

        var refNames = [];
        for (var vrIndex = 0; vrIndex < tipRefNames.length; vrIndex++) {
            var valueRefName = tipRefNames[vrIndex];
            var found = false;
            for (var crIndex = 0; crIndex < conditionRefNames.length; crIndex++) {
                if (conditionRefNames[crIndex] === valueRefName) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                refNames.push(valueRefName);
            }
        }
        this.references = refNames.concat(conditionRefNames);
    };

    validation.prototype = {
        tip: '',                //验证提示(string)
        tipAsts: null,          //编译出来的验证提示对象,用于求提示值
        ignoreCondition: false, //是否忽略条件，即条件总是true
        condition: '',          //条件(string)
        conditionAsts: null,    //编译出来的条件对象,用于求条件值
        references: [],         //条件中涉及到的别的字段的名字数组
        keyName: '',            //公式所在字段或者重复节表的名称

        getReferedValidation: function (targetFieldName) {
            return new InfoPlus.Dynamics.ReferedValidation(targetFieldName, this);
        }
    };

    define("InfoPlus.Dynamics.Validation", validation);

})(window);
/**
 *  ReferedValidation 动态验证
 *  @Author yech
 *  @Since 2018/03/22
 */
(function (window, undefined) {

    var referedValidation = function (targetFieldName, validation) {
        this.targetFieldName = targetFieldName;
        this.tip = validation.tip;
        this.tipAsts = validation.tipAsts;
        this.ignoreCondition = validation.ignoreCondition;
        this.condition = validation.condition;
        this.conditionAsts = validation.conditionAsts;
    };

    referedValidation.prototype = {
        targetFieldName: '', //可以是control.field.name，也可以是repeatControl.groupName
        tip: '',
        tipAsts: null,
        condition: '',
        conditionAsts: null,
        ignoreCondition: false
    };

    define("InfoPlus.Dynamics.ReferedValidation", referedValidation);

})(window);
/**
 *  DynamicCache 执行动态前建立缓存
 *  @Author yech
 *  @Since 2016/06/08
 */

(function (window, undefined) {
    var cache = function () {

    };

    cache.prototype = {

        context: {},
        //创建缓存
        build: function () {
            //controls缓存所有控件，paths缓存所有path
            var controls = {},
                paths = [],
                context = {};

            //建立所有控件和path的缓存
            var pushControl = function (control) {
                var path = control.path;
                if (controls[path] == null) {
                    controls[path] = [];
                    paths.push(path);
                }
                controls[path].push(control);
            };


            //$$.params.renderForm.find("." + $Control.CLASSNAME_CONTROL).not("." + $Control.CLASSNAME_VAR).each(function () {
            //为了将_VAR_URL加入，去除.not("." + $Control.CLASSNAME_VAR)
            $$.params.renderForm.find("." + $Control.CLASSNAME_CONTROL).each(function () {
                var control = $(this).data($Control.DATA_CONTROL_OBJECT);
                if (control == null || control.path == null || control.field == null) return;
                pushControl(control);
            });

            $$.params.renderForm.find("." + InfoPlus.Repeat.RepeatControl.CLASS_REPEAT_PARENT_ELEMENT).each(function () {
                var control = $(this).data(InfoPlus.Repeat.RepeatControl.DATA_REPEAT_CONTROL_OBJECT);
                if (control == null || control.path == null || control.groupName == null) return;
                pushControl(control);
            });

            //在paths缓存中寻找mainPath的所有直系子孙
            var findChildrenPaths = function (mainPath) {
                var childrenPaths = [];
                for (var i = 0, len = paths.length; i < len; i++) {
                    var path = paths[i];
                    if (path.length > mainPath.length) {
                        //如果该控件的path以mainPath开头且后面跟着_，那么认为是直系子孙
                        if (path.substr(0, mainPath.length) === mainPath && path.substr(mainPath.length, 1) === '_') {
                            childrenPaths.push(path);
                        }
                    }
                }
                return childrenPaths;
            };

            for (var path in controls) {
                if (controls.hasOwnProperty(path)) {
                    var referedPaths = $IU.getReferedControlPaths(path),
                        childrenPaths = findChildrenPaths(path);
                    //referedPaths里存放了所有该path相对应的直系祖先、自己以及直系子孙的path
                    referedPaths = referedPaths.concat(childrenPaths);
                    var cacheControls = [];
                    for (var i = 0, len = referedPaths.length; i < len; i++) {
                        cacheControls = cacheControls.concat(controls[referedPaths[i]]);
                    }
                    context[path] = cacheControls;
                }
            }

            this.context = context;
        },

        //获取该path上所有缓存的控件
        get: function (path) {
            var context = this.context;
            if (context.hasOwnProperty(path)) {
                return context[path];
            }
            return [];
        }

    };

    define("InfoPlus.Dynamics.Cache", cache);

})(window);

/**
 *  ControlReference 这个类放到动态的context里，替代控件对象，将control封装了一次，为了不暴露过多的属性和方法
 *  @Author yech
 *  @Since 2018/11/30
 */
(function (window, undefined) {

    var controlReference = function (control) {
        this.element = control.element;
        this.permission = control.field.permission;
        this.isValid = control.checkValid();
    };

    controlReference.prototype = {

        element: null

    };

    define("InfoPlus.Dynamics.ControlReference", controlReference);

})(window);
(function (window, undefined) {

    var repeatControlReference = function (repeatControl) {
        this.repeatParentElement = repeatControl.repeatParentElement;
        this.permission = repeatControl.groupInformation.permission;
    };

    repeatControlReference.prototype = {

        element: null

    };

    define("InfoPlus.Dynamics.RepeatControlReference", repeatControlReference);

})(window);
﻿/*
 * Control 所有Control类的基类
 * @Author yech 
 * @Since 2012/02/17
 */

(function (window, undefined) {
    var control = function (controlType, path, field, render, initValue, initDisplayValue, initAttributes) {
        if (controlType == null || field == null) return;
        this.controlType = controlType;
        this.path = path;
        this.field = field;
        this.render = render;
        //initValue是创建时传入的初始值，总是string类型
        this.initValue = initValue;
        this.initDisplayValue = initDisplayValue;
        this.initAttributes = initAttributes;

        if (field.fieldChanging === true) {
            this.onFieldChange = true;
        }

        if (field.needSync === true) {
            this.onFieldSync = true;
        }

        var controlElement = this.createControl();
        if (controlElement == null) {
            this.element = null;
            this.controlContainer = null;
        }
    };

    control.CONTROL_TYPE_EDIT = "BoundEdit";
    control.CONTROL_TYPE_TEXT = "BoundTextArea";
    control.CONTROL_TYPE_RICHTEXT = "BoundRichText";
    control.CONTROL_TYPE_DATE = "BoundDate";
    control.CONTROL_TYPE_TIME = "BoundTime";
    control.CONTROL_TYPE_CHECKBOX = "BoundCheck";
    control.CONTROL_TYPE_CHECKBOX_LIST = "BoundCheckList";
    control.CONTROL_TYPE_RADIO = "BoundOption";
    control.CONTROL_TYPE_RADIO_LIST = "BoundOptionList";
    control.CONTROL_TYPE_RADIO_GROUP = "BoundOptionGroup";
    control.CONTROL_TYPE_SELECT = "BoundSelect";
    control.CONTROL_TYPE_REMARK = "BoundRemark";
    control.CONTROL_TYPE_ANCHOR = "BoundAnchor";
    control.CONTROL_TYPE_ACTION = "BoundAction";
    control.CONTROL_TYPE_LABEL = "BoundLabel";
    control.CONTROL_TYPE_HIDDEN = "BoundHidden";
    control.CONTROL_TYPE_SUGGESTER = "BoundSuggester";
    control.CONTROL_TYPE_SUGGESTER2 = "BoundSuggester2";
    control.CONTROL_TYPE_FILE = "BoundFile";
    control.CONTROL_TYPE_IMAGE = "BoundImage";
    control.CONTROL_TYPE_PICTURE = "BoundPicture";
    control.CONTROL_TYPE_HELP = "BoundHelp";
    control.CONTROL_TYPE_BUTTON = "BoundButton";
    control.CONTROL_TYPE_LINK_BUTTON = "BoundLinkButton";
    control.CONTROL_TYPE_CHECK_BUTTON = "BoundCheckButton";
    control.CONTROL_TYPE_PASSWORD = "BoundPassword";
    control.CONTROL_TYPE_IFRAME = "BoundIFrame";
    control.CONTROL_TYPE_THING = "BoundThing";
    control.CONTROL_TYPE_CONVERTED_LABEL = "BoundConvertedLabel";
    control.CONTROL_TYPE_SWITCH = "BoundSwitch";
    control.CONTROL_TYPE_MAP = "BoundMap";
    control.CONTROL_TYPE_SIGNATURE = "BoundSignature";
    control.CONTROL_TYPE_DOC = "BoundDoc";

    control.DATA_CONTROL_OBJECT = "controlObject";
    control.DATA_TYPE = "dataType";
    control.DATA_TYPE_STRING = "string";
    control.DATA_TYPE_ANYURI = "anyURI";
    control.DATA_TYPE_XHTML = "XHTML";
    control.DATA_TYPE_INT = "integer";
    control.DATA_TYPE_DOUBLE = "double";
    control.DATA_TYPE_BOOL = "boolean";
    control.DATA_TYPE_DATE = "date";
    control.DATA_TYPE_TIME = "time";
    control.DATA_TYPE_DATETIME = "dateTime";
    control.DATA_TYPE_USER = "User";
    control.DATA_TYPE_ORGANIZE = "Organize";
    control.DATA_TYPE_CODE = "Code";
    control.DATA_TYPE_FILE = "File";
    control.DATA_TYPE_THING = "Thing";
    control.DATA_TYPE_DOC = "Doc";
    control.DATA_TYPE_LOCATION = "Location";
    control.DATA_TYPE_SIGNATURE = "Signature";

    control.DATA_IS_CONTROL = "isControl";
    control.DATA_PATH = "path";
    control.DATA_RENDER = "render";
    control.DATA_FIELD = "field";
    control.DATA_EXTERNAL_LINK = "externalLink";
    control.DATA_SUGGESTER = "suggester";
    control.DATA_CONTROL_TYPE = "controlType";
    control.DATA_VALIDATOR = "validator";
    control.DATA_VALIDATOR_PROMPT_POSITION = "validatorPromptPosition";
    control.DATA_ORIGIN_INPUT = "originInput"; //用于suggester,remark中记录一个隐藏的字段，该隐藏字段用于验证
    control.DATA_ORIGIN_CONTROL = "originControl"; //用于Page,避免重复创建,by marstone, 2018/08/31
    control.DATA_SOURCE_CONTROL = "sourceControl";
    control.DATA_ORIGIN_STYLE = "originStyle";
    control.DATA_ATTRIBUTES = "attributes";
    control.DATA_VALUE = "value";
    control.DATA_DISPLAY_VALUE = "displayValue";

    control.CLASSNAME_CONTROL = "infoplus_control";
    control.CLASSNAME_READONLY = "infoplus_readonly";
    control.CLASSNAME_WRITABLE = "infoplus_writable";
    control.CLASSNAME_FIELD_CHANGE = "infoplus_fieldChange";
    control.CLASSNAME_VAR = "infoplus_var";
    control.CLASSNAME_ROWINDEX = "infoplus_rowIndex";
    control.CLASSNAME_GROUP_COUNT = "infoplus_groupCount";


    control.prototype = {
        guid: null,                         //每个control创建时产生一个GUID，用于infoCore事件中比较
        compatibleFieldTypes: [],           //各控件需要覆写兼容数据类型
        element: null,
        elementClassName: '',               //每个控件的element上加的class名字,任何控件的原型中需要覆盖此属性
        name: '',                           //控件名称
        controlContainer: null,             //控件容器,目前有控件容器的有button,suggester,suggester2,iframe,linkButton,label,text
        onFieldChange: false,
        //onLocalFieldChange: false,
        onFieldRefer: false,
        onFieldSync: false,                 //是否需要同步
        ignoreClass: false,                 //是否忽略从infopath带出来的class属性,目前label,file,button会忽略class
        ignoreValidation: false,            //是否忽略验证,目前Anchor,Action,Hidden,Label,Help,Button,Image会忽略验证
        allowFocus: true,                   //是否能得到焦点,目前Anchor,Action,Hidden,Label,File不能得到焦点
        autoTriggerFieldChangeEvent: true,  //目前Hidden、Label、Remark、Help、Suggester、Suggester2、File、Picture、Iframe、Switch、Thing、CheckList在setValue时自己判断是否change，然后手工调用change()触发change事件，只有这几个控件该属性是false，其目的是用于onFieldRefer事件中的联动
        fieldChangeProcessor: new InfoPlus.Controls.Event.FieldChangeEventProcessor(), //fieldChange处理器
        dynamicProcessor: new InfoPlus.Dynamics.Processor(), //动态处理器
        events: [],                         //控件的注册事件，有事件的控件可自行填写，内容为{type:,,handler:,withEventData}的数组，注意handler函数里面的this是selector筛选出来的dom element
        conditionalStyles: [],              //条件样式
        validatorPromptPosition: "topRight",//验证信息出现的位置,如果控件需要指定验证信息出现的位置，可以覆盖该属性
        parentValue: null,                  //父亲控件的值，用于联动
        maxLength: null,                    //最大长度，限制edit,text,remark控件的输入长度
        clickFireFieldChange: false,        //是否click时候用fieldChange事件触发后台的代码，目前有button,anchor,linkButton此属性为true
        synced: false,                      //是否已被同步，用于同步时候只做一次，不会来回反复同步
        tooltip: null,                      //提示信息，当获得焦点的时候弹出气泡显示
        dynamicReadonly: false,             //是否设置了动态只读
        dynamicParallelReadonly: false,     //是否在动态并行有强制读（R权限）的非执行分支中
        hasHiddenElement: false,            //控件是否带隐藏字段

        //控件element上class名称
        getElementClassName: function () {
            return "infoplus_" + this.name + "Control";
        },

        //控件container上class名称
        getContainerClassName: function () {
            return this.getElementClassName() + "Container";
        },

        createControl: function () {
            if (this.checkCompatibility() === false) {
                $IU.delayedErrorMessageBox($$.lt("control.createError", this.field.name));
                return null;
            }
            this.element = this.createElement();
            if (this.element == null) return null;
            //有些控件可以自己在createElement方法里创建hidden元素，所以这里判断一下是否已经创建
            if (this.hasHiddenElement && $(this.element).data($Control.DATA_ORIGIN_INPUT) == null) {
                this.createHiddenElement();
            }
            this.guid = $$.guid();
            this.setInfopathFormAttributes();
            this.setControlData();
            this.setElementAttribute();

            this.processValidation();
            this.processDynamicValidation();
            this.specialSetting();
            this.setPermission();

            this.setPlaceHolder();

            //先设置初值，再增加fieldChange的class以及注册事件，以防止触发fieldChange,fieldRefer
            if (this.isReadable()) {
                this.setValue(this.initValue, this.initDisplayValue, true, this.initAttributes);
                this.setAttributes(this.initAttributes);
            }
            //添加fieldChangeClass，让自动触发fieldChange,fieldRefer事件的控件开始可以触发该两种事件
            this.addFieldChangeClass();
            this.registerEvent();
            return this.element;
        },

        //创建控件元素返回控件最外层的element
        //子类需要覆写该方法
        createElement: function () {
            return null;
        },

        //创建控件隐藏字段，用于显示类控件Help,Image,Label,Picture,File,Remark,CheckList,Button,LinkButton,CheckButton,Switch,Thing
        createHiddenElement: function (element) {
            if (element === undefined) {
                element = this.element;
            }
            var hiddenInput = document.createElement("input");
            hiddenInput.type = "hidden";
            $(element).data($Control.DATA_ORIGIN_INPUT, hiddenInput);
            $(hiddenInput).data($Control.DATA_SOURCE_CONTROL, this)
                .data($Control.DATA_CONTROL_TYPE, this.controlType);
            if (this.controlContainer == null) {
                element.appendChild(hiddenInput);
            } else {
                this.controlContainer.appendChild(hiddenInput);
            }
        },

        //同步值
        syncValue: function (fieldValue, fieldDisplayValue, attributes) {
            //autoTriggerFieldChangeEvent为true的那些控件是自动触发change的，setValue并不会触发change事件,所以不用把synced设置为true
            if (this.autoTriggerFieldChangeEvent === false) {
                this.synced = true;
            }
            this.setValue(fieldValue, fieldDisplayValue, false, attributes);
        },

        //设置控件值
        //子类需要覆写该方法
        //fieldValue 值，fieldDisplayValue 显示值, isInit 是否是在创建时候(createControl)调用
        setValue: function (fieldValue, fieldDisplayValue, isInit) {
            $(this.element).val(fieldValue);
        },

        //获取控件值,返回值必须与dataType相匹配
        //string,xhtml返回string,int返回int,double返回float,bool返回bool,date返回自1970.1.1的秒数,User Org Code 返回ValuePair，如果空值则返回""或ValuePair("","")，只有radio如果不是checked返回null
        //子类需要覆写该方法
        //isInit参数表示是否是在初始化的时候，目前只有checklist用到了这个参数
        getValue: function (isInit) {
            if (this.element != null) {
                return $(this.element).val();
            }
            return null;
        },

        //设置控件style,suggester,optionList,checkList需要覆写该方法
        setStyle: function (name, value) {
            $IU.setDynamicStyle(this.element, name, value);
        },

        //获取控件style,suggester需要覆写该方法
        getStyle: function (name) {
            return $IU.getElementStyle(this.element, name);
        },

        //获取控件id
        getId: function () {
            return this.element.id;
        },

        //检查数据是否合法
        checkValid: function () {
            return true;
        },

        //获得父亲控件的值
        getParentValue: function () {
            return this.parentValue;
        },

        //获取控件值的扩展属性(Attribute)值
        //目前有Select,Suggester2,Label,Hidden,Anchor,Iframe,Image需要覆写该方法
        getAttributes: function () {
            return $(this.element).data($Control.DATA_ATTRIBUTES);
        },

        setAttributes: function (attributes) {
            if (attributes == null) {
                $(this.element).removeData($Control.DATA_ATTRIBUTES);
            } else {
                $(this.element).data($Control.DATA_ATTRIBUTES, attributes);
            }
        },

        //获取排序值,可以在repeat table中排序用,string,XHTML取字符值，int double bool date 取数字,User Organize Code 取displayValue
        //各控件可以覆写该方法
        getSortValue: function () {
            var val = this.getValue();
            if (val instanceof $Controls.Data.ValuePair) {
                return val.displayValue;
            }
            if (val instanceof $Controls.Data.Uri) {
                return val.value;
            }
            return val;
        },

        getPosition: function () {
            var $element = (this.controlContainer != null) ? $(this.controlContainer) : $(this.element);
            if (!$element.is(":visible")) return null;
            return {
                left: $element.offset().left,
                top: $element.offset().top,
                width: $element.outerWidth(),
                height: $element.outerHeight()
            }
        },


        //设置元素的id,name属性
        //label,remark,help,file需要覆写该方法
        setElementAttribute: function () {
            if (!this.hasHiddenElement) {
                var element = this.element;
                var render = this.render;
                element.id = render["controlId"] + this.path;
                $(element).attr("name", render["field"] + this.path);
                $(element).data($Control.DATA_FIELD, render["field"]).data($Control.DATA_RENDER, render);
                //container上加id为了让validationEngine能够在正确的位置弹出提示
                if (this.controlContainer != null) {
                    $(this.controlContainer).attr("id", element.id + "_Container");
                }
            } else {
                this.setHiddenAttribute();
            }
        },

        setHiddenAttribute: function () {
            var $element = $(this.element),
                hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT),
                render = this.render,
                path = this.path;
            this.element.id = this.name + "_" + $$.guid();
            hiddenInput.id = render["controlId"] + path;
            hiddenInput.name = render["field"] + path;
            $(hiddenInput).data($Control.DATA_PATH, path).data($Control.DATA_FIELD, render["field"]).data($Control.DATA_RENDER, render).data($Control.DATA_IS_CONTROL, true).data($Control.DATA_CONTROL_OBJECT, this);
            $element.data($Control.DATA_FIELD, render["field"]);
            if (this.controlContainer != null) {
                $(this.controlContainer).attr("id", this.element.id + "_Container");
            }
        },

        //控件如果有特殊的设定，必须覆写该方法，目前date,file,suggester,image,label,text,suggester2,select会覆写此方法
        specialSetting: function () {
            //do nothing        
        },

        //获取控件的容器，以便append到父亲dom对象中
        getControlContainer: function () {
            if (this.controlContainer != null) return this.controlContainer;
            return this.element;
        },

        //设置只读属性
        setReadOnly: function () {
            this.element.readOnly = true;
            switch (this.controlType) {
                case $Control.CONTROL_TYPE_EDIT:
                case $Control.CONTROL_TYPE_TEXT:
                case $Control.CONTROL_TYPE_DATE:
                case $Control.CONTROL_TYPE_TIME:
                case $Control.CONTROL_TYPE_PASSWORD:
                case $Control.CONTROL_TYPE_SWITCH:
                    $(this.element).addClass($Control.CLASSNAME_READONLY);
                    break;
                case $Control.CONTROL_TYPE_SELECT:
                case $Control.CONTROL_TYPE_CHECKBOX:
                case $Control.CONTROL_TYPE_BUTTON:
                case $Control.CONTROL_TYPE_CHECK_BUTTON:
                    $(this.element).addClass($Control.CLASSNAME_READONLY);
                    this.element.disabled = true;
                    break;
                case $Control.CONTROL_TYPE_RADIO:
                case $Control.CONTROL_TYPE_RADIO_GROUP:
                    $(this.element).addClass($Control.CLASSNAME_READONLY).addClass("disabled");
                    this.element.disabled = true;
                    break;
                case $Control.CONTROL_TYPE_CHECKBOX_LIST:
                    $(this.element).find("input[type=checkbox]").each(function () {
                        $(this).addClass($Control.CLASSNAME_READONLY).addClass("disabled");
                        var $label = $(this).parent();
                        if (this.checked) {
                            $label.addClass("checked").removeClass("unchecked");
                        } else {
                            $label.addClass("unchecked").removeClass("checked");
                        }
                        $label.addClass($Control.CLASSNAME_READONLY);
                        this.disabled = true;
                    });
                    break;
                case $Control.CONTROL_TYPE_RADIO_LIST:
                    $(this.element).find("input[type=radio]").each(function () {
                        $(this).addClass($Control.CLASSNAME_READONLY).addClass("disabled");
                        $(this).parent().attr("class", this.checked ? "checked" : "unchecked").addClass($Control.CLASSNAME_READONLY);
                        this.disabled = true;
                    });
                    break;
                case $Control.CONTROL_TYPE_SUGGESTER2:
                    var select = $(this.element).data($Control.DATA_ORIGIN_INPUT);
                    $(this.element).addClass($Control.CLASSNAME_READONLY);
                    select.disabled = true;
                    break;
                case $Control.CONTROL_TYPE_RICHTEXT:
                case $Control.CONTROL_TYPE_REMARK:
                case $Control.CONTROL_TYPE_SUGGESTER:
                case $Control.CONTROL_TYPE_FILE:
                case $Control.CONTROL_TYPE_ANCHOR:
                case $Control.CONTROL_TYPE_LINK_BUTTON:
                    //do nothing, the control will deal with readonly itself
                    break;
                case $Control.CONTROL_TYPE_THING:
                    $(this.element).addClass($Control.CLASSNAME_READONLY);
                    break;
                case $Control.CONTROL_TYPE_LABEL:
                case $Control.CONTROL_TYPE_HIDDEN:
                    //do nothing, the control is already readonly
                    break;
                case $Control.CONTROL_TYPE_MAP:
                    //do nothing...
                    break;
                default:
                    //此处处理定制控件，定制控件自己写class控制只读的样式
                    $(this.element).addClass($Control.CLASSNAME_READONLY);
                    if (this.controlContainer != null) {
                        $(this.controlContainer).addClass($Control.CLASSNAME_READONLY);
                    }
                    break;
            }
        },

        //调用控件的readOnly动作时候使用，目前File Picture Suggester Suggester2 Anchor Button LinkButton RichText CheckList RadioList Date Time覆写该方法
        setDynamicReadOnly: function (isReadOnly) {

        },

        //在动态并行的非执行分支，且权限为强制读(R)，那么设置动态并行只读
        //目前File,Suggester,Anchor,LinkButton,RichText需要覆写该方法
        setDynamicParallelReadOnly: function () {
            this.dynamicParallelReadonly = true;
            this.setReadOnly();
        },

        //设置可写属性
        //这里是为了设置infoplus_writable这个class，目的是为了在苹果操作系统中覆盖infopath自带的class中背景色为window，造成只读和不只读的控件颜色相近
        setWritableClass: function () {
            switch (this.controlType) {
                case $Control.CONTROL_TYPE_EDIT:
                case $Control.CONTROL_TYPE_TEXT:
                case $Control.CONTROL_TYPE_RICHTEXT:
                case $Control.CONTROL_TYPE_DATE:
                case $Control.CONTROL_TYPE_TIME:
                case $Control.CONTROL_TYPE_SELECT:
                case $Control.CONTROL_TYPE_SUGGESTER2:
                case $Control.CONTROL_TYPE_CHECKBOX:
                case $Control.CONTROL_TYPE_RADIO:
                    $(this.element).addClass($Control.CLASSNAME_WRITABLE);
                    break;
                case $Control.CONTROL_TYPE_RADIO_LIST:
                    $(this.element).find("input[type=radio]").addClass($Control.CLASSNAME_WRITABLE);
                    break;
                case $Control.CONTROL_TYPE_CHECKBOX_LIST:
                    $(this.element).find("input[type=checkbox]").addClass($Control.CLASSNAME_WRITABLE);
                    break;
                case $Control.CONTROL_TYPE_REMARK:
                case $Control.CONTROL_TYPE_SUGGESTER:
                case $Control.CONTROL_TYPE_FILE:
                    //do nothing the control will deal with readonly itself                
                    break;
                case $Control.CONTROL_TYPE_ANCHOR:
                case $Control.CONTROL_TYPE_ACTION:
                case $Control.CONTROL_TYPE_LABEL:
                case $Control.CONTROL_TYPE_HIDDEN:
                    //do nothing
                    break;
            }
        },

        //检查数据类型兼容性
        checkCompatibility: function () {
            if (this.field == null || this.render == null || this.render.renderCategory !== "Boundable") return false;
            return $.inArray(this.field.type, this.compatibleFieldTypes) !== -1;
        },

        //检查数据值是否是指定的数据类型，用于setValue方法中判断数据值是否符合要求
        checkDataType: function (fieldValue) {
            switch (this.field.type) {
                case InfoPlus.Controls.Control.DATA_TYPE_STRING:
                case InfoPlus.Controls.Control.DATA_TYPE_ANYURI:
                case InfoPlus.Controls.Control.DATA_TYPE_XHTML:
                case InfoPlus.Controls.Control.DATA_TYPE_USER:
                case InfoPlus.Controls.Control.DATA_TYPE_ORGANIZE:
                case InfoPlus.Controls.Control.DATA_TYPE_CODE:
                    return $IU.isString(fieldValue);
                case InfoPlus.Controls.Control.DATA_TYPE_INT:
                case InfoPlus.Controls.Control.DATA_TYPE_DATE:
                    return $IU.isInt(fieldValue);
                case InfoPlus.Controls.Control.DATA_TYPE_DOUBLE:
                    return $IU.isNumber(fieldValue);
                case InfoPlus.Controls.Control.DATA_TYPE_BOOL:
                    return $IU.isBoolean(fieldValue);
            }
            return false;
        },

        setControlData: function () {
            var $element = $(this.element);
            $element.data($Control.DATA_TYPE, this.field.type).data($Control.DATA_CONTROL_TYPE, this.controlType)
                .data($Control.DATA_CONTROL_OBJECT, this).data($Control.DATA_IS_CONTROL, true).data($Control.DATA_PATH, this.path)
                .addClass($Control.CLASSNAME_CONTROL).addClass(this.getElementClassName());
            if (this.controlContainer != null) {
                $(this.controlContainer).data($Control.DATA_CONTROL_OBJECT, this);
            }
        },

        //处理动态验证
        processDynamicValidation: function () {
            //忽略验证的控件，或者只读的控件就不处理动态验证了
            if (this.ignoreValidation || this.isReadOnly()) return;

            var element = this.element;
            var dynamics = this.render.properties;
            if (dynamics != null && dynamics.length > 0) {
                for (var i = 0, len = dynamics.length; i < len; i++) {
                    var dynamic = dynamics[i];
                    if (dynamic['key'] === 'validation' && dynamic['values'] != null) {
                        var validator = $(element).data($Control.DATA_VALIDATOR);
                        if (validator == null) {
                            validator = {
                                required: false,
                                builtIn: false,
                                dynamics: []
                            };
                            $(element).data($Control.DATA_VALIDATOR, validator);

                            var hiddenInput = $(element).data($Control.DATA_ORIGIN_INPUT);
                            if (hiddenInput !== undefined) {
                                $(hiddenInput).data($Control.DATA_VALIDATOR, validator);
                                if (this.validatorPromptPosition !== null) {
                                    $(hiddenInput).data($Control.DATA_VALIDATOR_PROMPT_POSITION, this.validatorPromptPosition);
                                }
                            }

                            if (this.validatorPromptPosition !== null) {
                                $(element).data($Control.DATA_VALIDATOR_PROMPT_POSITION, this.validatorPromptPosition);
                            }
                            $IU.addElementValidateClass(element);
                        }

                        if (validator['dynamics'] == null) {
                            validator['dynamics'] = [];
                        }

                        for (var tipIndex = 0, tipLen = dynamic.values.length; tipIndex < tipLen; tipIndex++) {
                            var tip = dynamic.values[tipIndex];
                            validator.dynamics.push({
                                tip: tip.value,
                                condition: tip.condition,
                                builtIn: tip.builtIn
                            });
                        }

                    }
                }
            }
        },

        processValidation: function () {
            //忽略验证的控件，或者只读的控件就不处理验证了
            if (this.ignoreValidation || this.isReadOnly()) return;

            var field = this.field;
            var element = this.element;

            if (field.notNull === true || field.regEx) {
                /*
                var permission = field.permission || "";
                if (permission.indexOf("r") !== -1 && permission.indexOf("w") === -1) {
                    //这个字段是只读的，不必验证
                    return;
                }
                */
                var validator = {
                    required: field.notNull,
                    regEx: field.regEx,
                    prompt: field.prompt,
                    builtIn: false
                };
                var hiddenInput = $(element).data($Control.DATA_ORIGIN_INPUT);
                if (hiddenInput !== undefined) {
                    $(hiddenInput).data($Control.DATA_VALIDATOR, validator);
                }
                $(element).data($Control.DATA_VALIDATOR, validator);
                if (this.validatorPromptPosition !== null) {
                    $(element).data($Control.DATA_VALIDATOR_PROMPT_POSITION, this.validatorPromptPosition);
                }
                $IU.addElementValidateClass(element);
            }

        },


        //创建Infopath表单带出来的字段属性
        setInfopathFormAttributes: function () {
            var element = this.element;
            if (element == null) return;
            var $element = $(element);
            var attributeList = this.render["attributes"];
            if (attributeList == null || !$IU.isArray(attributeList)) return;

            for (var i = 0; i < attributeList.length; i++) {
                var attribute = attributeList[i];
                var key = attribute["key"];
                if (null != attribute["namespace"] && "" !== attribute["namespace"]) {
                    key = attribute["namespace"] + ":" + key;
                }
                try {
                    switch (key.toLocaleLowerCase()) {
                        case "class":
                            if (!this.ignoreClass) {
                                $element.addClass(attribute["value"]);
                            }
                            break;
                        case "hidefocus":
                        case "tabindex":
                            if (this.allowFocus) {
                                element.setAttribute(key, attribute["value"]);
                            }
                            break;
                        case "onclick":
                        case "value":
                        case "contenteditable":
                            break;
                        default:
                            element.setAttribute(key, attribute["value"]);
                            break;
                    }
                } catch (exception) {
                }
            }
        },

        isWritable: function () {
            var field = this.field;
            if (field != null) {
                var permission = field.permission || "";
                //有w权限且不位于动态并行中具有强制读权限(R)的非执行分支中，即可写
                return permission.indexOf("w") !== -1 && (!this.dynamicParallelReadonly);
            }
            return false;
        },

        isReadable: function () {
            var field = this.field;
            if (field != null) {
                var permission = field.permission || "";
                return permission.indexOf("r") !== -1;
            }
            return false;
        },

        isEditable: function () {
            var field = this.field;
            if (field != null) {
                var permission = field.permission || "";
                return permission.indexOf("e") !== -1;
            }
            return false;
        },

        isDynamicReadonly: function () {
            return this.dynamicReadonly;
        },

        //如果既不可读，也不可写，那么hasNoPowerAtAll返回true,否则返回false
        hasNoPowerAtAll: function () {
            return (!this.isWritable() && !this.isReadable());
        },

        //如果没有写权限，只有读权限则该控件只读
        isReadOnly: function () {
            return (!this.isWritable() && this.isReadable());
        },

        isVisible: function () {
            return $(this.controlContainer || this.element).is(":visible");
        },

        //不可读情况下需要隐藏控件，缺省将this.element的display设置为none,且disabled设置为true,如果控件隐藏需要特殊的写法请覆写该方法
        hideControl: function () {
            this.element.style.display = "none";
            this.element.disabled = true;
        },

        //设置权限
        setPermission: function () {
            if (this.field == null) return;
            if (!this.isReadable()) {
                //no read permission ,hide the element
                //this.hideControl();
                this.visible(false);
                return;
            }
            if (this.isReadOnly()) {
                this.setReadOnly();
            }
            if (this.isWritable()) {
                this.setWritableClass();
            }
        },

        addFieldChangeClass: function () {
            if (this.onFieldChange || this.onFieldRefer || this.onFieldSync) {
                var originInput = $(this.element).data($Control.DATA_ORIGIN_INPUT);
                if (originInput !== undefined) {
                    $(originInput).addClass($Control.CLASSNAME_FIELD_CHANGE);
                } else {
                    $(this.element).addClass($Control.CLASSNAME_FIELD_CHANGE);
                }
            }
        },

        setDynamicStyle: function (render, fromInit) {
            this.dynamicProcessor.processDynamicStyle(this, render, undefined, undefined, fromInit);
        },

        doDynamicAction: function (render, fromInit) {
            this.dynamicProcessor.processDynamicAction(this, render, undefined, undefined, fromInit);
        },

        doDynamicValidation: function (render, fromInit) {
            this.dynamicProcessor.processDynamicValidation(this, render, undefined, undefined, fromInit);
        },

        setDynamicValue: function (render, fromInit) {
            this.dynamicProcessor.processDynamicFormula(this, render, undefined, undefined, undefined, fromInit);
        },

        fieldChangeEvent: function (formData) {
            return this.fieldChangeProcessor.fieldChangeEvent(this, formData);
        },

        fieldReferEvent: function (render, referParent, referSibling, referChild, fieldChangingReferAll, doAllActionStyle, excludePath) {
            this.dynamicProcessor.fieldReferEvent(this, render, referParent, referSibling, referChild, fieldChangingReferAll, doAllActionStyle, excludePath);
        },

        fieldSyncEvent: function () {
            var value = this.getValue(),
                name = this.render["field"] + this.path,
                thisElement = this.element,
                count = 0,
                displayValue,
                attributes;
            if (value instanceof $Controls.Data.ValuePair) {
                displayValue = value.displayValue;
                attributes = this.getAttributes();
                value = value.value;
            }
            if (value instanceof $Controls.Data.Uri) {
                value = value.value;
            }

            $$.params.fieldSyncing = true;

            var getControl = function ($element) {
                //取Label,Remark,Help,File的control对象
                var control = $element.data($Control.DATA_SOURCE_CONTROL);
                if (control === undefined) {
                    //取其他控件的control对象
                    control = $element.data($Control.DATA_CONTROL_OBJECT);
                }
                return control;
            };

            var elements = document.getElementsByName(name);
            for (var i = 0, len = elements.length; i < len; i++) {
                var control = getControl($(elements[i]));
                //如果是自己不用同步
                if (control == null || elements[i] === thisElement || control === this) continue;
                //如果同步双方都是option，那么就不同步了，因为一组option其实是一个控件，它们之间不需要同步
                if (this.controlType === $Control.CONTROL_TYPE_RADIO && control.controlType === $Control.CONTROL_TYPE_RADIO) continue;

                //没有发生过变化的不用同步数据
                var oldValue = control.getValue();
                if (oldValue instanceof $Controls.Data.Thing) {
                    var changed = (oldValue.value !== value) || (oldValue.displayValue !== displayValue);
                } else {
                    if (oldValue != null && oldValue.value !== undefined) {
                        oldValue = oldValue.value;
                    }
                    changed = oldValue !== value;
                }

                if (!changed) continue;

                control.syncValue(value, displayValue, attributes);
                count++;
            }

            $$.params.fieldSyncing = false;

        },

        //注册事件，如果控件有事件需要覆写该方法
        registerEvent: function () {

        },

        //判断是否应该触发fieldChange，File,Picture会覆写该方法
        shouldFireChangeEvent: function (fieldValue) {
            //如果刚被同步数据，那么不用再次触发change,理论上应该是不触发onFieldSync，而onFieldChange和onFieldRefer应该做，
            //但是考虑到如果是被同步过，那么同步的来源字段肯定已经把onFieldChange,onFieldRefer给做过了，所以不必再让被同步的控件再触发一次了
            //所以直接避免触发change事件，那么三种都不会做了
            if (this.synced === true) {
                this.synced = false;
                return false;
            }
            if (this.onFieldChange || this.onFieldRefer || this.onFieldSync) {
                var oldValue = this.getValue(),
                    currentValueIsValuePair = (fieldValue != null && fieldValue.value !== undefined && fieldValue.displayValue !== undefined);
                if (oldValue instanceof $Controls.Data.Uri) {
                    return oldValue.value !== fieldValue;
                }
                if (oldValue instanceof $Controls.Data.Thing) {
                    if (currentValueIsValuePair) {
                        //物品名称变化也需要fieldChange，因为编号本身不改变
                        return (oldValue.value !== fieldValue.value) || (oldValue.displayValue !== fieldValue.displayValue);
                    } else {
                        //如果只传了一个值进来，那这个值是显示值（物品名称），需要和旧数据的displayValue比较
                        return (oldValue.displayValue !== fieldValue);
                    }
                }
                if (oldValue instanceof $Controls.Data.ValuePair) {
                    if (currentValueIsValuePair) {
                        return (oldValue.value !== fieldValue.value);
                    } else {
                        return (oldValue.value !== fieldValue);
                    }
                }
                if (currentValueIsValuePair) {
                    return (oldValue !== fieldValue.value);
                } else {
                    return (oldValue !== fieldValue);
                }
            }
            return false;
        },

        //是否应该联动再次触发fieldChange
        shouldFireChangeEventAgain: function (fieldValue) {
            return this.autoTriggerFieldChangeEvent && this.shouldFireChangeEvent(fieldValue);
        },

        //获取控件数据源，目前只有select需要覆写该方法
        getDataSource: function () {
            return null;
        },

        //获取控件数据类型
        getDataType: function () {
            if (this.field == null) return null;
            return this.field.type;
        },

        //设置焦点,目前suggester需要覆写该方法
        setFocus: function () {
            if (this.element == null || !this.isReadable()) return;
            try {
                this.element.focus();
            } catch (e) {
            }
        },

        //失去焦点,目前suggester需要覆写该方法
        lostFocus: function () {
            if (this.element == null || !this.isReadable()) return;
            try {
                this.element.blur();
            } catch (e) {
            }
        },

        //获取动态KEY，目的是以这个KEY来组织动态的数据结构，对于CONTROL取FIELD.NAME作为KEY
        getDynamicKeyName: function () {
            if (this.field == null) return null;
            return this.field.name;
        },

        //获取在计算动态公式，样式，动作时候所需要的CONTEXT里，需要放的control名字 fieldXXX->fieldXXXRef
        getDynamicContextControlName: function () {
            if (this.field == null || this.field.name == null) return null;
            /*
            var fieldName = this.field.name;
            if (fieldName.length > 5) {
                if (fieldName.substr(0, 5).toLowerCase() === 'field') {
                    return 'control' + fieldName.substr(5);
                }
            }
            return 'control' + fieldName;
            */
            return this.field.name + "Ref";
        },

        //设置placeholder，如果需要特殊处理placeholder的控件覆写该方法,目前select和suggester,select2覆写了这个方法
        setPlaceHolder: function () {
            if (this.element != null && this.element.placeholder !== undefined) {
                if (this.field != null && this.field.placeHolder != null) {
                    $(this.element).attr("placeholder", this.field.placeHolder);
                }
            }
        },


        //以下是动态动作的基类实现方法，需要特殊处理的控件可以覆写以下方法

        //设置父亲值当前值，目前会联动的suggester,select需要覆写该方法
        //dynamic action function (remark for analysis)
        setParentValue: function (parentValue) {
            if ((parentValue instanceof $Controls.Data.ValuePair) || (parentValue instanceof $Controls.Data.Uri)) {
                this.parentValue = parentValue.value;
            } else {
                this.parentValue = parentValue;
            }
        },

        visible: function (isVisible) {
            if (this.element == null) return;
            if (isVisible) {
                if (this.isReadable()) {
                    if (this.isWritable()) {
                        $(this.element).removeAttr("disabled")
                    }
                    $(this.element).show();
                    if (this.controlContainer != null) {
                        $(this.controlContainer).show();
                    }
                }
            } else {
                $(this.element).attr("disabled", "disabled").hide();
                if (this.controlContainer != null) {
                    $(this.controlContainer).hide();
                }
            }
        },

        //给所有控件子类的getValue里调用，如果发现值是null或者空值，就赋值“”
        //这里之所以要发现值为“”，就赋值“”是为了解决老版本IE8下的一个BUG，对于一个空值的hidden字段，element.value取出来看似一个空字符串，但是用JSON.stringify()时候会序列化出来“null”
        //也就是说这个空字符串不是一个真正的string，现在发现其是空串就赋值一个真正的string空串，就可以解决这个问题
        convertEmptyValue: function (val) {
            if (val == null || val === "") {
                return "";
            } else {
                return val;
            }
        },

        //返回控件所在行（定义为从这个控件向上找第一个tr或者第一个重复节的行或者第一个view）
        getRow: function () {
            var container = this.controlContainer,
                element = container == null ? this.element : container;
            return $(element).parents("tr,.infoplus_repeatingSection,.infoplus_view").first();
        },

        //设置最大长度maxLength
        setMaxLength: function () {
            if (this.field.settings != null) {
                if (this.field.settings.maxLength != null) {
                    var max = parseInt(this.field.settings.maxLength, 10);
                    if (!isNaN(max) && max !== 0) {
                        this.maxLength = max;
                    }
                }
            }
        },

        //获取控件所在的最近的重复节表group名字
        getGroupName: function () {
            if (this.field == null) return "";
            var field = this.field;
            //最外层,返回空串
            if (field.groupArray.length < 2) return "";
            //返回最后一层group名字
            return field.groupArray[field.groupArray.length - 1];
        },

        getGroupRowIndexName: function () {
            if (this.field == null) return "";
            var field = this.field;
            //最外层,返回空串
            if (field.groupArray.length < 2) return "";
            var groupName = field.groupArray[field.groupArray.length - 1];
            groupName = groupName.substr(0, 1).toUpperCase() + groupName.substr(1);
            return 'field' + groupName + "RowIndex" + $$.params.rowIndexSuffix;
        },

        getGroupCountName: function () {
            if (this.field == null) return "";
            var field = this.field;
            //最外层,返回空串
            if (field.groupArray.length < 2) return "";
            var groupName = field.groupArray[field.groupArray.length - 1];
            groupName = groupName.substr(0, 1).toUpperCase() + groupName.substr(1);
            return 'field' + groupName + "Count" + $$.params.rowIndexSuffix;
        },

        //判断是否是detail的控件
        isDetailControl: function () {
            if (this.element == null) return false;
            //判断依据是是否位于detailCell中或者在详细信息对话框中
            return $(this.element).parents(".detailCell").size() > 0 || $(this.element).parents(".detailSection").size() > 0;
        },

        //设置tooltip
        setTooltip: function (tooltip) {
            try {
                if (tooltip === '') {
                    this.tooltip = null;
                } else {
                    this.tooltip = $.parseJSON(tooltip);
                    if (typeof this.tooltip !== 'object') {
                        this.tooltip = {tip: tooltip, type: "info"};
                    }
                }
            } catch (e) {
                this.tooltip = {tip: tooltip, type: "info"};
            }
        },

        //显示tooltip,目前checkList,optionList,suggester,suggester2,remark需要覆写这个方法
        showTooltip: function () {
            if (this.tooltip == null || this.tooltip.tip === '') return;
            $(this.element).validationEngine("showPrompt", $IU.htmlEncode(this.tooltip.tip), this.tooltip.type, 'topLeft', true);
            $(this.element).one('blur', function () {
                $(this).validationEngine("hidePrompt");
            })
        },

        //设置修改class,目前只有check,radio需要覆写该方法
        markModified: function () {
            this.setClass("modified");
        },

        //去除修改class,目前只有check,radio需要覆写该方法
        clearModified: function () {
            this.removeClass("modified");
        },

        //给控件设置class
        setClass: function (className) {
            if (this.controlContainer != null) {
                $(this.controlContainer).addClass(className);
            } else {
                $(this.element).addClass(className);
            }
        },

        //去除class
        removeClass: function (className) {
            if (this.controlContainer != null) {
                $(this.controlContainer).removeClass(className);
            } else {
                $(this.element).removeClass(className);
            }
        }
    };

    define("InfoPlus.Controls.Control", control);

    //创建2个全局短变量
    window.$Controls = InfoPlus.Controls;
    window.$Control = InfoPlus.Controls.Control;

})(window);
/*
 * DateAdapter
 * @Author yech
 * @Since 2018/04/09
 */

(function (window, undefined) {

    var adapter = {};

    //缺省的日期创建选项，这些选项根据日期插件实际所需参数来设置，其中dateFormat必须固定为年-月-日的格式
    adapter.defaultOptions = {
        dateFormat: 'yy-mm-dd',     //日期格式，必须是年-月-日的格式
        changeYear: true,           //允许选择年份
        changeMonth: true,          //允许选择月份
        yearRange: 'c-100:c+50',    //年份选择范围

        //在日期选择的层弹出前调用，去除日期验证的class，防止日期选择层弹出触发input的blur事件引起验证
        //如果日期插件在获得焦点弹出日期选择层时不会触发blur，那么这里的事件处理就不是必须的
        beforeShow: function (input) {
            var validator = $(this).data($Control.DATA_VALIDATOR);
            if (validator === undefined || validator === null) return;
            if (validator.required === true || (validator.regEx && validator.prompt)) {
                $IU.removeElementValidateClass(this);
            }

            //if readonly,don't show the datepicker
            if ($(input).attr('readonly')) {
                return false;
            }
        },
        //在日期选择的层关闭前调用，重新添加日期验证的class
        //如果日期插件在获得焦点弹出日期选择层时不会触发blur，那么这里的事件处理就不是必须的
        onClose: function () {
            var validator = $(this).data($Control.DATA_VALIDATOR);
            if (validator === undefined || validator === null) return;
            if (validator.required === true || (validator.regEx && validator.prompt)) {
                $IU.addElementValidateClass(this);
                $$.params.renderForm.validationEngine("validateField", "#" + this.id);
            }
        }

    };

    /* 主题类中请覆写以下两个方法 */
    /**
     * 创建日期控件
     * @param element 创建日期控件的input元素
     * @param options 创建选项
     *        options.minDate 最小日期
     */
    adapter.create = function (element, options) {

        var checkDateFormat = function (format) {
            var field = $(element).data($Control.DATA_CONTROL_OBJECT).field;
            if (format == null || !$IU.isString(format)) return false;
            if (format.length != 8 || format.substr(0, 6) != 'yy-mm-') {
                $IU.debugTip($$.lt("date.errorFormat", field.name), 'warning');
                return false;
            }
            var day = parseInt(format.substr(6, 2), 10);
            if (isNaN(day) || day > 31) {
                $IU.debugTip($$.lt("date.errorFormat", field.name), 'warning');
                return false;
            }
            return true;

        };

        if (options.dateFormat != null) {
            var format = options.dateFormat;
            if (checkDateFormat(format)) {
                var day = parseInt(format.substr(7, 2), 10);
                options.showYearMonthOnly = true;
                options.showButtonPanel = true;
                options.onClose = function (dateText, inst) {
                    $(this).datepicker('setDate', new Date(inst.selectedYear, inst.selectedMonth, day));
                    adapter.defaultOptions.onClose();
                };
            }
            options.dateFormat = 'yy-mm-dd';


        }

        options = $.extend({}, adapter.defaultOptions, options);
        $(element).datepicker(options);
    };

    /**
     * 销毁日期控件
     * @param element 销毁日期控件的input元素
     */
    adapter.destroy = function (element) {
        $(element).datepicker("destroy");
    };

    /**
     * 设置只读
     * @param element
     * @param isReadOnly
     */
    adapter.setReadOnly = function (element, isReadOnly) {
        element.readOnly = (isReadOnly === true);
    };

    /* 主题类中请重新定义该类 */
    define("InfoPlus.Controls.Adapter.DateAdapter", adapter);


})(window);
﻿/*
 * Anchor
 * @Author yech 
 * @Since 2012/02/21
 */

(function (window, undefined) {
    var anchor = function (path, field, render, initValue, initDisplayValue) {
        $Control.call(this, $Control.CONTROL_TYPE_ANCHOR, path, field, render, initValue, initDisplayValue);
    };

    anchor.prototype = $.extend(new $Controls.Control(), {
        compatibleFieldTypes: [$Control.DATA_TYPE_STRING, $Control.DATA_TYPE_ANYURI, $Control.DATA_TYPE_CODE],
        ignoreValidation: true,
        allowFocus: false,
        name: "anchor",
        //elementClassName: "infoplus_anchorControl",
        clickFireFieldChange: true,

        getAnchorText: function (displayValue) {
            var field = this.field,
                settings = field.settings;
            var anchorText = $$.lt("anchor.defaultText");
            if (displayValue != null && displayValue !== '') {
                anchorText = displayValue;
            } else {
                if (settings != null && settings.displayText != null) {
                    anchorText = settings.displayText;
                }
            }
            return anchorText;
        },

        //override methods
        createElement: function () {
            //var action = this.field.action;
            //if (action == null) return null;
            var field = this.field;
            var endPoint = this.initValue;
            //if (endPoint == null) return null;
            if (endPoint == null || endPoint === '') {
                endPoint = "#";
            }
            var element = document.createElement("a");
            var $element = $(element);

            var anchorText = this.getAnchorText(this.initDisplayValue);

            //console.log("link text:" + anchorText);
            $element.text(anchorText);
            var externalLink = new InfoPlus.ExternalLink(endPoint, field.settings, anchorText);
            //element.setAttribute("title", action.description);
            element.setAttribute("href", "＃");
            element.setAttribute("target", externalLink.mode === InfoPlus.ExternalLink.MODE_SELF ? "_self" : "_blank");
            $element.data("href", endPoint).data($Control.DATA_EXTERNAL_LINK, externalLink);
            return element;
        },

        setValue: function (fieldValue, fieldDisplayValue) {
            var externalLink = $(this.element).data($Control.DATA_EXTERNAL_LINK);
            if (externalLink == null) return;
            if (fieldValue != null && fieldValue !== '') {
                externalLink.endPoint = fieldValue;
            } else {
                externalLink.endPoint = '#';
            }

            var anchorText = this.getAnchorText(fieldDisplayValue);
            $(this.element).text(anchorText);

        },

        getValue: function () {
            var externalLink = $(this.element).data($Control.DATA_EXTERNAL_LINK);
            if (externalLink == null) {
                switch (this.field.type) {
                    case $Control.DATA_TYPE_ANYURI:
                        return new $Controls.Data.Uri("");
                    case $Control.DATA_TYPE_CODE:
                        return new $Controls.Data.ValuePair("", "");
                }
                return "";
            }
            switch (this.field.type) {
                case $Control.DATA_TYPE_STRING:
                    return externalLink.endPoint === '#' ? "" : externalLink.endPoint;
                case $Control.DATA_TYPE_ANYURI:
                    return externalLink.endPoint === '#' ? new $Controls.Data.Uri("") : new $Controls.Data.Uri(externalLink.endPoint);
                case $Control.DATA_TYPE_CODE:
                    return externalLink.endPoint === '#' ? new $Controls.Data.ValuePair("", "") : new $Controls.Data.ValuePair(externalLink.endPoint, $(this.element).text());
            }
            return "";
        },

        getSortValue: function () {
            return this.element.innerHTML;
        },

        getAttributes: function () {
            if (this.field.type === $Control.DATA_TYPE_ANYURI) {
                var val = this.getValue();
                return $IU.getParamFromUrl(val.value);
            }
            return null;
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.Anchor.Events.events;
        },

        setDynamicReadOnly: function (isReadOnly) {
            if (isReadOnly) {
                $(this.element).addClass($Control.CLASSNAME_READONLY);
            } else {
                $(this.element).removeClass($Control.CLASSNAME_READONLY);
            }
        },

        setDynamicParallelReadOnly: function () {
            this.dynamicParallelReadonly = true;
            this.setDynamicReadOnly(true);
        }

    });

    define("InfoPlus.Controls.Anchor", anchor);

    var anchorEvents = {
        onMouseDown: function (e) {
            //屏蔽右键或中键，转换成左键
            if (e.which === 2 || e.which === 3) {
                e.stopImmediatePropagation();
                e.preventDefault();
                var instance = this;
                //这里稍作等待是为了onContextMenu执行完后再fireClick

                setTimeout(function () {
                    $IU.fireClick(instance);
                }, e.which === 3 ? 200 : 0);

                return false;
            }
        },

        onContextMenu: function () {
            return false;
        },

        onActionClick: function () {
            var anchorControl = $(this).data($Control.DATA_CONTROL_OBJECT),
                field = anchorControl.field,
                externalLink = $(this).data($Control.DATA_EXTERNAL_LINK),
                endPoint = externalLink.endPoint,
                instance = this;

            if (field == null) {
                return false;
            }

            //此处不可写的anchor不让点击感觉难以理解，又不知道是什么需求所致，先注释待观察
            /*
             if ($(anchorControl.element).hasClass($Control.CLASSNAME_READONLY)) {
             return false;
             }
             */


            if ($(instance).data("clickFromCode") === true) {
                $(instance).data("clickFromCode", false);
                return true;
            }

            var clickEvent = function () {

                instance.href = endPoint;
                externalLink.href = endPoint;

                return (!externalLink.openWindow());
            };


            if (field.placeHolder != null && field.placeHolder !== '') {
                if (!confirm(field.placeHolder)) {
                    return false;
                }
            }

            if (field.fieldChanging === true) {

                var data = {},
                    render = $$.getFormRender();
                data = render.save(data, anchorControl.isDetailControl());
                anchorControl.fieldChangeEvent(data).done(function () {
                    //fieldChange后将表单上所有控件执行一次动态样式和动态动作
                    render.doDynamicsAfterFieldChange();
                    //触发全局fieldChanged事件
                    $$.fieldChanged($$(anchorControl));
                    //触发control的fieldChanged事件
                    $$(anchorControl).fieldChanged();
                }).fail(function (data) {
                    //如果是canceled(messenger端抛错)，仍旧需要执行所有动态
                    if (data['errCode'] === 'EVENT_CANCELLED') {
                        render.doDynamicsAfterFieldChange();
                    }
                }).done(function () {
                    endPoint = $(instance).data($Control.DATA_EXTERNAL_LINK).endPoint;
                    if (clickEvent()) {
                        $(instance).data("clickFromCode", true);
                        $IU.fireClick(instance.id);
                        //有时fieldChange过长会造成fireClick失效(不会再回到onActionClick方法)，这里延时将clickFromCode设成false
                        //避免不回onActionClick方法造成后面再点击时逻辑上的错误
                        setTimeout(function () {
                            $(instance).data("clickFromCode", false);
                        }, 1000);
                    }
                });

                return false;
            } else {
                return clickEvent();
            }


        }
    };

    anchorEvents.events = [
        {type: "click", handler: anchorEvents.onActionClick},
        {type: "mousedown", handler: anchorEvents.onMouseDown},
        {type: "contextmenu", handler: anchorEvents.onContextMenu}
    ];

    define("InfoPlus.Controls.Anchor.Events", anchorEvents);

})(window);
﻿/*
 * Button
 * @Author yech 
 * @Since 2014/06/06
 */

(function (window, undefined) {
    var button = function (path, field, render, initValue, initDisplayValue) {
        //button总是能触发fieldChange，因为目前buttonClick走的是fieldChange这套代码
        field.fieldChanging = true;
        if (initDisplayValue == null || initDisplayValue === '') {
            if (field.settings != null && field.settings.displayText != null) {
                initDisplayValue = field.settings.displayText;
            }
        }
        $Control.call(this, $Control.CONTROL_TYPE_BUTTON, path, field, render, initValue, initDisplayValue);
    };

    button.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_STRING, $Control.DATA_TYPE_CODE],
        ignoreClass: true,
        ignoreValidation: true,
        name: "button",
        //elementClassName: "infoplus_buttonControl",
        clickFireFieldChange: true,
        hasHiddenElement: true,


        getButtonText: function (value, displayValue) {
            var field = this.field,
                settings = field.settings;
            if (displayValue != null && displayValue !== '') {
                return displayValue;
            }
            if (value != null && value !== '') {
                return value;
            }
            if (settings != null && settings.displayText != null) {
                return settings.displayText;
            }
            return $$.lt("button.defaultText");
        },

        //override methods
        createElement: function () {
            var element = document.createElement("button");
            var buttonText = this.getButtonText(this.initValue, this.initDisplayValue);

            var buttonContainer = document.createElement("div");
            //this.createHiddenElement(element, buttonContainer);
            element.setAttribute("type", "button");
            $(element).text(buttonText);

            buttonContainer.appendChild(element);
            this.controlContainer = buttonContainer;
            $(buttonContainer).addClass("infoplus_buttonControlContainer");
            return element;
        },

        setValue: function (fieldValue, fieldDisplayValue) {
            var buttonText = this.getButtonText(fieldValue, fieldDisplayValue);
            $(this.element).text(buttonText).val(fieldValue);
        },

        getValue: function () {
            var value = this.convertEmptyValue($(this.element).val());
            switch (this.field.type) {
                case $Control.DATA_TYPE_STRING:
                    return value;
                case $Control.DATA_TYPE_CODE:
                    return new $Controls.Data.ValuePair(value, $(this.element).text());
            }
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.Button.Events.events;
        },

        triggerChange: function () {
            var $element = $(this.element),
                hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT);
            if (this.onFieldChange) {
                $element.attr("disabled", "disabled");
            }
            $(hiddenInput).change();
        }

    });

    define("InfoPlus.Controls.Button", button);

    var buttonEvents = {
        onButtonClick: function () {
            var buttonControl = $(this).data($Control.DATA_CONTROL_OBJECT),
                field = buttonControl.field;

            if (field == null) {
                return false;
            }

            if (buttonControl.isReadOnly() || $(buttonControl.element).hasClass($Control.CLASSNAME_READONLY)) {
                return false;
            }

            if (field.placeHolder != null && field.placeHolder !== '') {
                $IU.yesNoBox(field.placeHolder, 400, function () {
                    buttonControl.triggerChange();
                });
            } else {
                buttonControl.triggerChange();
            }

            return false;

        }
    };

    buttonEvents.events = [
        {type: "click", handler: buttonEvents.onButtonClick}
    ];

    define("InfoPlus.Controls.Button.Events", buttonEvents);

})(window);
/*
 * LinkButton
 * @Author yech
 * @Since 2015/05/28
 */

(function (window, undefined) {
    var linkButton = function (path, field, render, initValue, initDisplayValue) {
        //button总是能触发fieldChange，因为目前buttonClick走的是fieldChange这套代码
        field.fieldChanging = true;
        if (initDisplayValue == null || initDisplayValue === '') {
            if (field.settings != null && field.settings.displayText != null) {
                initDisplayValue = field.settings.displayText;
            }
        }
        $Control.call(this, $Control.CONTROL_TYPE_LINK_BUTTON, path, field, render, initValue, initDisplayValue);
    };

    linkButton.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_STRING, $Control.DATA_TYPE_CODE],
        ignoreClass: true,
        ignoreValidation: true,
        name: "linkButton",
        //elementClassName: "infoplus_linkButtonControl",
        hasHiddenElement: true,
        clickFireFieldChange: true,

        getButtonText: function (value, displayValue) {
            var field = this.field,
                settings = field.settings;
            if (displayValue != null && displayValue !== '') {
                return displayValue;
            }
            if (value != null && value !== '') {
                return value;
            }
            if (settings != null && settings.displayText != null) {
                return settings.displayText;
            }
            return $$.lt("button.defaultText");
        },

        //override methods
        createElement: function () {
            var element = document.createElement("a"),
                $element = $(element);
            var buttonText = this.getButtonText(this.initValue, this.initDisplayValue);
            var buttonContainer = document.createElement("div");
            //this.createHiddenElement(element, buttonContainer);
            $element.text(buttonText);
            element.setAttribute("href", "＃");

            buttonContainer.appendChild(element);
            this.controlContainer = buttonContainer;
            $(buttonContainer).addClass("infoplus_buttonControlContainer");
            return element;
        },

        setValue: function (fieldValue, fieldDisplayValue) {
            var buttonText = this.getButtonText(fieldValue, fieldDisplayValue);
            $(this.element).text(buttonText).val(fieldValue);
        },

        getValue: function () {
            var value = this.convertEmptyValue($(this.element).val());
            switch (this.field.type) {
                case $Control.DATA_TYPE_STRING:
                    return value;
                case $Control.DATA_TYPE_CODE:
                    return new $Controls.Data.ValuePair(value, $(this.element).text());
            }
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.LinkButton.Events.events;
        },

        setDynamicReadOnly: function (isReadOnly) {
            if (isReadOnly) {
                $(this.element).addClass($Control.CLASSNAME_READONLY);
            } else {
                $(this.element).removeClass($Control.CLASSNAME_READONLY);
            }
        },

        setDynamicParallelReadOnly: function () {
            this.dynamicParallelReadonly = true;
            this.setDynamicReadOnly(true);
        },

        triggerChange: function () {
            var $element = $(this.element),
                hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT);
            if (this.onFieldChange) {
                $element.attr("disabled", "disabled");
            }
            $(hiddenInput).change();
        }

    });

    define("InfoPlus.Controls.LinkButton", linkButton);

    var buttonEvents = {
        onButtonClick: function () {

            if ($(this).is("[disabled]")) {
                return false;
            }

            var buttonControl = $(this).data($Control.DATA_CONTROL_OBJECT),
                field = buttonControl.field;

            if (field == null) {
                return false;
            }

            if (buttonControl.isReadOnly() || $(buttonControl.element).hasClass($Control.CLASSNAME_READONLY)) {
                return false;
            }


            if (field.placeHolder != null && field.placeHolder !== '') {
                $IU.yesNoBox(field.placeHolder, 400, function () {
                    buttonControl.triggerChange();
                });
            } else {
                buttonControl.triggerChange();
            }

            return false;
        }
    };

    buttonEvents.events = [
        {type: "click", handler: buttonEvents.onButtonClick}
    ];

    define("InfoPlus.Controls.LinkButton.Events", buttonEvents);

})(window);
﻿/*
 * CheckButton
 * @Author yech 
 * @Since 2018/04/11
 */

(function (window, undefined) {
    var checkButton = function (path, field, render, initValue, initDisplayValue, initAttributes) {
        if (initDisplayValue == null || initDisplayValue === '') {
            if (field.settings != null && field.settings.displayText != null) {
                initDisplayValue = field.settings.displayText;
            }
        }
        $Control.call(this, $Control.CONTROL_TYPE_CHECK_BUTTON, path, field, render, initValue, initDisplayValue, initAttributes);
    };

    checkButton.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_BOOL, $Control.DATA_TYPE_CODE],
        ignoreClass: true,
        ignoreValidation: true,
        name: "checkButton",
        //elementClassName: "infoplus_checkButtonControl",
        clickFireFieldChange: true,
        hasHiddenElement: true,


        getButtonText: function (displayValue) {
            var field = this.field,
                settings = field.settings;
            if (displayValue != null && displayValue !== '') {
                return displayValue;
            }
            if (settings != null && settings.displayText != null) {
                return settings.displayText;
            }
            return $$.lt("button.defaultText");
        },

        //override methods
        createElement: function () {
            var element = document.createElement("button");
            var buttonText = this.getButtonText(this.initDisplayValue);

            var buttonContainer = document.createElement("div");
            //this.createHiddenElement(element, buttonContainer);
            element.setAttribute("type", "button");
            $(element).text(buttonText);

            buttonContainer.appendChild(element);
            this.controlContainer = buttonContainer;
            $(buttonContainer).addClass("infoplus_checkButtonControlContainer");
            return element;
        },

        setValue: function (fieldValue, fieldDisplayValue, fromInit, attributes) {
            var buttonText = this.getButtonText(fieldDisplayValue);
            var hiddenInput = $(this.element).data($Control.DATA_ORIGIN_INPUT);
            hiddenInput.value = fieldValue;
            $(this.element).text(buttonText);
            this.setAttributes(attributes);
            this.setCheckClass();
        },

        toggleCheckValue: function () {
            if (this.field.type === $Control.DATA_TYPE_BOOL) {
                var hiddenInput = $(this.element).data($Control.DATA_ORIGIN_INPUT);
                if (hiddenInput.value === "true") {
                    hiddenInput.value = "false";
                } else {
                    hiddenInput.value = "true";
                }
            } else {
                var attributes = this.getAttributes();
                if (attributes == null) {
                    attributes = {checked: "true"};
                    //$(this.element).data($Control.DATA_ATTRIBUTES, attributes);
                    this.setAttributes(attributes);
                } else {
                    attributes["checked"] = attributes["checked"] === "true" ? "false" : "true";
                }
            }
            this.setCheckClass();
        },

        setCheckClass: function () {
            if (this.field.type === $Control.DATA_TYPE_BOOL) {
                var value = $(this.element).data($Control.DATA_ORIGIN_INPUT).value;
                if (value === "true") {
                    $(this.element).addClass("checked");
                } else {
                    $(this.element).removeClass("checked");
                }
            } else {
                var attributes = this.getAttributes();
                if (attributes != null && attributes["checked"] === "true") {
                    $(this.element).addClass("checked");
                } else {
                    $(this.element).removeClass("checked");
                }
            }
        },


        getValue: function () {
            var hiddenInput = $(this.element).data($Control.DATA_ORIGIN_INPUT);
            switch (this.field.type) {
                case $Control.DATA_TYPE_BOOL:
                    return hiddenInput.value.toLowerCase() === "true";
                case $Control.DATA_TYPE_CODE:
                    return new $Controls.Data.ValuePair($(hiddenInput).val(), $(this.element).text());
            }
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.CheckButton.Events.events;
        },

        triggerChange: function () {
            var $element = $(this.element),
                hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT);
            if (this.onFieldChange) {
                $element.attr("disabled", "disabled");
            }
            $(hiddenInput).change();
        }

    });

    define("InfoPlus.Controls.CheckButton", checkButton);

    var buttonEvents = {
        onButtonClick: function () {
            var buttonControl = $(this).data($Control.DATA_CONTROL_OBJECT),
                field = buttonControl.field;

            if (field == null) {
                return false;
            }

            if (buttonControl.isReadOnly() || $(buttonControl.element).hasClass($Control.CLASSNAME_READONLY)) {
                return false;
            }

            buttonControl.toggleCheckValue();

            if (field.placeHolder != null && field.placeHolder !== '') {
                $IU.yesNoBox(field.placeHolder, 400, function () {
                    buttonControl.triggerChange();
                });
            } else {
                buttonControl.triggerChange();
            }

            return false;

        }
    };

    buttonEvents.events = [
        {type: "click", handler: buttonEvents.onButtonClick}
    ];

    define("InfoPlus.Controls.CheckButton.Events", buttonEvents);

})(window);
﻿/*
 * Check
 * @Author yech 
 * @Since 2012/02/21
 */

(function (window, undefined) {

    var check = function (path, field, render, initValue) {
        $Control.call(this, $Control.CONTROL_TYPE_CHECKBOX, path, field, render, initValue, null);
    };

    check.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_BOOL],
        name: "check",
        //elementClassName: "infoplus_checkControl",


        //override methods
        createElement: function () {
            var element = document.createElement("input");
            element.type = "checkbox";
            return element;
        },

        //初始化，将checkbox后的文字放到一个label里，点击label也能选中这个checkbox
        initCheck: function () {
            if (this.element === undefined) return;
            var siblings = this.element.parentElement.childNodes;
            for (var i = 0, len = siblings.length; i < len; i++) {
                //寻找后面一个兄弟节点
                if (siblings[i] === this.element && i < len - 1) {
                    var nextNode = siblings[i + 1],
                        $nextNode = $(nextNode);
                    //后一个兄弟节点不是控件，并且内部也不包含控件，就将后面的节点包进一个label
                    if (!$nextNode.hasClass($Control.CLASSNAME_CONTROL) && $nextNode.find("." + $Control.CLASSNAME_CONTROL).length === 0) {
                        var label = document.createElement("label"),
                            $label = $(label);
                        $nextNode.detach().appendTo($label);
                        $label.attr("for", this.element.getAttribute("id")).insertAfter(this.element).addClass("infoplus_checkLabel");
                    }
                    break;
                }
            }
        },

        setValue: function (fieldValue) {
            if (fieldValue == null) fieldValue = false;
            if ($IU.isString(fieldValue)) {
                fieldValue = (fieldValue.toLowerCase() === "true");
            }
            this.element.checked = (fieldValue === true);
            if (fieldValue === true) {
                $(this.element).addClass("checked");
            } else {
                $(this.element).removeClass("checked");
            }
        },

        getValue: function () {
            return this.element.checked;
        },

        getSortValue: function () {
            return this.getValue() ? 1 : 0;
        },

        setReadOnly: function () {
            this.element.readOnly = true;
            this.element.disabled = true;
            $(this.element).addClass($Control.CLASSNAME_READONLY).addClass("disabled");
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.Check.Events.events;
        },

        markModified: function () {
            $(this.element).parent().addClass("modified");
        },

        clearModified: function () {
            $(this.element).parent().removeClass("modified");
        }
    });

    define("InfoPlus.Controls.Check", check);


    var checkEvents = {
        onCheckChange: function (event) {

            var checkControl = $(this).data($Control.DATA_CONTROL_OBJECT),
                field = checkControl.field;
            if ($(this).is(":checked")) {
                $(this).addClass("checked");
            } else {
                $(this).removeClass("checked");
            }


            if (field != null && field.placeHolder != null && field.placeHolder !== '') {

                if (checkControl.checkFromConfirm === true) {
                    checkControl.checkFromConfirm = false;
                    return;
                }

                var value = $(this).is(":checked");
                //设置回原值
                checkControl.setValue(!value);
                $IU.yesNoBox(field.placeHolder, 400, function () {
                    checkControl.setValue(value);
                    checkControl.checkFromConfirm = true;
                    //手工触发change事件
                    $(checkControl.element).change();
                });

                //让FormRender中注册的change事件不要触发
                event.stopImmediatePropagation();
                return false;
            }
        }
    };

    checkEvents.events = [
        {type: "change", handler: checkEvents.onCheckChange}
    ];

    define("InfoPlus.Controls.Check.Events", checkEvents);

})(window);
/**
 * Label
 * @Author yech
 * @Since 2015/11/30
 */
(function (window, undefined) {

    var findValueInItems = function (value, items) {
        for (var i = 0, len = items.length; i < len; i++) {
            if (value === items[i].id) return true;
        }
        return false;
    };

    var addItemsFromInitValue = function (initValue, initDisplayValue, items) {
        if (initValue.indexOf('\n') !== -1) {
            var values = initValue.split('\n');
        } else {
            values = initValue.split(',');
        }
        var names;
        if (initDisplayValue != null) {
            if (initDisplayValue.indexOf('\n') !== -1) {
                names = initDisplayValue.split('\n');
            } else {
                names = initDisplayValue.split(',');
            }
        }
        names = names || [];


        for (var i = 0, len = values.length; i < len; i++) {
            if (!findValueInItems(values[i], items)) {
                items.unshift({
                    id: values[i],
                    text: names[i] ? names[i] : values[i],
                    enabled: false
                })
            }
        }
    };

    var checkList = function (path, field, render, initValue, initDisplayValue) {
        var items = null;
        if (field.code != null) {
            var code = $$.codeManager.getCode(field.code);
            if (code != null) {
                items = [];
                for (var i = 0, len = code.items.length; i < len; i++) {
                    items.push({
                        id: code.items[i].codeId,
                        text: code.items[i].codeName,
                        enabled: code.items[i].enabled
                    });
                }
            }

            //如果field.code是外部代码表且items为空，那么需要调用接口获取
            if (items == null || ($IU.isArray(items) && items.length === 0)) {
                if (code == null || (code != null && code.codeType === 'External')) {
                    $$.codeManager.addRequestCode(field.code, field.name);
                }
            }
        }

        if (initValue != null && initValue !== '') {
            if (items == null) {
                items = [];
            }
            addItemsFromInitValue(initValue, initDisplayValue, items);
        }

        this.items = items;
        $Control.call(this, $Control.CONTROL_TYPE_CHECKBOX_LIST, path, field, render, initValue, initDisplayValue);
    };

    checkList.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_STRING],
        ignoreClass: true,
        autoTriggerFieldChangeEvent: false,
        name: "checkList",
        //elementClassName: "infoplus_checkListControl",
        validatorPromptPosition: "topLeft",
        hasHiddenElement: true,

        //override methods
        createElement: function () {
            var element = document.createElement("div");
            this.createHiddenElement(element);
            this.setDataSourceFromItems(element, this.items, true, true);
            return element;
        },


        setValue: function (fieldValue, fieldDisplayValue, fromInit) {

            if (fieldValue == null) fieldValue = '';
            var fireChangeEvent = !(!!fromInit) && this.shouldFireChangeEvent(fieldValue);
            var $element = $(this.element);
            var hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT);
            switch (this.field.type) {
                case $Control.DATA_TYPE_STRING:
                    hiddenInput.value = fieldValue;
                    $(hiddenInput).data("label", fieldDisplayValue);
                    break;
            }

            var valueArray = fieldValue.split(",");
            var isReadOnly = this.isReadOnly();

            $(this.element).find("input[type=checkbox]").each(function () {
                this.checked = $IU.arrayContains(valueArray, $IU.trimString($(this).val()));
                if (isReadOnly) {
                    if (this.checked) {
                        $(this).parent().addClass("checked").removeClass("unchecked");
                    } else {
                        $(this).parent().addClass("unchecked").removeClass("checked");
                    }
                } else {
                    if (this.checked) {
                        $(this).parent().addClass("checked");
                    } else {
                        $(this).parent().removeClass("checked");
                    }
                }
            });

            //设置哪个check
            if (fireChangeEvent) {
                setTimeout(function () {
                    $(hiddenInput).change();
                }, 0);
            }

        },

        // 初始化时候取checklist的值需要特殊处理,因为checklist可能是用datasource赋的数据源，初始化的时候datasource动作还没做，因而要用hidden里存放的值
        getValue: function (fromInit) {
            if (this.field == null || this.element == null) return "";
            if (fromInit === true) {
                var hiddenInput = $(this.element).data($Control.DATA_ORIGIN_INPUT);
                return hiddenInput.value;
            }
            var val = '', name = '';
            $(this.element).find("input[type=checkbox]").each(function () {
                if (this.checked) {
                    val += $IU.trimString(this.value) + ",";
                    name += $IU.trimString($(this).data("label")) + ",";
                }
            });
            if (val !== '') {
                val = val.substr(0, val.length - 1);
            }
            if (name !== '') {
                name = name.substr(0, name.length - 1);
            }
            // 这里的返回值做了特殊处理，因为想让fieldCheckList_Name上带有check的项的名称列表(逗号分隔),这样在打印或者导出模板中好处理，
            // 虽然数据类型只能是String，但是返回一个ValuePair，后台就能将_Name存下来了
            // 在动态中这么做也没问题，因为对于code数据类型$field和$field.value等价，就是取值,动态里面如果写了$fieldCheckXXX也不会有问题
            // 在2019-12-26发现这么做只有动态公式不会有问题(动态公式最终会调用CoreBoundControl里的setValue方法，如果发现value是一个ValuePair
            // 会调用control.setValue(value.value,value.displayValue,fromInit)，所以不会出错(相当于自动做了一次拆解))，
            // 如果是动态动作中取$field.xxx（其实就是想调用值的一些string函数）还是会有问题，因为此时的value是一个ValuePair，
            // 所以在Processor.js里的getControlValue方法又对此情况作了特殊处理，将ValuePair转回了string
            return new $Controls.Data.ValuePair(val, name);
        },

        getStringValue: function (fromInit) {
            var val = this.getValue(fromInit);
            if (val instanceof $Controls.Data.ValuePair) {
                return val.value;
            } else {
                return val;
            }
        },

        checkValid: function () {
            var result = true;
            if (this.isReadOnly()) return result;
            //如果有过时的数据被选中，那么就不合法
            $(this.element).find("input[type=checkbox]").each(function () {
                if (this.checked) {
                    if ($(this).parent().hasClass("deprecated")) {
                        result = false;
                    }
                }
            });
            return result;
        },

        setDataSourceFromItems: function (element, items, fromInit, fromCreate) {
            var hiddenInput = $(element).data($Control.DATA_ORIGIN_INPUT);
            var value = fromInit ? hiddenInput.value : this.getValue(),
                valueArray = (value == null || value === "") ? [] :
                    (value instanceof $Controls.Data.ValuePair ? value.value.split(",") : value.split(","));
            var isReadOnly = this.isReadOnly();

            $(element).children("label").remove();

            var hasDeprecatedItem = false;
            if ($IU.isArray(items)) {
                for (var i = 0, len = items.length; i < len; i++) {
                    var item = items[i];
                    var label = document.createElement("label"),
                        input = document.createElement("input"),
                        $label = $(label);
                    input.type = "checkbox";
                    input.value = item.id;
                    if ($IU.arrayContains(valueArray, $IU.trimString(item.id))) {
                        input.checked = true;
                        $label.addClass("checked");
                    }
                    $(input).data("label", item.text); //记录显示标签内容
                    var span = document.createElement("span");
                    $(span).text(item.text);
                    //var textNode = document.createTextNode(item.text);

                    $label.append(input);
                    //$label.append(textNode);
                    $label.append(span);

                    if (fromInit && !item.enabled && !isReadOnly) {
                        $label.addClass("deprecated");
                        var icon = document.createElement("i");
                        $(icon).addClass("i-icon-delete-outline");
                        $label.append(icon);
                        hasDeprecatedItem = true;

                    }
                    element.appendChild(label);
                }
            }
            //如果有过时的数据项，添加一个动态验证提示用户
            if (hasDeprecatedItem) {
                var dynamicValidation = {
                    key: "validation",
                    values: [{
                        value: "'" + $$.lt("checkList.deprecated") + "'",
                        condition: '!$' + this.field.name + "Ref.isValid",
                        builtIn: true
                    }]
                };

                var dynamics = this.render.properties;
                if (dynamics == null) {
                    this.render.properties = [dynamicValidation];
                } else {
                    dynamics.push(dynamicValidation);
                }
            }

            //createElement的时候不需要做动态样式，是因为
            //1.所有动态样式会在表单创建完毕后统一做，所以创建CheckList控件时候没必要先做
            //2.fromInit为true时候做动态，会执行getInitControlContext方法，那里面调用getInitControls,会在方法里面有个缓存$$.params.initControls(这个缓存只建立一次)
            //如果在createElement时候就做动态样式，那样会使表单上的初始化创建的控件并不完整(取决于这个CheckList创建的位置)，即$$.params.initControls里面存的控件并不完整，造成计算context错误
            //综上所以在createElement时候不调用setDynamicStyle方法设置动态样式，只需要在表单渲染完以及和用户有交互的时候如果设置了动态datasource，再做动态样式
            if (fromCreate !== true) {
                //因为checkList的动态style被解释为上面每个checkbox的动态style，所以当其源发生改变后，应该再做一次动态style
                this.setDynamicStyle($$.params.formRender, fromInit);
            }
        },

        showTooltip: function () {
            if (this.tooltip == null || this.tooltip.tip === '') return;
            var $element = $(this.element);
            $element.validationEngine("showPrompt", $IU.htmlEncode(this.tooltip.tip), this.tooltip.type, 'topLeft', true);
            $element.find("input").one('blur', function () {
                $element.validationEngine("hidePrompt");
            })
        },

        setStyle: function (name, value) {
            var $labels = $(this.element).find("label");
            for (var i = 0, len = $labels.length; i < len; i++) {
                var label = $labels[i];
                $IU.setDynamicStyle(label, name, value);
            }
        },

        //将height改成min-height
        specialSetting: function () {
            var style = $(this.element).attr("style");
            if (style != null) {
                style = style.toLowerCase();
                if (style.indexOf("height:") !== -1) {
                    $(this.element).css("min-height", $(this.element).css("height"));
                    $(this.element).css("height", "");
                }
            }
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.CheckList.Events.events;
        },

        setOptions: function (element, items) {
            //外部代码表数据到达后，先将items里有的初始化数据从this.items里移除（items里有显示值，初始化数据里是没有的）
            var removeInitItems = function (initItems) {
                for (var i = 0, len = items.length; i < len; i++) {
                    var item = items[i];
                    var foundIndex = -1;
                    for (var j = 0, l = initItems.length; j < l; j++) {
                        var oldItem = initItems[j];
                        if (oldItem.id === item.codeId) {
                            foundIndex = j;
                            break;
                        }
                    }
                    if (foundIndex !== -1) {
                        initItems.splice(foundIndex, 1);
                    }

                }
            };
            if (this.items == null) {
                this.items = [];
            }
            removeInitItems(this.items);
            for (var i = 0, len = items.length; i < len; i++) {
                var item = items[i];
                this.items.push({
                    id: item.codeId,
                    text: item.codeName,
                    enabled: item.enabled
                });
            }

            this.setDataSourceFromItems(this.element, this.items, true);
            //这里调用基类的setPermission方法，为的是设置只读或者可写情况下的checkbox的样式
            this.setPermission();
        },

        //以下是动态动作
        setDataSource: function (dataSource, fromInit) {
            this.items = [];
            if ($IU.isString(dataSource)) {
                if (dataSource.indexOf('\n') !== -1) {
                    var dataArray = dataSource.split('\n');
                } else {
                    dataArray = dataSource.split(',');
                }
                for (var i = 0, len = dataArray.length; i < len; i++) {
                    var data = dataArray[i];
                    this.items.push({
                        id: data,
                        text: data,
                        enabled: true
                    });
                }
            }

            if (fromInit && this.initValue !== '') {
                addItemsFromInitValue(this.initValue, this.initDisplayValue, this.items);
            }

            this.setDataSourceFromItems(this.element, this.items, fromInit);
            //这里调用基类的setPermission方法，为的是设置只读或者可写情况下的checkbox的样式
            this.setPermission();

            //设置datasource后更新hidden字段的值
            var $element = $(this.element);
            var $hiddenInput = $($element.data($Control.DATA_ORIGIN_INPUT));
            $hiddenInput.val(this.getStringValue()).change();
        },

        setDynamicReadOnly: function (isReadOnly) {
            if (isReadOnly) {
                $(this.element).find("input[type=checkbox]").each(function () {
                    if (this.checked) {
                        $(this).parent().addClass("checked").removeClass("unchecked");
                    } else {
                        $(this).parent().addClass("unchecked").removeClass("checked");
                    }
                    $(this).addClass($Control.CLASSNAME_READONLY);
                    this.disabled = true;
                });
            } else {
                $(this.element).find("label").removeAttr("class");
                $(this.element).find("input[type=checkbox]").each(function () {
                    $(this).removeClass($Control.CLASSNAME_READONLY);
                    this.disabled = false;
                });
            }
        }

    });

    define("InfoPlus.Controls.CheckList", checkList);

    var checkListEvents = {
        onClick: function () {

            var $label = $(this).parent();
            if ($(this).is(":checked")) {
                $label.addClass("checked");
            } else {
                $label.removeClass("checked");
                if ($label.hasClass("deprecated")) {
                    $label.animate({width: 0}, function () {
                        $label.remove();
                    });
                }
            }

            var hiddenInput = $(this).parent().siblings('input[type=hidden]');
            var control = $(hiddenInput).data($Control.DATA_CONTROL_OBJECT);
            $(hiddenInput).val(control.getStringValue());
            $(hiddenInput).change();
        }
    };

    checkListEvents.events = [
        {
            type: "click",
            selector: ".infoplus_checkListControl > label > input[type=checkbox]",
            handler: checkListEvents.onClick
        }
    ];

    define("InfoPlus.Controls.CheckList.Events", checkListEvents);

})(window);

﻿/*
 * Date
 * @Author yech 
 * @Since 2012/02/21
 */

(function (window, undefined) {

    var date = function (path, field, render, initValue) {
        $Control.call(this, $Control.CONTROL_TYPE_DATE, path, field, render, initValue, null);
    };

    date.DEFAULT_VALIDATOR_REGEX = "^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$";
    date.DEFAULT_VALIDATOR_PROMPT = $$.lt("date.validateMessage");

    date.INPUT_TYPE_DATE_SUPPORT = true;

    var useHtml5DateInput = function () {
        return $$.MOBILE && date.INPUT_TYPE_DATE_SUPPORT;
    };

    date.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_DATE],
        name: "date",
        //elementClassName: "infoplus_dateControl",

        //override methods
        createElement: function () {

            var checkDateFormat = function (field) {
                var format = field.format;
                if (format == null || !$IU.isString(format)) return false;
                if (format.length !== 8 || format.substr(0, 6) !== 'yy-mm-') {
                    $IU.debugTip($$.lt("date.errorFormat", field.name), 'warning');
                    return false;
                }
                var day = parseInt(format.substr(6, 2), 10);
                if (isNaN(day) || day > 31) {
                    $IU.debugTip($$.lt("date.errorFormat", field.name), 'warning');
                    return false;
                }
                return true;

            };

            if (this.field.format != null && this.field.format !== '') {
                if (checkDateFormat(this.field)) {
                    this.monthOnly = true;
                    this.monthDay = this.field.format.substr(6, 2);
                }
            }

            var element = document.createElement("input");
            //移动版采用原生的日期输入
            if (useHtml5DateInput()) {
                //ie不支持type=date，如果设置出错，那么就还是用jqueryui的日期控件
                try {
                    element.type = this.monthOnly ? 'month' : 'date';
                } catch (e) {
                    date.INPUT_TYPE_DATE_SUPPORT = false;
                    element.type = "text";
                }
            } else {
                element.type = "text";
            }
            //设置关闭自动填充功能，防止自动填充的弹出层挡住日期控件弹出的选择框
            $(element).attr("autocomplete", "off");
            return element;
        },

        setValue: function (fieldValue) {
            if (fieldValue == null) fieldValue = '';
            if (fieldValue !== "" && isNaN(fieldValue) === false) {
                var value = $IU.unixTimeToDateString(fieldValue);
                this.element.value = (useHtml5DateInput() && this.monthOnly) ? value.substr(0, 7) : value;
            } else {
                this.element.value = '';
            }
        },

        getValue: function () {
            var elementValue = (useHtml5DateInput() && this.monthOnly) ? (this.element.value + '-' + this.monthDay) : this.element.value;
            var val = this.convertEmptyValue(elementValue);
            val = $IU.dateStringToUnixTime(val);
            if (val != null && val !== "" && !isNaN(val)) {
                return val;
            } else {
                return "";
            }
        },

        getSortValue: function () {
            var val = this.getValue();
            return val === "" ? 0 : val;
        },

        //初始加入日期验证
        addDefaultValidator: function () {
            var permission = this.field.permission || "";
            if (permission.indexOf("r") !== -1 && permission.indexOf("w") === -1) {
                //这个字段是只读的，不必验证
                return;
            }

            var $element = $(this.element);
            var validator = $element.data($Control.DATA_VALIDATOR);
            if (validator == null) {
                $element.data($Control.DATA_VALIDATOR, {
                    required: this.field.notNull,
                    regEx: date.DEFAULT_VALIDATOR_REGEX,
                    prompt: date.DEFAULT_VALIDATOR_PROMPT,
                    builtIn: true
                });
            } else {
                if (validator.regEx == null || validator.regEx === '') {
                    validator.regEx = date.DEFAULT_VALIDATOR_REGEX;
                    validator.prompt = date.DEFAULT_VALIDATOR_PROMPT;
                    validator.builtIn = (!validator.required === true);
                }
            }
        },

        specialSetting: function () {
            this.initDatePicker();
            this.addDefaultValidator();
        },

        initDatePicker: function () {
            var permission = this.field.permission || "";
            if (permission.indexOf("w") !== -1) {
                var fieldName = this.field.name;
                //如果是To的日期，延时调用initDatePickerOption,为了确保From的日期已经渲染
                if (fieldName.substr(fieldName.length - 2) === 'To') {
                    var instance = this;
                    setTimeout(function () {
                        instance.initDatePickerOption();
                    }, 500);
                } else {
                    this.initDatePickerOption();
                }
            }
        },

        reInitDatePicker: function () {
            if (useHtml5DateInput()) return;
            var permission = this.field.permission || "";
            if (permission.indexOf("w") !== -1) {
                $(this.element).datepicker("destroy");
                this.initDatePickerOption();
            }
        },

        initDatePickerOption: function (options) {
            /*
            var defaultOptions = {
                dateFormat: 'yy-mm-dd',
                changeYear: true,   // 允许选择年份
                changeMonth: true,
                beforeShow: this.onDatePickerBeforeShow,
                onClose: this.onDatePickerClose,
                yearRange: 'c-100:c+50'
            };
            this.options = $.extend({}, defaultOptions, options);
            */

            if (options == null) {
                options = {};
            }
            //如果是结尾是To的日期，检查时候有对应的From的日期，如果From的日期有值，那么需要设定To的日期可选最小值
            if (options["minDate"] == null) {
                var fieldName = this.field.name;
                if (fieldName.substr(fieldName.length - 2) === 'To') {
                    var pos = fieldName.lastIndexOf('To');
                    var fromName = fieldName.substr(0, pos) + fieldName.substr(pos).replace(/To/, 'From') + this.path;
                    var $fromDateElement = $$.params.renderForm.find("." + this.getElementClassName() + "[name='" + fromName + "'");
                    if ($fromDateElement.length > 0) {
                        var value = $fromDateElement.data($Control.DATA_CONTROL_OBJECT).getValue();
                        if (useHtml5DateInput()) {
                            if (value !== '') {
                                $(this.element).attr("min", $IU.unixTimeToDateString(value));
                            } else {
                                $(this.element).attr("min", "");
                            }
                        } else {
                            if (value !== '') {
                                options["minDate"] = $IU.unixTimeToDate(value);
                            }
                        }
                    }
                }
            }
            if (useHtml5DateInput()) return;
            var permission = this.field.permission || "";
            if (permission.indexOf("w") !== -1) {
                //$(this.element).datepicker(this.options);
                if (this.field.format != null && this.field.format !== '') {
                    options.dateFormat = this.field.format;
                }
                InfoPlus.Controls.Adapter.DateAdapter.create(this.element, options);
            }
        },

        onDatePickerBeforeShow: function (input, inst) {
            var validator = $(this).data($Control.DATA_VALIDATOR);
            if (validator === undefined || validator === null) return;
            if (validator.required === true || (validator.regEx && validator.prompt)) {
                $IU.removeElementValidateClass(this);
            }
            //if readonly,don't show the datepicker
            if ($(input).attr('readonly')) {
                return false;
            }
        },

        onDatePickerClose: function (dateText, inst) {
            var validator = $(this).data($Control.DATA_VALIDATOR);
            if (validator === undefined || validator === null) return;
            if (validator.required === true || (validator.regEx && validator.prompt)) {
                $IU.addElementValidateClass(this);
                $$.params.renderForm.validationEngine("validateField", "#" + this.id);
            }
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.Date.Events.events;
        },

        setDynamicReadOnly: function (isReadOnly) {
            InfoPlus.Controls.Adapter.DateAdapter.setReadOnly(this.element, isReadOnly);
        }

    });

    define("InfoPlus.Controls.Date", date);

    var dateEvents = {
        //这里的逻辑是：如果遇到表单上有From,To配对出现的两个日期，那么当From日期选择好后，To日期只能从From选择的那个日期往后可以选
        //但反过来不限制，防止用户使用时候产生困惑
        onChange: function () {
            var control = $(this).data($Control.DATA_CONTROL_OBJECT),
                value = control.getValue();
            var fieldName = control.field.name;
            if (fieldName.length > 4) {
                //字段以From结尾，那么寻找同名To结尾的日期控件
                if (fieldName.substr(fieldName.length - 4) === 'From') {
                    var pos = fieldName.lastIndexOf('From');
                    var toName = fieldName.substr(0, pos) + fieldName.substr(pos).replace(/From/, 'To') + control.path;
                    var $toDateElement = $$.params.renderForm.find("." + control.getElementClassName() + "[name='" + toName + "'");
                    if ($toDateElement.length > 0) {
                        if (useHtml5DateInput()) {
                            if (value !== '') {
                                $toDateElement.attr("min", $IU.unixTimeToDateString(value));
                            } else {
                                $toDateElement.attr("min", "");
                            }
                        } else {
                            InfoPlus.Controls.Adapter.DateAdapter.destroy($toDateElement[0]);
                            //$toDateElement.datepicker("destroy");
                            if (value !== '') {
                                $toDateElement.data($Control.DATA_CONTROL_OBJECT).initDatePickerOption({
                                    minDate: $IU.unixTimeToDate(value)
                                })
                            } else {
                                $toDateElement.data($Control.DATA_CONTROL_OBJECT).initDatePickerOption()
                            }
                        }
                    }
                }
            }
        }
    };

    dateEvents.events = [
        {type: "change", handler: dateEvents.onChange}
    ];

    define("InfoPlus.Controls.Date.Events", dateEvents);

})(window);
/*
 * Time
 * @Author yech
 * @Since 2017/08/22
 */

(function (window, undefined) {

    var time = function (path, field, render, initValue) {
        $Control.call(this, $Control.CONTROL_TYPE_TIME, path, field, render, initValue, null);
    };
    time.DEFAULT_VALIDATOR_REGEX = "^(([1-9]{1})|([0-1][0-9])|([1-2][0-3])):([0-5][0-9])$";
    time.DEFAULT_VALIDATOR_PROMPT = $$.lt("time.validateMessage");

    time.INPUT_TYPE_TIME_SUPPORT = true;

    var useHtml5TimeInput = function () {
        return $$.MOBILE && time.INPUT_TYPE_TIME_SUPPORT;
    };

    time.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_TIME],
        name: "time",
        //elementClassName: "infoplus_timeControl",

        //override methods
        createElement: function () {
            var element = document.createElement("input");
            //移动版采用原生的日期输入
            if (useHtml5TimeInput()) {
                //ie不支持type=time，如果设置出错，那么就还是用clockpicker控件
                try {
                    element.type = "time";
                } catch (e) {
                    time.INPUT_TYPE_DATE_SUPPORT = false;
                    element.type = "text";
                }
            } else {
                element.type = "text";
            }


            //设置关闭自动填充功能，防止自动填充的弹出层挡住时间控件弹出的选择框
            $(element).attr("autocomplete", "off");
            return element;
        },

        setValue: function (fieldValue) {
            if (fieldValue == null) fieldValue = '';
            if (fieldValue !== "" && isNaN(fieldValue) === false) {
                this.element.value = $IU.unixTimeToTimeString(fieldValue);
            } else {
                this.element.value = '';
            }
        },

        getValue: function () {
            var val = this.convertEmptyValue(this.element.value);
            if (val === "" || val == null) {
                return "";
            }
            val = $IU.timeStringToUnixTime(val);
            if (val != null && val !== "" && !isNaN(val)) {
                return val;
            } else {
                return "";
            }
        },

        getSortValue: function () {
            var val = this.getValue();
            return val === "" ? 0 : val;
        },

        //初始加入时间验证
        addDefaultValidator: function () {
            var permission = this.field.permission || "";
            if (permission.indexOf("r") !== -1 && permission.indexOf("w") === -1) {
                //这个字段是只读的，不必验证
                return;
            }

            var $element = $(this.element);
            var validator = $element.data($Control.DATA_VALIDATOR);
            if (validator == null) {
                $element.data($Control.DATA_VALIDATOR, {
                    required: this.field.notNull,
                    regEx: time.DEFAULT_VALIDATOR_REGEX,
                    prompt: time.DEFAULT_VALIDATOR_PROMPT,
                    builtIn: true
                });
                $IU.addElementValidateClass(this.element);
            } else {
                if (validator.regEx == null || validator.regEx === '') {
                    validator.regEx = time.DEFAULT_VALIDATOR_REGEX;
                    validator.prompt = time.DEFAULT_VALIDATOR_PROMPT;
                    validator.builtIn = (!validator.required === true);
                }
            }
        },

        specialSetting: function () {
            if (!useHtml5TimeInput()) {
                this.initClockPicker();
            }
            this.addDefaultValidator();
        },

        initClockPicker: function () {
            if (useHtml5TimeInput()) return;
            var permission = this.field.permission || "";
            if (permission.indexOf("w") !== -1) {
                var $element = $(this.element);
                var clockPicker = $(this.element).clockpicker({
                    autoclose: true,
                    afterDone: function () {
                        //手动触发change事件，因为发现点击选择时间后不自动触发change
                        $element.change();
                    }
                });
                $element.data("clock", clockPicker);
            }
        },

        setDynamicReadOnly: function (isReadOnly) {
            var element = this.element;
            if (isReadOnly) {
                if (!useHtml5TimeInput()) {
                    var clockPicker = $(element).data("clock");
                    if (clockPicker != null) {
                        clockPicker.clockpicker('remove');
                        $(element).removeData("clock")
                    }
                }
            } else {
                $(element).removeClass($Control.CLASSNAME_READONLY);
                this.initClockPicker();
            }
        }

    });

    define("InfoPlus.Controls.Time", time);


})(window);
﻿/*
 * Edit
 * @Author yech 
 * @Since 2012/02/17
 */

(function (window, undefined) {

    var edit = function (path, field, render, initValue) {
        $Control.call(this, $Control.CONTROL_TYPE_EDIT, path, field, render, initValue, null);
    };

    edit.DEFAULT_VALIDATOR_REGEX_INTEGER = "^-?\\d+$";
    edit.DEFAULT_VALIDATOR_REGEX_DOUBLE = "^(-?\\d+)(\\.\\d+)?$";
    edit.DEFAULT_VALIDATOR_PROMPT_INTEGER = $$.lt("edit.validateIntegerMessage");
    edit.DEFAULT_VALIDATOR_PROMPT_DOUBLE = $$.lt("edit.validateFloatMessage");

    edit.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_STRING, $Control.DATA_TYPE_INT, $Control.DATA_TYPE_DOUBLE],
        name: "edit",
        //elementClassName: "infoplus_editControl",

        //override methods
        createElement: function () {
            var element = document.createElement("input");
            element.type = "text";
            if (this.field.placeHolder != null) {
                $(element).attr("placeholder", this.field.placeHolder);
            }
            return element;
        },

        //初始加入整型或浮点型验证
        addDefaultValidator: function () {
            var permission = this.field.permission || "";
            if (permission.indexOf("r") !== -1 && permission.indexOf("w") === -1) {
                //这个字段是只读的，不必验证
                return;
            }

            var fieldType = this.field.type;
            if (fieldType !== $Control.DATA_TYPE_INT && fieldType !== $Control.DATA_TYPE_DOUBLE) {
                //不是整型或者浮点数类型不用加内置验证
                return;
            }

            var $element = $(this.element);
            var validator = $element.data($Control.DATA_VALIDATOR);
            if (validator == null) {
                if (fieldType === $Control.DATA_TYPE_INT) {
                    $element.data($Control.DATA_VALIDATOR, {
                        required: this.field.notNull,
                        regEx: edit.DEFAULT_VALIDATOR_REGEX_INTEGER,
                        prompt: edit.DEFAULT_VALIDATOR_PROMPT_INTEGER,
                        builtIn: true
                    });
                } else {
                    $element.data($Control.DATA_VALIDATOR, {
                        required: this.field.notNull,
                        regEx: edit.DEFAULT_VALIDATOR_REGEX_DOUBLE,
                        prompt: edit.DEFAULT_VALIDATOR_PROMPT_DOUBLE,
                        builtIn: true
                    });
                }

                $IU.addElementValidateClass(this.element);
            } else {
                if (validator.regEx == null || validator.regEx === '') {
                    validator.regEx = (fieldType === $Control.DATA_TYPE_INT) ? edit.DEFAULT_VALIDATOR_REGEX_INTEGER : edit.DEFAULT_VALIDATOR_REGEX_DOUBLE;
                    validator.prompt = (fieldType === $Control.DATA_TYPE_INT) ? edit.DEFAULT_VALIDATOR_PROMPT_INTEGER : edit.DEFAULT_VALIDATOR_PROMPT_DOUBLE;
                    //如果勾选过必填，那么即使加入了内置的数字验证也认为不是内置的，用于存盘时候
                    validator.builtIn = (!validator.required === true);
                    $IU.addElementValidateClass(this.element);
                }
            }
        },

        specialSetting: function () {
            this.setMaxLength();
            if (this.maxLength != null) {
                $(this.element).attr("maxlength", this.maxLength);
            }
            this.addDefaultValidator();
        },

        setValue: function (fieldValue) {
            if (fieldValue == null) fieldValue = '';
            switch (this.field.type) {
                case $Control.DATA_TYPE_STRING:
                    if (this.maxLength != null) {
                        fieldValue = fieldValue.substr(0, this.maxLength);
                    }
                    $(this.element).val(fieldValue);
                    break;
                case $Control.DATA_TYPE_INT:
                    var intValue = parseInt(fieldValue, 10);
                    $(this.element).val(isNaN(intValue) ? "" : intValue);
                    break;
                case $Control.DATA_TYPE_DOUBLE:
                    var floatValue = parseFloat(fieldValue);
                    $(this.element).val(isNaN(floatValue) ? "" : floatValue);
                    break;
            }
        },

        getValue: function () {
            if (this.field == null || this.element == null) return "";
            var val = this.convertEmptyValue(this.element.value);
            switch (this.field.type) {
                case $Control.DATA_TYPE_STRING:
                    val = val || "";
                    if (this.maxLength != null) {
                        val = val.substr(0, this.maxLength);
                    }
                    return val;
                case $Control.DATA_TYPE_INT:
                    var intValue = parseInt(val);
                    return isNaN(intValue) ? "" : intValue;
                case $Control.DATA_TYPE_DOUBLE:
                    var floatValue = parseFloat(val);
                    return isNaN(floatValue) ? "" : floatValue;
            }
            return "";
        },

        getSortValue: function () {
            var value = this.getValue();
            if ((this.field.type === $Control.DATA_TYPE_INT || this.field.type === $Control.DATA_TYPE_DOUBLE) && value === "") {
                return 0;
            } else {
                return value;
            }
        }
    });

    define("InfoPlus.Controls.Edit", edit);

})(window);
﻿/*
 * Hidden
 * @Author yech 
 * @Since 2012/02/21
 */

(function (window, undefined) {

    var hidden = function (path, field, render, initValue, initDisplayValue, initAttributes) {
        $Control.call(this, $Control.CONTROL_TYPE_HIDDEN, path, field, render, initValue, initDisplayValue, initAttributes);
    };

    hidden.ERROR_CODE_PERMISSION_DENIED = 1;
    hidden.ERROR_CODE_POSITION_UNAVAILABLE = 2;
    hidden.ERROR_CODE_TIMEOUT = 3;

    hidden.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_STRING, $Control.DATA_TYPE_ANYURI, $Control.DATA_TYPE_INT,
            $Control.DATA_TYPE_DOUBLE, $Control.DATA_TYPE_BOOL, $Control.DATA_TYPE_DATE, $Control.DATA_TYPE_USER,
            $Control.DATA_TYPE_ORGANIZE, $Control.DATA_TYPE_CODE, $Control.DATA_TYPE_THING, $Control.DATA_TYPE_FILE,
            $Control.DATA_TYPE_LOCATION],
        autoTriggerFieldChangeEvent: false,
        ignoreValidation: true,
        allowFocus: false,
        name: "hidden",
        //elementClassName: "infoplus_hiddenControl",

        //override methods
        createElement: function () {
            var element = document.createElement("input");
            element.type = "hidden";
            return element;
        },

        getAttributes: function () {
            if (this.field.type === $Control.DATA_TYPE_ANYURI) {
                var val = this.getValue();
                return $IU.getParamFromUrl(val.value);
            }
            return $(this.element).data($Control.DATA_ATTRIBUTES);
        },

        setValue: function (fieldValue, fieldDisplayValue, fromInit, attributes) {

            if (fieldValue == null) fieldValue = '';
            var fireChangeEvent = !(!!fromInit) && this.shouldFireChangeEvent(fieldValue);
            var $hidden = $(this.element);
            $hidden.val(fieldValue);
            this.setAttributes(attributes);
            $hidden.data($Control.DATA_DISPLAY_VALUE, fieldDisplayValue);

            if (fireChangeEvent) {
                setTimeout(function () {
                    $hidden.change();
                }, 0);
            }

        },

        getValue: function () {
            if (this.field == null || this.element == null) return "";
            var val = this.convertEmptyValue(this.element.value),
                displayValue = $(this.element).data($Control.DATA_DISPLAY_VALUE);
            switch (this.field.type) {
                case $Control.DATA_TYPE_STRING:
                case $Control.DATA_TYPE_XHTML:
                case $Control.DATA_TYPE_FILE:
                    return val;
                case $Control.DATA_TYPE_ANYURI:
                    return new $Controls.Data.Uri(val);
                case $Control.DATA_TYPE_INT:
                    var intValue = parseInt(val);
                    return isNaN(intValue) ? "" : intValue;
                case $Control.DATA_TYPE_DOUBLE:
                    var floatValue = parseFloat(val);
                    return isNaN(floatValue) ? "" : floatValue;
                case $Control.DATA_TYPE_BOOL:
                    return val.toLowerCase() === "true";
                case $Control.DATA_TYPE_DATE:
                    var dateValue = parseInt(val);
                    return isNaN(dateValue) ? "" : dateValue;
                case $Control.DATA_TYPE_USER:
                case $Control.DATA_TYPE_ORGANIZE:
                case $Control.DATA_TYPE_CODE:
                case $Control.DATA_TYPE_LOCATION:
                    return new $Controls.Data.ValuePair(val, displayValue);
                case $Control.DATA_TYPE_THING:
                    return new $Controls.Data.Thing(val, displayValue);
            }
            return "";
        },

        getSortValue: function () {
            var value = this.getValue();
            var type = this.field.type;
            if (type === $Control.DATA_TYPE_BOOL) {
                return value ? 1 : 0;
            }
            if ((type === $Control.DATA_TYPE_INT || type === $Control.DATA_TYPE_DOUBLE || type === $Control.DATA_TYPE_DATE) && value === "") {
                return 0;
            }
            if (type === $Control.DATA_TYPE_USER || type === $Control.DATA_TYPE_ORGANIZE || type === $Control.DATA_TYPE_CODE || type === $Control.DATA_TYPE_THING || type === $Control.DATA_TYPE_LOCATION) {
                return value.displayValue;
            }
            return value;
        },

        specialSetting: function () {
            var instance = this;
            if (this.field.type === $Control.DATA_TYPE_LOCATION) {
                if (this.isWritable() && $IU.isEmptyStr(this.initValue)) {
                    if (navigator.geolocation != null) {
                        navigator.geolocation.getCurrentPosition(function (position) {
                            instance.setValue(position.coords.longitude + "," + position.coords.latitude, $$.lt("map.autoPosition"), true);
                        }, function (error) {
                            switch (error.code) {
                                case hidden.ERROR_CODE_PERMISSION_DENIED://用户不允许地理定位
                                    $IU.messageBox(null, $$.lt("map.geolocation.denied"), null, 300);
                                    break;
                                case hidden.ERROR_CODE_POSITION_UNAVAILABLE://无法获取当前位置
                                    $IU.messageBox(null, $$.lt("map.geolocation.unavailable"), null, 300);
                                    break;
                                case hidden.ERROR_CODE_TIMEOUT://操作超时
                                    $IU.messageBox(null, $$.lt("map.geolocation.timeout"), null, 300);
                                    break;
                            }
                        }, {
                            enableHighAccuracy: true,
                            maximumAge: 0
                        });
                    }
                }
            }
        }


    });

    define("InfoPlus.Controls.Hidden", hidden);

})(window);
﻿/*
 * Label
 * @Author yech 
 * @Since 2012/02/21
 */

(function (window, undefined) {

    var label = function (path, field, render, initValue, initDisplayValue, initAttributes, isConverted) {
        this.isConverted = (isConverted === true);
        $Control.call(this, $Control.CONTROL_TYPE_LABEL, path, field, render, initValue, initDisplayValue, initAttributes);
    };

    label.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_STRING, $Control.DATA_TYPE_XHTML, $Control.DATA_TYPE_ANYURI,
            $Control.DATA_TYPE_INT, $Control.DATA_TYPE_DOUBLE, $Control.DATA_TYPE_BOOL, $Control.DATA_TYPE_DATE,
            $Control.DATA_TYPE_TIME, $Control.DATA_TYPE_DATETIME, $Control.DATA_TYPE_USER,
            $Control.DATA_TYPE_ORGANIZE, $Control.DATA_TYPE_CODE, $Control.DATA_TYPE_THING, $Control.DATA_TYPE_FILE,
            $Control.DATA_TYPE_LOCATION],
        ignoreClass: true,
        ignoreValidation: true,
        allowFocus: false,
        autoTriggerFieldChangeEvent: false,
        name: "label",
        //elementClassName: "infoplus_labelControl",
        hasHiddenElement: true,
        isConverted: false,

        //override methods
        createElement: function () {
            var labelContainer = document.createElement("div"),
                $labelContainer = $(labelContainer);

            this.controlContainer = labelContainer;
            $labelContainer.addClass("infoplus_labelControlContainer");

            if (this.isConverted && $$.params.tenantReadOnlyStyle === 'Underline') {
                $labelContainer.addClass("underline");
            }

            var element;
            if (this.field.type === $Control.DATA_TYPE_XHTML) {
                element = document.createElement("iframe");
                element.setAttribute('scrolling', 'auto');
                element.setAttribute('frameborder', '0');
                $labelContainer.addClass("iframe");
            } else {
                element = document.createElement("div");
            }

            //this.createHiddenElement(element, labelContainer);
            $labelContainer.append(element);
            return element;

        },

        getAttributes: function () {
            if (this.field.type === $Control.DATA_TYPE_ANYURI) {
                var val = this.getValue();
                return $IU.getParamFromUrl(val.value);
            }
            return $(this.element).data($Control.DATA_ATTRIBUTES);
        },

        setValue: function (fieldValue, fieldDisplayValue, fromInit, attributes) {

            if (fieldValue == null) fieldValue = '';
            if (fieldDisplayValue == null) {
                fieldDisplayValue = '';
                if (this.field.type === $Control.DATA_TYPE_CODE) {
                    if (this.items != null) {
                        for (var i = 0, len = this.items.length; i < len; i++) {
                            var item = this.items[i];
                            if (item.codeId === fieldValue) {
                                fieldDisplayValue = item.codeName;
                            }
                        }
                    }
                }
            }

            var fireChangeEvent = !(!!fromInit) && this.shouldFireChangeEvent(fieldValue);

            var $element = $(this.element);
            var hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT);
            hiddenInput.value = fieldValue;
            switch (this.field.type) {
                case $Control.DATA_TYPE_DATE:
                    if (fieldValue !== "" && isNaN(fieldValue) === false) {
                        fieldValue = parseInt(fieldValue, 10);
                        $element.text($IU.unixTimeToDateString(fieldValue));
                    } else {
                        $element.text("");
                    }
                    break;
                case $Control.DATA_TYPE_TIME:
                    if (fieldValue !== "" && isNaN(fieldValue) === false) {
                        fieldValue = parseInt(fieldValue, 10);
                        $element.text($IU.unixTimeToTimeString(fieldValue));
                    } else {
                        $element.text("");
                    }
                    break;
                case $Control.DATA_TYPE_DATETIME:
                    if (fieldValue !== "" && isNaN(fieldValue) === false) {
                        fieldValue = parseInt(fieldValue, 10);
                        if ($IU.isSameTimezone()) {
                            $element.text($IU.unixTimeToLocalTimeString(fieldValue));
                        } else {
                            var span = document.createElement("span");
                            $(span).text($IU.unixTimeToLocalTimeString(fieldValue));
                            $element.append(span);
                            i = document.createElement("i");
                            var $help = $(i);
                            $help.addClass("i-icon-clock-o help");
                            $element.append(i);

                            var helpContent = $$.lt("label.timezone") + ":" + $IU.getTimezoneString(-$IU.stdTimezoneOffset()) + "<br>";
                            helpContent += $IU.getTimezoneString($$.params.tenantTimeZoneOffset / 60) + " " + $IU.unixTimeToString(fieldValue);
                            $help.attr("original-title", helpContent);
                            $help.tipsy({
                                html: true,
                                fade: true,
                                gravity: 'w',
                                trigger: 'manual',
                                opacity: 0.9
                            });

                            $help.click(function () {
                                $(this).tipsy("show");
                            }).mouseenter(function () {
                                $(this).tipsy("show");
                            }).mouseleave(function () {
                                $(this).tipsy("hide");
                            });
                        }
                    } else {
                        $element.text("");
                    }
                    break;
                case $Control.DATA_TYPE_USER:
                case $Control.DATA_TYPE_ORGANIZE:
                case $Control.DATA_TYPE_CODE:
                case $Control.DATA_TYPE_LOCATION:
                    $element.text(fieldDisplayValue).data($Control.DATA_DISPLAY_VALUE, fieldDisplayValue);
                    break;
                case $Control.DATA_TYPE_XHTML:
                    //setTimeout 0 是因为如果不这么做，iframeWindow.document可能不存在
                    setTimeout(function () {
                        //将infopath中带出来的style拼接到body的style上
                        var style = $element.attr("style");
                        //只需要将font相关的以及color这些style带到body上
                        var getStyle = function (style) {
                            var retVal = "",
                                styles = style.split(";");
                            for (var i = 0, len = styles.length; i < len; i++) {
                                var s = styles[i];
                                if (s.indexOf(":") !== -1) {
                                    var styleName = $IU.trimString(s.substr(0, s.indexOf(":")));
                                    if (styleName === "color" || styleName.substr(0, 4) === "font") {
                                        retVal += (s + ";");
                                    }
                                }
                            }
                            return retVal;
                        };

                        style = "overflow:auto;overflow-y:hidden;" + getStyle(style || "");
                        var iframeWindow = $element[0].contentWindow,
                            doc = iframeWindow.document;
                        doc.open();
                        doc.write("<html><body style='" + style + "'>" + fieldValue + "</body></html>");
                        doc.close();
                        //iframe有个缺省高度，先将其max-height设置为0，才能让后面的scrollHeight有用
                        $element.css("height", "").css("max-height", "0px");
                        var initHeight = iframeWindow.document.body.scrollHeight,
                            sameTimes = 0;
                        var setHeight = function () {
                            var currentHeight = iframeWindow.document.body.scrollHeight;
                            if (currentHeight !== initHeight) {
                                $element.css("height", (currentHeight + 10) + "px").css("max-height", "");
                            } else {
                                //如果超过10次还是原先的值，说明就是这个值了
                                if (sameTimes++ > 10) {
                                    $element.css("height", (currentHeight + 10) + "px").css("max-height", "");
                                } else {
                                    setTimeout(setHeight, 50);
                                }
                            }
                        };
                        setTimeout(setHeight, 50);
                    }, 0);

                    //$element.html(fieldValue);
                    break;
                case $Control.DATA_TYPE_INT:
                    var value = parseInt(fieldValue, 10);
                    $element.text(isNaN(value) ? "" : value);
                    break;
                case $Control.DATA_TYPE_THING:
                    $element.text(fieldDisplayValue);
                    break;
                case $Control.DATA_TYPE_FILE:
                    if ($IU.isString(fieldValue)) {
                        try {
                            var fileInfo = $.parseJSON(fieldValue);
                            $element.text(fileInfo.name);
                        } catch (e) {
                            fileInfo = null;
                        }
                    }
                    break;
                default:
                    var htmlValue = InfoPlus.Utilities.htmlEncode(fieldValue.toString() || "");
                    $element.html(htmlValue);
            }

            this.setAttributes(attributes);

            //不是第一次创建时候设置值，那么设置完值后再调整一下高度样式
            if (fromInit !== true) {
                this.adjustHeightStyle();
            }

            if (fireChangeEvent) {
                setTimeout(function () {
                    $(hiddenInput).change();
                }, 0);
            }

        },

        getValue: function () {
            if (this.field == null || this.element == null) return "";
            var element = this.element;
            var hiddenInput = $(element).data($Control.DATA_ORIGIN_INPUT);
            var val = this.convertEmptyValue(hiddenInput.value);
            var displayValue = $(element).data($Control.DATA_DISPLAY_VALUE);
            switch (this.field.type) {
                case $Control.DATA_TYPE_STRING:
                case $Control.DATA_TYPE_XHTML:
                case $Control.DATA_TYPE_FILE:
                    return val;
                case $Control.DATA_TYPE_ANYURI:
                    return new $Controls.Data.Uri(val);
                case $Control.DATA_TYPE_DATE:
                case $Control.DATA_TYPE_TIME:
                case $Control.DATA_TYPE_DATETIME:
                    var dateValue = parseInt(val);
                    return isNaN(dateValue) ? "" : dateValue;
                case $Control.DATA_TYPE_INT:
                    var intValue = parseInt(val);
                    return isNaN(intValue) ? "" : intValue;
                case $Control.DATA_TYPE_DOUBLE:
                    var floatValue = parseFloat(val);
                    return isNaN(floatValue) ? "" : floatValue;
                case $Control.DATA_TYPE_BOOL:
                    return val.toLowerCase() === "true";
                case $Control.DATA_TYPE_USER:
                case $Control.DATA_TYPE_ORGANIZE:
                case $Control.DATA_TYPE_CODE:
                case $Control.DATA_TYPE_LOCATION:
                    return new $Controls.Data.ValuePair(val, displayValue);
                case $Control.DATA_TYPE_THING:
                    return new $Controls.Data.Thing(val, displayValue)
            }
            return "";
        },

        getSortValue: function () {
            var value = this.getValue();
            var type = this.field.type;
            if (type === $Control.DATA_TYPE_BOOL) {
                return value ? 1 : 0;
            }
            if ((type === $Control.DATA_TYPE_INT || type === $Control.DATA_TYPE_DOUBLE || type === $Control.DATA_TYPE_DATE || type === $Control.DATA_TYPE_DATETIME) && value === "") {
                return 0;
            }
            if (type === $Control.DATA_TYPE_USER || type === $Control.DATA_TYPE_ORGANIZE || type === $Control.DATA_TYPE_CODE || type === $Control.DATA_TYPE_THING || type === $Control.DATA_TYPE_LOCATION) {
                return value.displayValue;
            }
            return value;
        },

        adjustHeightStyle: function () {
            var $label = $(this.element);
            if (this.render['renderType'] === 'BoundConvertedLabel') {
                if (this.render['convertFromText'] !== true) {
                    var lineHeight = parseInt($label.css("line-height"), 10);
                    if (!isNaN(lineHeight) && lineHeight > 0) {
                        if ($label.height() > lineHeight) {
                            $label.css("height", $label.css("line-height"));
                            $label.css("line-height", "");
                        }
                    }
                }
            } else {
                if (this.field.type !== $Control.DATA_TYPE_XHTML) {
                    var minHeight = parseInt($label.css("min-height"), 10);
                    if (!isNaN(minHeight) && minHeight > 0) {
                        if (!($label.height() > minHeight)) {
                            $label.css("line-height", $label.css("min-height"));
                            //设置完后再检查一下高度，如果高于画的文本框的高度，说明文字较多，其实是多行的，再去除line-height使其恢复原来的高度
                            if ($label.height() > parseInt($label.css("line-height"), 10)) {
                                $label.css("line-height", "");
                            }
                        } else {
                            //如果高度大于minHeight
                            lineHeight = parseInt($label.css("line-height"), 10);
                            if (!isNaN(lineHeight) && lineHeight > 0) {
                                if ($label.height() > lineHeight) {
                                    $label.css("line-height", "");
                                }
                            }
                        }
                    }
                }
            }
        },

        addRepeatInitHeightStyle: function () {
            this.adjustHeightStyle();
        },

        initHeightStyle: function () {
            var style = $(this.element).attr("style"),
                changeClass = false;
            if (style != null) {
                style = style.toLowerCase();
                if (style.indexOf("height:") === -1) {
                    changeClass = true;
                } else {
                    var $label = $(this.element);
                    //如果是转换出来的label
                    if (this.render['renderType'] === 'BoundConvertedLabel') {
                        //大文本框
                        if (this.render['convertFromText'] === true) {
                            $label.css("min-height", $label.css("height"));
                            $label.css("height", "");
                        } else {
                            //单行文本框
                            //设置line-height的目的是使其垂直居中
                            $label.css("line-height", $label.css("height"));
                            $label.css("height", "");
                            //初始化的时候，在visible事件里再检查行高，如果是重复节表增加行，会在addedRepeat事件里调用addRepeatInitHeightStyle
                            if ($$.params.initializing === true) {
                                $$.visible(function () {
                                    //判断是否是高于一行的高度，如果是说明虽然是单行文本框转过来的，但是文字太多有2行以上，去除line-height使其恢复原来的高度
                                    if ($label.height() > parseInt($label.css("line-height"), 10)) {
                                        $label.css("height", $label.css("line-height"));
                                        $label.css("line-height", "");
                                    }
                                });
                            }
                            //$(this.element).css("line-height", $(this.element).css("height"));
                        }
                    } else {
                        //如果本来就是label

                        //将height替换成为min-height，避免在safari中因为设置了height的style而使该label在dom中占的高度不是其实际内容的高度，而是设置的height高度
                        //改换成min-height的好处是：
                        // 1）如果实际内容的高度小于设置的高度，那么dom最小占高还是这个min-height
                        // 2）如果实际内容高度大于设置的高度，那么dom占高就是实际高度
                        //解决的问题是：表单设计者制作表单时候通常处理大文本label会拉高infopath里画的大文本框，
                        //而不是将其高度设置为自动，通过拉高外面的td高度来控制该标签的占高，这种情况下如果标签实际内容的高度大于表单设计者拉的高度，
                        //在safari中这个标签实际占高就会是infopath中文本框拉的高度，那么会出现标签内容超出td格子的情况

                        $label.css("min-height", $label.css("height"));
                        $label.css("height", "");

                        //初始化的时候，在visible事件里再检查行高，如果是重复节表增加行，会在addedRepeat事件里调用addRepeatInitHeightStyle
                        if ($$.params.initializing === true && this.field.type !== $Control.DATA_TYPE_XHTML) {
                            $$.visible(function () {
                                //如果文字高度不大于画的文本框的高度，认为是单行的，设置line-height使其垂直居中
                                if (!($label.height() > parseInt($label.css("min-height"), 10))) {
                                    $label.css("line-height", $label.css("min-height"));
                                    //设置完后再检查一下高度，如果高于画的文本框的高度，说明文字较多，其实是多行的，再去除line-height使其恢复原来的高度
                                    if ($label.height() > parseInt($label.css("line-height"), 10)) {
                                        $label.css("line-height", "");
                                    }
                                }
                            });
                        }
                    }
                }
            } else {
                changeClass = true;
            }

            if (changeClass) {
                $(this.element).addClass("inline");
                $(this.controlContainer).addClass("inline");
            }
        },

        //这个是解决打印中一个大LABEL无法跨页的问题，打印时候当一个LABEL内容很长，在前一页放不下，而在下一页又能放下的情况下，会自动移到下一页中
        //那么如果这个LABEL没有设置过高度，就把内外两层都设置display:inline，这样就解决了打印会换页的问题，如果设置过高度的就没办法了。
        //对于会有很多文字的LABEL应该设置为没高度的标签，对于一定要占一定高度的标签才拉文本框高度
        specialSetting: function () {
            this.initHeightStyle();

            if (this.isWritable() && this.field.type === $Control.DATA_TYPE_XHTML) {
                $IU.debugTip($$.lt("label.xhtmlWarning", this.field.name), 'warning');
            }
        },

        //以下是动态动作
        setDataSource: function (dataSource, fromInit) {
            if (this.field.type !== $Control.DATA_TYPE_CODE) return;
            this.items = [];
            if ($IU.isString(dataSource)) {
                var dataArray = $IU.splitAttribute(dataSource);
                for (var i = 0, len = dataArray.length; i < len; i++) {
                    this.items.push({
                        codeId: dataArray[i],
                        codeName: dataArray[i],
                        enabled: true
                    });
                }
            } else {
                if ($IU.isArray(dataSource)) {
                    for (i = 0, len = dataSource.length; i < len; i++) {
                        var data = dataSource[i];
                        if (data.value !== undefined && data.displayValue !== undefined) {
                            this.items.push({
                                codeId: data.value,
                                codeName: data.displayValue,
                                enabled: true,
                                parentId: data.parentId
                            });
                        }
                    }
                }
            }
            var val = $(this.element).data($Control.DATA_ORIGIN_INPUT).value;
            for (i = 0, len = this.items.length; i < len; i++) {
                var item = this.items[i];
                if (item.codeId === val) {
                    $(this.element).text(item.codeName).data($Control.DATA_DISPLAY_VALUE, item.codeName);
                }
            }
        }

    });

    define("InfoPlus.Controls.Label", label);

})(window);
﻿/*
 * Radio
 * @Author yech 
 * @Since 2012/02/21
 */

(function (window, undefined) {

    var radio = function (path, field, render, initValue) {
        $Control.call(this, $Control.CONTROL_TYPE_RADIO, path, field, render, initValue, null);
    };

    radio.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_STRING],
        name: "radio",

        //override methods
        createElement: function () {
            var element = document.createElement("input");
            element.type = "radio";
            element.value = this.render["onValue"];
            return element;
        },

        //初始化radio，将radio后的文字放到一个label里，点击label也能选中这个radio
        initRadio: function () {
            if (this.element === undefined) return;
            var siblings = this.element.parentElement.childNodes;
            for (var i = 0, len = siblings.length; i < len; i++) {
                //寻找后面一个兄弟节点
                if (siblings[i] === this.element && i < len - 1) {
                    var nextNode = siblings[i + 1],
                        $nextNode = $(nextNode);
                    //后一个兄弟节点不是控件，并且内部也不包含控件，就将后面的节点包进一个label
                    if (!$nextNode.hasClass($Control.CLASSNAME_CONTROL) && $nextNode.find("." + $Control.CLASSNAME_CONTROL).length === 0) {
                        var label = document.createElement("label"),
                            $label = $(label);
                        $nextNode.detach().appendTo($label);
                        $label.attr("for", this.element.getAttribute("id")).insertAfter(this.element).addClass("infoplus_radioLabel");
                    }
                    break;
                }
            }
        },

        setValue: function (fieldValue) {
            if (fieldValue == null) fieldValue = '';
            this.element.checked = (fieldValue === this.element.value);

            if (this.element.checked) {
                $(this.element).addClass("checked");
            } else {
                $(this.element).removeClass("checked");
            }
            //以下代码在fieldChange赋值时候起作用
            //并且这段代码不能替代上面那几行代码，因为表单初始化时候控件尚未挂到dom上
            $("." + this.getElementClassName() + "[name=" + this.element.name + "]").each(function () {
                if (this.checked) {
                    $(this).addClass("checked");
                } else {
                    $(this).removeClass("checked");
                }
            });

        },

        getValue: function () {
            var instance = this;
            if (this.element.checked) {
                return this.convertEmptyValue(this.element.value);
            } else {
                var val = '';
                $("." + this.getElementClassName() + "[name=" + this.element.name + "]").each(function () {
                    if (this.checked) {
                        val = instance.convertEmptyValue(this.value);
                    }
                });
                return val;
            }
        },

        shouldFireChangeEventAgain: function (fieldValue) {
            return fieldValue === this.element.value && this.shouldFireChangeEvent(fieldValue);
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.Radio.Events.events;
        },

        markModified: function () {
            $(this.element).parent().addClass("modified");
        },

        clearModified: function () {
            $(this.element).parent().removeClass("modified");
        }
    });

    define("InfoPlus.Controls.Radio", radio);

    var radioEvents = {
        onClick: function (event) {
            var name = $(this).attr("name");
            $("input:radio[name='" + name + "']").each(function () {
                if ($(this).is(":checked")) {
                    $(this).addClass("checked");
                } else {
                    $(this).removeClass("checked");
                }
            });
        }
    };

    radioEvents.events = [
        {type: "click", handler: radioEvents.onClick}
    ];

    define("InfoPlus.Controls.Radio.Events", radioEvents);
})(window);
/*
 * RadioList
 * @Author yech
 * @Since 2016/01/22
 */

(function (window, undefined) {

    var radioList = function (path, field, render, initValue, initDisplayValue, parentValue, initAttributes) {
        var items = null;
        if (field.code != null) {
            var code = $$.codeManager.getCode(field.code);
            if (code != null) {
                items = code.items;
            }

            //如果field.code是外部代码表且items为空，那么需要调用接口获取
            if (items == null || ($IU.isArray(items) && items.length === 0)) {
                if (code == null || (code != null && code.codeType === 'External')) {
                    $$.codeManager.addRequestCode(field.code, field.name);
                }
            }

        }

        this.items = items;
        this.parentValue = parentValue;

        if (initValue !== '') {
            if (items == null || ($IU.isArray(items) && items.length === 0)) {
                this.items = [
                    {
                        codeId: initValue,
                        codeName: initDisplayValue,
                        enabled: true,
                        parentId: parentValue,
                        attributes: initAttributes
                    }
                ];
            }
        }
        $Control.call(this, $Control.CONTROL_TYPE_RADIO_LIST, path, field, render, initValue, initDisplayValue, initAttributes);
    };

    radioList.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_CODE],
        ignoreClass: true,
        name: "radioList",
        //elementClassName: "infoplus_radioListControl",
        validatorPromptPosition: 'topLeft',

        //override methods
        createElement: function () {
            var element = document.createElement("div");
            if ($IU.isArray(this.items)) {
                this.setOptions(element, this.items, this.initValue, true, true);
            }
            return element;
        },

        setValue: function (fieldValue, fieldDisplayValue, isInit, attributes) {
            if (fieldValue == null) fieldValue = '';
            var isReadOnly = this.isReadOnly();

            if (attributes != null) {
                if (attributes.datasource != null || attributes.datasource_Codes != null) {
                    var items = [];
                    var ids = (attributes.datasource != null) ? $IU.splitAttribute(attributes.datasource) : $IU.splitAttribute(attributes.datasource_Codes),
                        names = $IU.splitAttribute(attributes.datasource_Names);
                    for (i = 0, len = ids.length; i < len; i++) {
                        items.push({
                            codeId: ids[i],
                            codeName: names[i] != null ? names[i] : ids[i],
                            enabled: true,
                            attributes: attributes
                        });
                    }
                    this.setOptions(this.element, items, fieldValue, isInit);
                }
                this.setAttributes(attributes);
            } else {
                var $radios = $(this.element).find("input[type=radio]");
                for (var i = 0, len = $radios.length; i < len; i++) {
                    var radio = $radios[i];
                    radio.checked = (radio.value === fieldValue);
                    if (isReadOnly) {
                        if (radio.checked) {
                            $(radio).parent().addClass("checked").removeClass("unchecked");
                        } else {
                            $(radio).parent().addClass("unchecked").removeClass("checked");
                        }
                    } else {
                        if (radio.checked) {
                            $(radio).parent().addClass("checked");
                        } else {
                            $(radio).parent().removeClass("checked");
                        }
                    }
                }
            }
        },

        getValue: function () {
            var $radios = $(this.element).find("input[type=radio]");
            for (var i = 0, len = $radios.length; i < len; i++) {
                var radio = $radios[i];
                if (radio.checked) {
                    var displayValue = $(radio).parent().text();
                    return new $Controls.Data.ValuePair(radio.value, displayValue, this.parentValue);
                }
            }
            return new $Controls.Data.ValuePair('', '', this.parentValue);
        },

        setDataSourceFromItems: function (element, items, initValue, fromInit) {
            var oldValue = this.getValue();
            this.setOptions(element, items, initValue, fromInit);
        },

        setElementAttribute: function () {
            var $element = $(this.element),
                render = this.render;
            this.element.id = "optionListDiv_" + $$.guid();
            $element.attr("name", render["field"] + this.path);
            $element.data($Control.DATA_FIELD, render["field"]).data($Control.DATA_RENDER, render);
        },

        setStyle: function (name, value) {
            var $labels = $(this.element).find("label");
            for (var i = 0, len = $labels.length; i < len; i++) {
                var label = $labels[i];
                $IU.setDynamicStyle(label, name, value);
            }
        },

        addValidation: function (radioElement) {
            var field = this.field;
            if (field.notNull === true || field.regEx) {
                var permission = field.permission || "";
                if (permission.indexOf("r") !== -1 && permission.indexOf("w") === -1) {
                    //这个字段是只读的，不必验证
                    return;
                }

                $(radioElement).data($Control.DATA_VALIDATOR, {
                    required: field.notNull,
                    regEx: field.regEx,
                    prompt: field.prompt,
                    builtIn: false
                }).data($Control.DATA_VALIDATOR_PROMPT_POSITION, this.validatorPromptPosition);

                $IU.addElementValidateClass(radioElement);

            }
        },

        processValidation: function () {
            var field = this.field,
                element = this.element,
                $radios = $(element).find("input[type=radio]");
            if (field.notNull === true || field.regEx) {
                var permission = field.permission || "";
                if (permission.indexOf("r") !== -1 && permission.indexOf("w") === -1) {
                    //这个字段是只读的，不必验证
                    return;
                }

                $radios.data($Control.DATA_VALIDATOR, {
                    required: field.notNull,
                    regEx: field.regEx,
                    prompt: field.prompt,
                    builtIn: false
                });
                if (this.validatorPromptPosition !== null) {
                    $radios.data($Control.DATA_VALIDATOR_PROMPT_POSITION, this.validatorPromptPosition);
                }
                for (var i = 0, len = $radios.length; i < len; i++) {
                    var radio = $radios[i];
                    $IU.addElementValidateClass(radio);
                }
            }

            var dynamics = this.render.properties;
            if (dynamics != null && dynamics.length > 0) {
                for (i = 0, len = dynamics.length; i < len; i++) {
                    var dynamic = dynamics[i];
                    if (dynamic['key'] === 'validation' && dynamic['values'] != null) {
                        var validator = $radios.data($Control.DATA_VALIDATOR);
                        if (validator == null) {
                            validator = {
                                required: false,
                                builtIn: false,
                                dynamics: []
                            };
                            $radios.data($Control.DATA_VALIDATOR, validator);
                            if (this.validatorPromptPosition !== null) {
                                $radios.data($Control.DATA_VALIDATOR_PROMPT_POSITION, this.validatorPromptPosition);
                            }

                            for (i = 0, len = $radios.length; i < len; i++) {
                                radio = $radios[i];
                                $IU.addElementValidateClass(radio);
                            }
                        }

                        if (validator['dynamics'] == null) {
                            validator['dynamics'] = [];
                        }

                        for (var tipIndex = 0, tipLen = dynamic.values.length; tipIndex < tipLen; tipIndex++) {
                            var tip = dynamic.values[tipIndex];
                            validator.dynamics.push({ tip: tip.value, condition: tip.condition });
                        }
                    }
                }
            }

        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.RadioList.Events.events;
        },

        setOptions: function (element, items, initValue, fromInit, fromCreate) {
            var field = this.field,
                parentValue = this.parentValue,
                path = this.path,
                name = this.render["field"] + path,
                isReadOnly = this.isReadOnly();


            if (initValue === undefined) {
                initValue = this.initValue;
            }
            var isDisplay = function (item) {
                if (field.code != null) {
                    if (field.parent == null) {
                        return true;
                    } else {
                        return parentValue === item.parentId;
                    }
                } else {
                    if (field.parent == null) {
                        return true;
                    } else {
                        return parentValue === item.parentId;
                    }
                }
            };

            var isEnabled = function (item) {
                return !(item.isEnabled === false || item.enabled === false);

            };

            $(element).children("label").remove();

            if ($IU.isArray(items)) {
                for (var i = 0, len = items.length; i < len; i++) {
                    var item = items[i];
                    if (isEnabled(item) && isDisplay(item)) {
                        var label = document.createElement("label");
                        var input = document.createElement("input");
                        input.type = "radio";
                        input.value = item.codeId;
                        input.name = "radioList-" + name;
                        input.id = name + "-" + i;
                        $(input).data($Control.DATA_ATTRIBUTES, item.attributes);
                        if (initValue === $IU.trimString(item.codeId)) {
                            input.checked = true;
                        }

                        if (isReadOnly) {
                            if (input.checked) {
                                $(label).addClass("checked").removeClass("unchecked");
                            } else {
                                $(label).addClass("unchecked").removeClass("checked");
                            }
                        } else {
                            if (input.checked) {
                                $(label).addClass("checked");
                            }
                        }

                        //for validation
                        $(input).data($Control.DATA_IS_CONTROL, true).data($Control.DATA_CONTROL_OBJECT, this);

                        var text = item.codeName;
                        if ((item.description || '') !== '') {
                            text = text + "(" + $IU.trimString(item.description) + ")";
                        }
                        var textNode = document.createTextNode(text);

                        $(label).append(input);
                        $(label).append(textNode);
                        element.appendChild(label);

                        this.addValidation(input);
                    }
                }
            }

            this.items = items;

            //createElement的时候不需要做动态样式,详细原因见CheckList
            if (fromCreate !== true) {
                //因为radioList的动态style被解释为上面每个option的动态style，所以当其option源发生改变后，应该再做一次动态style
                this.setDynamicStyle($$.params.formRender, fromInit);
            }

        },

        showTooltip: function () {
            if (this.tooltip == null || this.tooltip.tip === '') return;
            var $element = $(this.element);
            $element.validationEngine("showPrompt", $IU.htmlEncode(this.tooltip.tip), this.tooltip.type, 'topLeft', true);
            $element.find("input").one('blur', function () {
                $element.validationEngine("hidePrompt");
            });
        },

        //以下是动态动作
        setDataSource: function (dataSource, fromInit) {

            var oldValue = this.getValue();
            if (oldValue == null) {
                oldValue = "";
            } else {
                oldValue = oldValue.value;
            }

            //setDataSource支持第二个参数，布尔类型，代表是否使用第一个值作为初始选中的值
            var useFirstAsDefault = false;
            if (dataSource instanceof InfoPlus.Dynamics.Params) {
                var params = dataSource.params;
                if (params.length > 1 && params[1] === true) {
                    useFirstAsDefault = true;
                }
                dataSource = params[0];
            }

            this.items = [];
            if ($IU.isString(dataSource)) {
                var dataArray = $IU.splitAttribute(dataSource);
                for (var i = 0, len = dataArray.length; i < len; i++) {
                    this.items.push({
                        codeId: dataArray[i],
                        codeName: dataArray[i],
                        enabled: true
                    });
                }
            } else {
                if ($IU.isArray(dataSource)) {
                    for (i = 0, len = dataSource.length; i < len; i++) {
                        var data = dataSource[i];
                        if (data.value !== undefined && data.displayValue !== undefined) {
                            this.items.push({
                                codeId: data.value,
                                codeName: data.displayValue,
                                enabled: true,
                                parentId: data.parentId
                            });
                        }
                    }
                }
            }

            if (!fromInit) {
                if (useFirstAsDefault && this.items.length > 0) {
                    oldValue = this.items[0].codeId;
                }
            }
            this.setOptions(this.element, this.items, oldValue, fromInit);

            //这里调用基类的setPermission方法，为的是设置只读或者可写情况下的option的样式
            this.setPermission();

            //this.setDataSourceFromItems(this.element, this.items, oldValue, fromInit);
        },

        getAttributes: function () {
            var $radios = $(this.element).find("input[type=radio]");
            for (var i = 0, len = $radios.length; i < len; i++) {
                var radio = $radios[i];
                if (radio.checked) {
                    return $(radio).data($Control.DATA_ATTRIBUTES);
                }
            }
            return null;
        },

        setParentValue: function (parentValue, fromInit) {
            var oldValue = this.getValue();
            if (oldValue == null) {
                oldValue = "";
            } else {
                oldValue = oldValue.value;
            }
            if ((parentValue instanceof $Controls.Data.ValuePair) || (parentValue instanceof $Controls.Data.Uri)) {
                this.parentValue = parentValue.value;
            } else {
                this.parentValue = parentValue;
            }

            this.setOptions(this.element, this.items, oldValue, fromInit);

            //this.setDataSourceFromItems(this.element, this.items, oldValue, fromInit);
        },

        setDynamicReadOnly: function (isReadOnly) {
            if (isReadOnly) {
                $(this.element).find("input[type=radio]").each(function () {
                    if (this.checked) {
                        $(this).parent().addClass("checked").removeClass("unchecked");
                    } else {
                        $(this).parent().addClass("unchecked").removeClass("checked");
                    }
                    $(this).addClass($Control.CLASSNAME_READONLY).addClass("disabled");
                    this.disabled = true;
                });
            } else {
                $(this.element).find("label").removeAttr("class");
                $(this.element).find("input[type=radio]").each(function () {
                    $(this).removeClass($Control.CLASSNAME_READONLY).removeClass("disabled");
                    this.disabled = false;
                });
            }
        }
    });

    define("InfoPlus.Controls.RadioList", radioList);

    var radioEvents = {
        onClick: function () {
            var control = $(this).data($Control.DATA_CONTROL_OBJECT);
            $(control.element).find("input[type=radio]").each(function () {
                if (this.checked) {
                    $(this).parent().addClass("checked");
                } else {
                    $(this).parent().removeClass("checked");
                }
            });
        }
    };

    radioEvents.events = [
        { type: "click", handler: radioEvents.onClick }
    ];

    define("InfoPlus.Controls.RadioList.Events", radioEvents);


})(window);

/**
 * Radio Group 用于重复节表中选择一行
 * @Author yech
 * @Since 2016/02/18.
 */

(function (window, undefined) {

    var radio = function (path, field, render, initValue) {
        $Control.call(this, $Control.CONTROL_TYPE_RADIO_GROUP, path, field, render, initValue, null);
    };

    radio.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_BOOL],
        name: "radioGroup",
        //elementClassName: "infoplus_radioGroupControl",

        //override methods
        createElement: function () {
            var element = document.createElement("input");
            element.type = "radio";
            element.value = true;
            return element;
        },

        unselectSiblings: function () {
            var path = this.path;
            if (this.getValue() === true) {
                $$("&" + this.field.name).each(function () {
                    var radioControl = this.control;
                    if ($IU.isSibling(path, radioControl.path)) {
                        radioControl.setValue(false);
                    }
                });
            }
        },

        setValue: function (fieldValue) {
            if (fieldValue === true) {
                this.element.checked = true;
                this.unselectSiblings();
            } else {
                this.element.checked = false;
            }
        },

        getValue: function () {
            return this.element.checked;
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.RadioGroup.Events.events;
        }


    });

    define("InfoPlus.Controls.RadioGroup", radio);

    var radioEvents = {
        onClick: function () {
            var control = $(this).data($Control.DATA_CONTROL_OBJECT);
            control.unselectSiblings();
        }
    };

    radioEvents.events = [
        {type: "click", handler: radioEvents.onClick}
    ];

    define("InfoPlus.Controls.RadioGroup.Events", radioEvents);

})(window);
﻿/*
 * Remark
 * @Author yech 
 * @Since 2012/02/20
 */

(function (window, undefined) {

    var remark = function (path, field, render, initValue) {
        $Control.call(this, $Control.CONTROL_TYPE_REMARK, path, field, render, initValue, null);
    };

    remark.HAS_VALUE = "infoplus_remarkControl_has_value";
    remark.NO_VALUE = "infoplus_remarkControl_no_value";

    remark.prototype = $.extend(new $Controls.Control(), {

        autoTriggerFieldChangeEvent: false,
        compatibleFieldTypes: [$Control.DATA_TYPE_STRING],
        allowFocus: false,
        remarkValue: '',
        name: "remark",
        //elementClassName: "infoplus_remarkControl",
        hasHiddenElement: true,


        //override methods

        createElement: function () {
            var element = document.createElement("div");
            //this.createHiddenElement(element);
            $(element).tipsy({html: true, fade: true, gravity: $.fn.tipsy.autoWE, trigger: 'manual'});
            return element;
        },

        setValue: function (fieldValue, fieldDisplayValue, fromInit) {
            if (fieldValue == null) fieldValue = '';
            if (this.maxLength != null) {
                fieldValue = fieldValue.substr(0, this.maxLength);
            }
            var remarkElement = this.element;
            var hiddenInput = $(remarkElement).data($Control.DATA_ORIGIN_INPUT);
            var fireChangeEvent = !(!!fromInit) && this.shouldFireChangeEvent(fieldValue);

            hiddenInput.value = fieldValue;
            if (fieldValue === '') {
                $(remarkElement).removeClass(InfoPlus.Controls.Remark.HAS_VALUE).addClass(InfoPlus.Controls.Remark.NO_VALUE);
            } else {
                $(remarkElement).removeClass(InfoPlus.Controls.Remark.NO_VALUE).addClass(InfoPlus.Controls.Remark.HAS_VALUE);
            }
            var htmlValue = "<div class=\"tipsy-inner-infoplus\">" + $IU.htmlEncode(fieldValue) + "</div>";
            remarkElement.setAttribute("original-title", htmlValue);
            if (fireChangeEvent) {
                setTimeout(function () {
                    $(hiddenInput).change();
                }, 0);
            }
        },

        getValue: function () {
            var hiddenInput = $(this.element).data($Control.DATA_ORIGIN_INPUT);
            var val = this.convertEmptyValue(hiddenInput.value);
            val = val.replace(/\r\n/g, "\n");
            if (this.maxLength != null) {
                val = val.substr(0, this.maxLength);
            }
            return val;
        },

        //private methods

        setTipEncodeInnerHtml: function (sourceString, tipSpan) {
            var setSpanWidth = function (span, maxWidth) {
                if (maxWidth > 52) {
                    span.style.width = '365px';
                } else {
                    span.style.width = parseInt(maxWidth * 7) + 5 + 'px';
                }
                span.style.whiteSpace = 'normal';
            };

            var s = "";
            if (sourceString == null || sourceString.length == 0) {
                setSpanWidth(tipSpan, 0);
                tipSpan.innerHTML = "";
                return;
            }
            var currentLine = 1;
            var maxLineWidth = 0;
            var currentLineWidth = 0;

            for (var i = 0; i < sourceString.length; i++) {
                if (i > tipSpan.maxCharCount) {
                    $(tipSpan).html(s + "...");
                    currentLineWidth += 3;
                    if (currentLineWidth > maxLineWidth) {
                        maxLineWidth = currentLineWidth;
                    }
                    setSpanWidth(tipSpan, maxLineWidth);
                    return;
                }
                if (sourceString.charCodeAt(i) > 127 || sourceString.charCodeAt(i) == 94) {
                    currentLineWidth += 2;
                } else {
                    currentLineWidth += 1;
                }
                if (currentLineWidth > maxLineWidth) {
                    maxLineWidth = currentLineWidth;
                }
                switch (sourceString.substr(i, 1)) {
                    case "<":
                        s += "&lt;";
                        break;
                    case ">":
                        s += "&gt;";
                        break;
                    case "&":
                        s += "&amp;";
                        break;
                    case " ":
                        if (sourceString.substr(i + 1, 1) == " ") {
                            s += " &nbsp;";
                            i++;
                        } else s += " ";
                        break;
                    case "\"":
                        s += "&quot;";
                        break;
                    case "\n":
                        if (++currentLine > tipSpan.maxLineCount) {
                            $(tipSpan).html(s + "...");
                            currentLineWidth += 3;
                            if (currentLineWidth > maxLineWidth) {
                                maxLineWidth = currentLineWidth;
                            }
                            setSpanWidth(tipSpan, maxLineWidth);
                            return;
                        } else {
                            s += "<br>";
                            currentLineWidth = 0;
                        }
                        break;
                    default:
                        s += sourceString.substr(i, 1);
                        break;
                }
            }
            setSpanWidth(tipSpan, maxLineWidth);
            $(tipSpan).html(s);
        },

        showRemarkDialog: function () {
            var remarkElement = this.element,
                instance = this,
                textarea = document.createElement("textarea"),
                title = this.field.label == null ? $$.lt("remark.inputValue") : this.field.label;

            textarea.setAttribute("id", "form_remark_textarea");

            if (this.field.placeHolder != null) {
                $(textarea).attr("placeholder", this.field.placeHolder);
            }

            var content = textarea;
            if (this.maxLength != null && this.isWritable()) {
                //$(textarea).attr("maxlength", this.maxLength);

                //在文本框外面包一层div，以便显示剩余字符数
                var div = document.createElement("div"),
                    $div = $(div);
                $div.addClass("infoplus_textareaControlContainer");
                $div.append(textarea);
                var maxLengthSpan = document.createElement("span");
                $(maxLengthSpan).addClass("infoplus_textareaControlMaxLengthTip");
                $div.append(maxLengthSpan);
                $(maxLengthSpan).hide();
                content = div;
                $div.css("margin-bottom", "20px");
                $(maxLengthSpan).css("bottom", "-17px");
            }

            if (remarkElement.readOnly === true) {
                textarea.readOnly = true;
                $(textarea).addClass($Control.CLASSNAME_READONLY);
            }
            $(textarea).val($(remarkElement).data($Control.DATA_ORIGIN_INPUT).value);

            var buttons;
            if (remarkElement.readOnly === true) {
                buttons = [];
            } else {
                buttons = [
                    {
                        name: $$.lt("common.ok"),
                        defaultButton: true,
                        callOnClose: true,
                        callback: function () {
                            instance.setValue($(textarea).val());
                            var validator = $(remarkElement).data($Control.DATA_VALIDATOR);
                            if (validator === undefined || validator === null) return;
                            if (validator.required === true || (validator.regEx && validator.prompt)) {
                                $$.params.renderForm.validationEngine("validateField", "#" + remarkElement.id);
                            }
                        }
                    },
                    {
                        name: $$.lt("common.cancel")
                    }
                ];
            }

            var options = {
                container: $$.params.renderForm,
                title: title,
                content: content,
                maxWidth: 600,
                buttons: buttons
            };

            if (this.tooltip != null && this.tooltip.tip != '') {
                options.onShow = function () {
                    setTimeout(function () {
                        $(textarea).validationEngine("showPrompt", $IU.htmlEncode(instance.tooltip.tip), instance.tooltip.type, 'topRight', true);
                        $(textarea).on('blur', function () {
                            $(this).validationEngine("hidePrompt");
                        });
                        $(textarea).on('focus', function () {
                            $(textarea).validationEngine("showPrompt", $IU.htmlEncode(instance.tooltip.tip), instance.tooltip.type, 'topRight', true);
                        });
                    }, 300);
                };
                options.onClose = function () {
                    $(textarea).validationEngine("hidePrompt");
                }
            }

            var dialog = new InfoPlus.Render.Dialog(options);
            dialog.show();


            var maxLength = this.maxLength;

            if (maxLength != null && this.isWritable()) {
                //maxlength的处理参考了http://keith-wood.name/maxlength.html
                var currentLength = function () {
                    var value = $(textarea).val();
                    var len = value.replace(/\r\n/g, '~').replace(/\n/g, '~').length;
                    return {used: len, remaining: maxLength - len};
                };

                var showCurrentLengthTip = function (slide) {
                    var len = currentLength();

                    var $span = $(maxLengthSpan);
                    $span.text(len.used + "/" + maxLength);
                    if (len.remaining > 0) {
                        $span.css("color", "green");
                    } else {
                        $span.css("color", "red");
                    }
                    if ($span.data("hideTipTimer") != null) clearTimeout($span.data("hideTipTimer"));
                    if (slide === true) {
                        $span.show('slide', {direction: 'right'}, 500);
                    } else {
                        $span.show();
                    }
                    var hideTipTimer = setTimeout(function () {
                        $span.fadeOut(1000);
                    }, 3000);
                    $span.data("hideTipTimer", hideTipTimer);
                };

                var showMaxLengthTip = function () {
                    var len = currentLength();
                    var $span = $(maxLengthSpan);
                    $span.text($$.lt("remark.maxLength", maxLength));
                    if (len.remaining > 0) {
                        $span.css("color", "green");
                    } else {
                        $span.css("color", "red");
                    }
                    if ($span.data("hideTipTimer") != null) clearTimeout($span.data("hideTipTimer"));
                    $span.show();
                    var hideTipTimer = setTimeout(function () {
                        $span.hide('slide', {direction: 'right'},
                            1000, function () {
                                showCurrentLengthTip(true);
                            });
                    }, 5000);
                    $span.data("hideTipTimer", hideTipTimer);
                };

                var truncate = function () {
                    var len = currentLength();
                    if (len.remaining >= 0) {
                        return;
                    }
                    var element = textarea,
                        lines = $(element).val().split(/\r\n|\n/),
                        value = '',
                        i = 0;
                    while (value.length < maxLength && i < lines.length) {
                        value += lines[i].substring(0, maxLength - value.length) + '\n';
                        i++;
                    }
                    $(element).val(value.substring(0, maxLength));
                    element.scrollTop = element.scrollHeight;

                    showCurrentLengthTip();
                };
                $(textarea).keypress(function (event) {
                    var value = $(textarea).val(),
                        len = value.replace(/\r\n/g, '~').replace(/\n/g, '~').length;

                    var ch = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
                    return (event.ctrlKey || event.metaKey || ch == '\u0000' || len < maxLength);
                });
                $(textarea).focus(function (event) {
                    showMaxLengthTip();
                });
                $(textarea).keyup(function (event) {
                    showCurrentLengthTip();
                    truncate();
                });
            }

            /*
             $(textarea).keypress(function (event) {
             if (event.keyCode <= 46 && event.keyCode != 13) {
             return true;
             }
             if (maxLength != null) {
             var val = $(textarea).val();
             if (val.length >= maxLength) {
             return false;
             }
             }
             return true;
             });
             */
            return false;
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.Remark.Events.events;
        },

        specialSetting: function () {
            this.setMaxLength();
            var $element = $(this.element);
            $element.css("width", "").css("height", "");
        },

        //tooltip显示在弹出的窗口里，在那里处理
        showTooltip: function () {
        }
    });

    define("InfoPlus.Controls.Remark", remark);


    var remarkEvents = {
        onClick: function () {
            var remarkControl = $(this).data($Control.DATA_CONTROL_OBJECT);
            remarkControl.showRemarkDialog();
        },

        onMouseEnter: function () {
            if (!$$.MOBILE) {
                if ($(this).data($Control.DATA_ORIGIN_INPUT).value != '') {
                    $(this).tipsy("show");
                }
            }
        },

        onMouseLeave: function () {
            if (!$$.MOBILE) {
                $(this).tipsy("hide");
            }
        }
    };

    remarkEvents.events = [
        {type: "mouseenter", handler: remarkEvents.onMouseEnter},
        {type: "mouseleave", handler: remarkEvents.onMouseLeave},
        {type: "click", handler: remarkEvents.onClick}
    ];

    define("InfoPlus.Controls.Remark.Events", remarkEvents);

})
(window);
﻿/*
 * Select
 * @Author yech
 * @Since 2012/02/21
 */

(function (window, undefined) {

    var select = function (path, field, render, initValue, initDisplayValue, parentValue, initAttributes) {

        var items = null;
        if (field.code != null) {
            var code = $$.codeManager.getCode(field.code);
            if (code != null) {
                items = code.items;
            }

            //如果field.code是外部代码表且items为空，那么需要调用接口获取
            if (items == null || ($IU.isArray(items) && items.length === 0)) {
                if (code == null || (code != null && code.codeType === 'External')) {
                    $$.codeManager.addRequestCode(field.code, field.name);
                }
            }

        }

        this.items = items;
        this.parentValue = parentValue;
        //initParentAttributes是初始化时候父亲的attributes值(如果有父亲并且父亲有attributes的话)
        //this.initParentAttributes = initParentAttributes;


        if (initValue !== '') {
            if (items == null || ($IU.isArray(items) && items.length === 0)) {
                this.items = [
                    {
                        codeId: initValue,
                        codeName: initDisplayValue,
                        enabled: true,
                        parentId: parentValue,
                        attributes: initAttributes
                    }
                ];
            }
        }
        $Control.call(this, $Control.CONTROL_TYPE_SELECT, path, field, render, initValue, initDisplayValue, initAttributes);
    };

    select.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_CODE],
        name: "select",
        //elementClassName: "infoplus_selectControl",
        emptyOption: null,

        setDataSourceFromItems: function (element, items, initValue, fromInit) {
            var oldValue = this.getValue();
            this.setOptions(element, items, initValue);

            if (fromInit !== true) {
                //不是表单初始化时候，如果要求不为空，且只有一个下拉选项，那么就缺省选上
                if (element.selectedIndex === 0) {
                    if (this.field.notNull === true && element.options.length === 2) {
                        element.options[1].selected = true;
                    }
                }

                $IU.highLightElement(element);
                //$(element).change();


                //表单初始化时候不需要手工触发change
                var newValue = this.getValue();
                if (this.onFieldChange || this.onFieldRefer || this.onFieldSync) {
                    if (oldValue.value !== newValue.value) {
                        setTimeout(function () {
                            $(element).change();
                        }, 0);
                    }
                }
            }


        },

        //override methods
        createElement: function () {
            var element = document.createElement("select");
            if (this.isReadOnly()) {
                if (this.initValue != null) {
                    var op = document.createElement("option");
                    op.value = this.initValue;
                    op.text = this.initDisplayValue;
                    op.selected = true;
                    element.add(op);
                }
            } else {
                //第0个选项是个空选项
                var emptyOption = document.createElement("option");
                emptyOption.value = "";
                emptyOption.text = $$.lt("select.choose");
                $(emptyOption).addClass("emptyOption");

                if (this.field.notNull === true) {
                    emptyOption.setAttribute("disabled", "disabled");
                }

                element.add(emptyOption);
                this.emptyOption = emptyOption;

                //从第1个到item.length+1是this.items里面的数据
                if ($IU.isArray(this.items)) {
                    this.setOptions(element, this.items, this.initValue);
                } else {
                    //如果this.items没值，说明是动态Datasource，可以从父亲的attributes里面取下拉值
                    /*
                     var settings = this.field.settings;
                     if (settings != null && settings.dataSource != null && this.initParentAttributes != null) {
                     var codes = this.initParentAttributes[settings.dataSource],
                     names = codes;
                     if (codes == null) {
                     codes = this.initParentAttributes[settings.dataSource + "_Codes"];
                     names = this.initParentAttributes[settings.dataSource + "_Names"] != null ? this.initParentAttributes[settings.dataSource + "_Names"] : codes;
                     }
                     this.setDataSourceFromAttributes(element, codes, names, this.initValue);
                     }
                     */
                }
            }
            return element;
        },

        setPlaceHolder: function () {
            if (this.emptyOption != null) {
                if (this.field != null && this.field.placeHolder != null && this.field.placeHolder !== '') {
                    $($(this.element).children()[0]).text(this.field.placeHolder);
                }
            }
        },

        setValue: function (fieldValue, fieldDisplayValue, isInit, attributes) {
            if (fieldValue == null) fieldValue = '';

            if (attributes != null) {
                if (attributes.datasource != null || attributes.datasource_Codes != null) {
                    var items = [];
                    var ids = (attributes.datasource != null) ? $IU.splitAttribute(attributes.datasource) : $IU.splitAttribute(attributes.datasource_Codes),
                        names = $IU.splitAttribute(attributes.datasource_Names);
                    for (i = 0, len = ids.length; i < len; i++) {
                        items.push({
                            codeId: ids[i],
                            codeName: names[i] != null ? names[i] : ids[i],
                            enabled: true,
                            attributes: attributes
                        });
                    }
                    this.setOptions(this.element, items, fieldValue);
                }
                this.setAttributes(attributes);
            } else {
                var ops = this.element.options,
                    len = ops.length,
                    foundSelectIndex = false;

                //从第一个选项开始找(不包括所有这个option)
                for (var i = 1; i < len; i++) {
                    if (ops[i].value === fieldValue) {
                        ops[i].selected = true;
                        foundSelectIndex = true;
                    }
                }
                //如果找不到
                if (!foundSelectIndex) {
                    //如果初始化时候设置的VALUE为NULL，且该字段要求不为空，且只有一个下拉选项，那么就缺省把这个唯一的选项选上
                    if (isInit === true && (fieldValue == null || fieldValue === '') && this.field.notNull === true && len === 2) {
                        this.element.selectedIndex = 1;
                    } else {
                        //下拉项中找不到，而且不符合以上条件就选择空选项
                        this.element.selectedIndex = 0;
                    }
                }
            }
        },

        getValue: function () {
            //没选择返回空ValuePair
            var selectedIndex = this.element.selectedIndex;
            if (selectedIndex < 0) return new $Controls.Data.ValuePair("", "", this.parentValue);
            var val = this.element.options[selectedIndex].value;
            var displayValue = this.element.options[selectedIndex].text;
            //普通模式下，如果选取了第一项“请选择”，那么返回ValuePair("",""),但是只读模式下还是返回当前OPTION的值
            if (selectedIndex === 0 && val === "") {
                displayValue = "";
            }
            return new $Controls.Data.ValuePair(val, displayValue, this.parentValue);
        },

        getAttributes: function () {
            var selectedIndex = this.element.selectedIndex;
            if (selectedIndex === -1) return null;
            if (this.items == null) return null;
            var val = this.element.options[selectedIndex].value;
            //选择了第0项（请选择）
            if (val === '') return null;
            if ($IU.isArray(this.items)) {
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].enabled === true && this.items[i].codeId === val) {
                        return this.items[i].attributes;
                    }
                }
            }
            return null;
        },

        //获取数据源
        getDataSource: function () {
            var result = [];
            var options = this.element.options;

            for (var i = 0, len = options.length; i < len; i++) {
                var option = options[i];
                if (i === 0 && option.value === "") {
                    continue;
                }
                result.push(new $Controls.Data.ValuePair(option.value, option.text, this.parentValue));
            }

            return result;
        },

        setOptions: function (element, items, initValue) {

            var field = this.field,
                parentValue = this.parentValue;
            if (initValue === undefined) {
                initValue = element.value;
            }
            var isDisplay = function (item) {
                if (field.code != null) {
                    if (field.parent == null) {
                        return true;
                    } else {
                        return parentValue === item.parentId;
                    }
                } else {
                    if (field.parent == null) {
                        return true;
                    } else {
                        return parentValue === item.parentId;
                    }
                }
            };

            var isEnabled = function (item) {
                return !(item.isEnabled === false || item.enabled === false);

            };

            element.options.length = 1;

            if (!$IU.isArray(items)) {
                return;
            }

            var found = false;
            for (var i = 0, len = items.length; i < len; i++) {
                var item = items[i];
                if (isEnabled(item) && isDisplay(item)) {
                    var op = document.createElement("option");
                    op.value = item.codeId;
                    op.text = item.codeName;
                    if (item.codeId === initValue) {
                        op.selected = true;
                        found = true;
                    } else {
                        op.selected = false;
                    }
                    element.add(op);
                }
            }
            //如果没有找到匹配value的，那么设置一下值为空，因为chrome会在必填情况下(第一个emptyOption被设置为了disabled)，自动选上第一个加上的option，造成错误
            if (!found) {
                element.value = "";
            }
            this.items = items;
        },

        //以下是动态动作
        setDataSource: function (dataSource, fromInit) {
            if (!this.isWritable()) return;
            var oldValue = this.element.value;
            //setDataSource支持第二个参数，布尔类型，代表是否使用第一个值作为初始选中的值
            var useFirstAsDefault = false;
            if (dataSource instanceof InfoPlus.Dynamics.Params) {
                var params = dataSource.params;
                if (params.length > 1 && params[1] === true) {
                    useFirstAsDefault = true;
                }
                dataSource = params[0];
            }

            this.items = [];
            if ($IU.isString(dataSource)) {
                var dataArray = $IU.splitAttribute(dataSource);
                for (var i = 0, len = dataArray.length; i < len; i++) {
                    this.items.push({
                        codeId: dataArray[i],
                        codeName: dataArray[i],
                        enabled: true
                    });
                }
            } else {
                if ($IU.isArray(dataSource)) {
                    for (i = 0, len = dataSource.length; i < len; i++) {
                        var data = dataSource[i];
                        if (data.value !== undefined && data.displayValue !== undefined) {
                            this.items.push({
                                codeId: data.value,
                                codeName: data.displayValue,
                                enabled: true,
                                parentId: data.parentId
                            });
                        }
                    }
                }
            }
            if (!fromInit) {
                if (useFirstAsDefault && this.items.length > 0) {
                    oldValue = this.items[0].codeId;
                }
            }
            this.setDataSourceFromItems(this.element, this.items, oldValue, fromInit);
        },


        setParentValue: function (parentValue, fromInit) {
            var oldValue = this.element.value;
            if ((parentValue instanceof $Controls.Data.ValuePair) || (parentValue instanceof $Controls.Data.Uri)) {
                this.parentValue = parentValue.value;
            } else {
                this.parentValue = parentValue;
            }

            this.setDataSourceFromItems(this.element, this.items, oldValue, fromInit);
        },

        specialSetting: function () {
            var $select = $(this.element);
            if ($select.css("text-align").toLocaleLowerCase() === "right") {
                $select.attr("dir", "rtl");
            }
        }


    });

    define("InfoPlus.Controls.Select", select);

})(window);

﻿/*
 * Suggester
 * @Author yech 
 * @Since 2012/02/22
 */

(function (window, undefined) {

    var suggester = function (path, field, render, formRender, initValue, initDisplayValue, parentValue, tipFormat, suggestService, initializeService, initAttributes) {
        this.parentValue = parentValue;
        this.suggestService = suggestService;
        this.initializeService = initializeService;
        this.tipFormat = tipFormat;
        this.formRender = formRender;
        $Control.call(this, $Control.CONTROL_TYPE_SUGGESTER, path, field, render, initValue, initDisplayValue, initAttributes);
    };

    suggester.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_USER, $Control.DATA_TYPE_ORGANIZE, $Control.DATA_TYPE_CODE],
        autoTriggerFieldChangeEvent: false,
        name: "suggester",
        //elementClassName: "infoplus_suggesterControl",

        //override methods
        createElement: function () {
            var element = document.createElement("select");
            return element;
        },

        setValue: function (fieldValue, fieldDisplayValue, isInit, attributes) {
            if (fieldValue == null) fieldValue = '';
            if (fieldDisplayValue == null) fieldDisplayValue = "";
            var suggesterControl = $(this.element).data($Control.DATA_SUGGESTER);
            if (suggesterControl == null) return;
            this.setAttributes(attributes);
            suggesterControl.setData({
                codeId: fieldValue,
                codeName: fieldDisplayValue,
                attributes: attributes
            }, fieldDisplayValue);
        },

        getValue: function () {
            var element = this.element;
            var val = this.convertEmptyValue(element.value);
            var suggesterControl = $(element).data($Control.DATA_SUGGESTER);
            if (suggesterControl == null) return new $Controls.Data.ValuePair("", "", this.parentValue);
            var displayValue = suggesterControl.text || "";
            return new $Controls.Data.ValuePair(val, displayValue, this.parentValue);
        },

        getSortValue: function () {
            return this.getValue().displayValue;
        },

        setStyle: function (name, value) {
            var suggesterControl = $(this.element).data($Control.DATA_SUGGESTER);
            suggesterControl.setSuggesterStyle(name, value);
        },

        getStyle: function (name) {
            var suggesterControl = $(this.element).data($Control.DATA_SUGGESTER);
            return suggesterControl.getSuggesterStyle(name);
        },

        specialSetting: function () {
            this.createSuggester();
        },

        setDynamicReadOnly: function (isReadOnly) {
            if (isReadOnly) {
                this.element.readOnly = true;
                var suggesterControl = $(this.element).data($Control.DATA_SUGGESTER);
                $(suggesterControl.activeInput).addClass(InfoPlus.Suggester.CLASSNAME_READONLY);
            } else {
                this.element.readOnly = false;
                suggesterControl = $(this.element).data($Control.DATA_SUGGESTER);
                $(suggesterControl.activeInput).removeClass(InfoPlus.Suggester.CLASSNAME_READONLY);
            }
        },

        setDynamicParallelReadOnly: function () {
            this.dynamicParallelReadonly = true;
            this.setDynamicReadOnly(true);
        },

        createSuggester: function () {
            var field = this.field;
            var element = this.element;
            var type = field["type"];
            var code = field["code"];
            if (type === $Control.DATA_TYPE_CODE && code == null) {
                $IU.delayedErrorMessageBox($$.lt("suggester.noCode", field.name));
                return null;
            }
            var mode = this.configSuggesterMode();
            var suggesterControl = new InfoPlus.Suggester(field, element, this.initValue, this.initDisplayValue, type, code, mode, this.tipFormat,
                this.suggestService, this.initializeService);
            $(element).data($Control.DATA_SUGGESTER, suggesterControl);
            this.controlContainer = suggesterControl.container;
            $(this.controlContainer).data($Control.DATA_CONTROL_OBJECT, this)
                .attr("id", this.element.id + "_Container");

            if ($(element).css("text-align").toLocaleLowerCase() === "right") {
                $(suggesterControl.activeInput).css("text-align", "right");
            }
            return suggesterControl;
        },

        //config suggester mode
        configSuggesterMode: function () {
            var permission = this.field["permission"] || "";
            var field = this.field;
            var type = field["type"];
            var mode = 0;

            //不可写，设置只读
            if (permission.indexOf("w") < 0) mode |= InfoPlus.Suggester.MODE_FLAG_READONLY;
            //既不可读又不可写，设置不显示
            if (permission.indexOf("w") < 0 && permission.indexOf("r") < 0) mode |= InfoPlus.Suggester.MODE_FLAG_DISAPPEAR;

            //用户类型的Suggester不翻页
            if (type === $Control.DATA_TYPE_USER) {
                if (!(field.settings != null && field.settings.userTraversal === true)) {
                    mode |= InfoPlus.Suggester.MODE_FLAG_DISABLE_MULTIPAGE;
                }
            }

            //如果不是非空的，则出现<清空>选项，选择这项意味删除原来的选择
            if (field.notNull === false) {
                mode |= InfoPlus.Suggester.MODE_FLAG_EMPTY_ITEM_APPEAR;
            }

            //允许外部值
            if (field.allowExternalCode === true) {
                mode |= InfoPlus.Suggester.MODE_FLAG_EXTERNAL_VALUE;
            }

            return mode;
        },

        setPlaceHolder: function () {
            if (this.field != null && this.field.placeHolder != null) {
                var suggester = $(this.element).data($Control.DATA_SUGGESTER);
                if (suggester != null) {
                    var input = suggester.activeInput;
                    if (input != null && input.placeholder !== undefined) {
                        $(input).attr("placeholder", this.field.placeHolder);
                    }
                }
            }
        },

        //设置焦点
        setFocus: function () {
            var suggesterControl = $(this.element).data($Control.DATA_SUGGESTER);
            suggesterControl.containerClick();
        },

        //失去焦点
        lostFocus: function () {
            var suggesterControl = $(this.element).data($Control.DATA_SUGGESTER);
            if (suggesterControl.activeInput) {
                suggesterControl.activeInput.blur();
            }
        },

        //隐藏suggester
        hideControl: function () {
            this.controlContainer.style.display = "none";
        },

        getDataSource: function () {
            var suggesterControl = $(this.element).data($Control.DATA_SUGGESTER);
            if (suggesterControl == null) return [];
            var ds = [];
            for (var i = 0, data = suggesterControl.suggestData, len = data.length; i < len; i++) {
                ds.push({value: data[i].codeId, displayValue: data[i].codeName});
            }
            return ds;
        },

        showTooltip: function () {
            if (this.tooltip == null || this.tooltip.tip === '') return;
            var $element = $(this.controlContainer).find(".active_input");
            $element.validationEngine("showPrompt", $IU.htmlEncode(this.tooltip.tip), this.tooltip.type, 'topLeft', true);
            $element.one('blur', function () {
                $(this).validationEngine("hidePrompt");
            })
        },


        //以下是动态动作
        setParentValue: function (parentValue, fromInit) {
            var oldParentValue = this.parentValue;
            if ((parentValue instanceof $Controls.Data.ValuePair) || (parentValue instanceof $Controls.Data.Uri)) {
                this.parentValue = parentValue.value;
            } else {
                this.parentValue = parentValue;
            }
            //初始化或者fieldChange时候都不需要做清空动作
            if (fromInit !== true && $$.params.fieldChanging == null && (oldParentValue !== this.parentValue)) {
                this.setValue('', '');
                $IU.highLightElement(this.element);
            }

        },


        visible: function (isVisible) {
            if (this.controlContainer == null) return;
            if (isVisible) {
                $(this.controlContainer).show();
            } else {
                $(this.controlContainer).hide();
            }
        }

    });

    define("InfoPlus.Controls.Suggester", suggester);

})(window);
/*
 * Select2
 * @Author yech
 * @Since 2016/06/02
 */

(function (window, undefined) {

    var suggester2 = function (path, field, render, initValue, initDisplayValue, parentValue, suggestService, initAttributes, originControl) {

        //是否是在移动版弹出的page上
        this.isOnPagePopup = (originControl != null);

        var option = {
            ajax: {
                url: suggestService,
                delay: 250,
                dataType: 'json',
                type: 'POST',
                data: this.getQueryData(field),
                processResults: this.processQueryResults,
                transport: this.ajaxTransport(field)
            },
            allowClear: true,
            dropdownAutoWidth: !this.isOnPagePopup,
            language: {
                errorLoading: function () {
                    return $$.lt("suggester2.errorLoading");
                },
                inputTooLong: function (e) {
                    var t = e.input.length - e.maximum;
                    return $$.lt("suggester2.tooLong", t);
                },
                inputTooShort: function (e) {
                    var t = e.minimum - e.input.length;
                    return $$.lt("suggester2.tooShort", t);
                },
                loadingMore: function () {
                    return $$.lt("suggester2.loadMore");
                },
                maximumSelected: function (e) {
                    return $$.lt("suggester2.maxSelect", e.maximum);
                },
                noResults: function () {
                    return $$.lt("suggester2.noResult");
                },
                searching: function (e) {
                    //记录在全局参数中
                    $$.params.suggeseter2 = {query: e};
                    var term = e.term || '';
                    if (term.length === 0) {
                        return field.type.toLocaleLowerCase() === "user" ? $$.lt("suggester2.emptyUser") : $$.lt("suggester2.emptyHint");
                    } else {
                        return $$.lt("suggester2.searching");
                    }
                }
            },
            templateResult: this.formatState
        };
        this.option = option;
        this.parentValue = parentValue;
        this.initAttributes = initAttributes;
        this.suggestService = suggestService;
        this.dataType = field.type;
        if (this.isOnPagePopup) {
            //记录原来的suggester或者suggester2控件，这个在处理fieldChange时候会用到
            this.originSuggester = originControl;
            //如果是在移动版page上，那么需要同步
            field.needSync = true;
        }
        $Control.call(this, $Control.CONTROL_TYPE_SUGGESTER2, path, field, render, initValue, initDisplayValue, initAttributes);

        var select = $(this.element).data($Control.DATA_ORIGIN_INPUT),
            $select = $(select);
        $select.data("ajaxOption", option);

    };

    suggester2.PAGE_ITEM_COUNT = 15;

    suggester2.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_USER, $Control.DATA_TYPE_ORGANIZE, $Control.DATA_TYPE_CODE],
        name: "suggester2",
        //elementClassName: "infoplus_select2Control",
        autoTriggerFieldChangeEvent: false,
        searchResults: [],

        formatState: function (state) {
            //制造空格撑大格子
            var makeSpace = function (data) {
                var count = 0,
                    result = '';
                if (data == null) return result;
                for (var index = 0; index < data.length; index++) {
                    if ((data.charCodeAt(index) < 0) || (data.charCodeAt(index) > 255)) {
                        count += 2;
                    } else {
                        count++;
                    }
                }
                count = Math.round(count / 2);
                for (index = 0; index < count; index++) {
                    result += '　';
                }

                return result;
            };

            var findIndexOf = function (content, fromIndex) {
                var prefixValue = $$.params.suggeseter2.query.term || '';
                //搜索关键字以空格或者逗号分隔
                var searchArray = prefixValue.toLocaleLowerCase().split(/[ ]|,/);
                if (searchArray.length === 0) return {index: -1, len: 0};
                var index = -1, searchLen = 0;
                for (var i = 0, len = searchArray.length; i < len; i++) {
                    if (searchArray[i].length === 0) continue;
                    var thisIndex = content.indexOf(searchArray[i], fromIndex);
                    if (thisIndex !== -1 && (index === -1 || thisIndex < index)) {
                        index = thisIndex;
                        searchLen = searchArray[i].length;
                    }
                }
                return {index: index, len: searchLen};
            };

            var replacePrefix = function (text) {
                var lowerCaseText = text.toLocaleLowerCase(),
                    currentIndex = 0,
                    resultText = '';
                var findResult = findIndexOf(lowerCaseText, currentIndex);
                while (findResult.index !== -1) {
                    resultText += text.substring(currentIndex, findResult.index);
                    resultText += '<u>' + text.substr(findResult.index, findResult.len) + '</u>';
                    currentIndex = findResult.index + findResult.len;
                    findResult = findIndexOf(lowerCaseText, currentIndex);
                }
                resultText += text.substr(currentIndex);
                return resultText;
            };


            if (state.item == null) {
                return state.text;
            } else {
                if (state.item.external === true) {
                    return $("<span class='externalCode'>" + replacePrefix(state.text) + "</span>");
                } else {
                    if (state.item.duplicated !== true) {
                        var findResult = findIndexOf(state.item.codeId, 0);
                        if (findResult.index !== -1) {
                            //如果搜索关键字出现在codeId上,那么显示codeId
                            return $("<span>" + (replacePrefix(state.text) + makeSpace(state.item.codeId)) + "</span><span class=\"tip\">" + replacePrefix(state.item.codeId) + "</span>");
                        } else {
                            return $("<span>" + replacePrefix(state.text) + "</span>");
                        }
                    } else {
                        //如果有重复，显示codeId
                        return $("<span>" + (replacePrefix(state.text) + makeSpace(state.item.codeId)) + "</span><span class=\"tip\">" + replacePrefix(state.item.codeId) + "</span>");
                    }
                }
            }
        },

        getQueryData: function (field) {
            return function (params) {
                var control = this.data($Control.DATA_CONTROL_OBJECT);
                if (control == null) return null;

                return {
                    prefix: params.term == null ? '' : params.term,
                    type: field.type,
                    code: field.code || '',
                    parent: control.parentValue || '',
                    isTopLevel: field.parent == null,
                    pageNo: isNaN(params.page) ? 0 : params.page - 1,
                    rand: Math.random() * 999,
                    settings: $.toJSON(field.settings == null ? {} : field.settings)
                };
            };
        },

        processQueryResults: function (data, params) {
            var items = data.items;

            var control = this.$element.data($Control.DATA_CONTROL_OBJECT),
                field = control.field,
                moreUser = (field.settings != null && field.settings.userTraversal === true);
            //这是一次新的请求，清空缓存的结果集（type分query,query:append两种）
            if (params["_type"] === "query") {
                control.searchResults = [];
            }

            var findDuplicatedItems = function (items, newItem) {
                var r = [];
                for (var i = 0, len = items.length; i < len; i++) {
                    var oldItem = items[i];
                    if ((oldItem.codeName || '') === (newItem.codeName || '')) {
                        r.push(oldItem);
                    }
                }
                return r;
            };
            var findItemInResults = function (results, item) {
                for (var i = 0, len = results.length; i < len; i++) {
                    var result = results[i];
                    if (result.id === item.codeId) {
                        return result;
                    }
                }
                return null;
            };

            var getItemText = function (item) {
                var text = $IU.trimString(item.codeName) || '';
                if (item.description != null && item.description !== '') {
                    text += "(" + $IU.trimString(item.description) + ")";
                }
                return text;
            };

            var getInaccurateTotal = function (total) {
                if (total > 100000) return $$.lt("suggester2.inaccurateTotal.hundredThousand");
                if (total > 10000) return $$.lt("suggester2.inaccurateTotal.tenThousand");
                if (total > 1000) return $$.lt("suggester2.inaccurateTotal.thousand");
                return total;
            };

            for (var i = 0, len = items.length, results = []; i < len; i++) {
                var item = items[i];
                var text = getItemText(item);
                //查找显示文本重复的结果
                var duplicatedItems = findDuplicatedItems(control.searchResults, item);
                if (duplicatedItems.length > 0) {
                    item.duplicated = true;
                    //查找出来的重复项可能已经渲染成了option，可能就是本次搜索的结果集中的(还没加入dom)
                    for (var index = 0, l = duplicatedItems.length; index < l; index++) {
                        var dupItem = duplicatedItems[index];
                        dupItem.duplicated = true;
                        //在本次搜索结果中寻找
                        var result = findItemInResults(results, dupItem);
                        if (result != null) {
                            result.item.duplicated = true;
                        } else {
                            //已经显示的option，直接修改html
                            this.container.$results.find(".select2-results__option").each(function () {
                                var data = $(this).data("data");
                                if (data != null) {
                                    $(this).html(control.formatState(data));
                                }
                            });
                        }
                    }
                }
                item.text = text;

                control.searchResults.push(item);
                results.push({
                    id: item.codeId,
                    name: $IU.trimString(item.codeName) || '',
                    text: text,
                    attributes: item.attributes,
                    item: item
                });
            }
            if (field.allowExternalCode === true && results.length === 0) {
                var fakeItem = {
                    external: true,
                    codeId: params.term,
                    codeName: params.term
                };
                control.searchResults.push(fakeItem);
                results.push({
                    id: params.term,
                    name: params.term,
                    text: getItemText(fakeItem),
                    attributes: null,
                    item: fakeItem
                });
            }
            if (control.dataType.toLocaleLowerCase() === "user" && !moreUser && data.total > suggester2.PAGE_ITEM_COUNT) {
                results.push({
                    id: ' ',
                    name: '',
                    text: $$.lt("suggester2.moreUser", getInaccurateTotal(data.total)),
                    attributes: null,
                    item: null
                });
            }

            return {
                results: results,
                pagination: {
                    more: control.dataType.toLocaleLowerCase() === "user" ? moreUser : len >= suggester2.PAGE_ITEM_COUNT
                }
            };
        },

        ajaxTransport: function (field) {
            return function (params, success, failure) {
                if (params.data.type.toLocaleLowerCase() === "user") {
                    var prefix = params.data.prefix || '';

                    if (prefix.length < 2) {
                        //如果field设置了userTraversal，那么就不必限制必须输入2个字符才能请求用户数据
                        if (!(field.settings != null && field.settings.userTraversal === true)) {
                            return;
                        }
                    }
                }
                params.needParse = false;
                params.showParseErrMsg = false;
                params.showAjaxErrMsg = false;
                params.addFormParam = true;
                var request = $$.ajax(params);
                request.done(success).fail(failure);
            }
        },
        /*
         ajaxTransport: function (params, success, failure) {
         if (params.data.type.toLocaleLowerCase() === "user") {
         var prefix = params.data.prefix || '';
         if (prefix.length < 2) return;
         }
         params.needParse = false;
         params.showParseErrMsg = false;
         params.showAjaxErrMsg = false;
         var request = $$.ajax(params);
         request.done(success).fail(failure);
         },
         */

        //override methods
        createElement: function () {
            var suggester2Container = document.createElement("div");

            var select = document.createElement("select");
            //加入一个空选项是为了可以清除，否则清除(allowClear)会不起作用
            var op = document.createElement("option");
            op.value = '';
            op.text = '';
            select.add(op);

            if (this.initValue != null && this.initValue !== '') {
                op = document.createElement("option");
                op.value = this.initValue || '';
                op.text = this.initDisplayValue || '';
                op.selected = true;
                select.add(op);
            }

            $(suggester2Container).data($Control.DATA_ORIGIN_INPUT, select);
            $(select).data($Control.DATA_SOURCE_CONTROL, this)
                .data($Control.DATA_CONTROL_TYPE, this.controlType);
            this.controlContainer = suggester2Container;
            $(suggester2Container).addClass("infoplus_suggester2ControlContainer").addClass("infoplus_select2");

            suggester2Container.appendChild(select);
            return suggester2Container;
        },

        getAttributes: function () {
            var select = $(this.element).data($Control.DATA_ORIGIN_INPUT),
                $select = $(select);
            if ($select.data("select2Object") != null) {
                var data = $select.select2('data');
                return data != null && data.length > 0 ? data[0].attributes : null;
            } else {
                return this.initAttributes;
            }
        },

        setValue: function (fieldValue, fieldDisplayValue, fromInit, attributes) {
            if (fieldValue == null) fieldValue = '';
            if (fieldDisplayValue == null) fieldDisplayValue = "";

            var fireChangeEvent = !(!!fromInit) && this.shouldFireChangeEvent(fieldValue);

            var select = $(this.element).data($Control.DATA_ORIGIN_INPUT),
                select2 = $(select).data("select2Object");

            select.options.length = 0;
            var op = document.createElement("option");
            op.value = '';
            op.text = '';
            select.add(op);


            if (fieldValue !== '') {
                op = document.createElement("option");
                op.value = fieldValue;
                op.text = fieldDisplayValue;
                op.selected = true;
                select.add(op);
            }

            if (select2 != null) {
                //注意此处并不会触发change事件，所以最后需要手工触发change事件
                select2.val(fieldValue);
                var data = $(select).find("option:selected").data("data");
                if (data != null) {
                    data["name"] = data["text"];
                    data["attributes"] = attributes;
                } else {
                    //对于移动版弹出页面内的suggester2同步到源suggester2时，data会不存在，这时候需要造一份data
                    data = {
                        id: fieldValue,
                        text: fieldDisplayValue,
                        name: fieldDisplayValue,
                        attributes: attributes,
                        selected: true,
                        title: '',
                        disabled: false
                    };
                    $(select).find("option:selected").data("data", data);
                }

                //select2赋值后并不触发change，需要手动触发，如果值是界面中选出来的会触发change
                if (fireChangeEvent) {
                    setTimeout(function () {
                        select2.trigger("change");
                    }, 0);
                }

            }
        },

        getValue: function () {
            var select = $(this.element).data($Control.DATA_ORIGIN_INPUT),
                select2 = $(select).data("select2Object");
            if (select2 != null) {
                var data = $(select).select2('data');
                if (data != null && data.length > 0) {
                    return new $Controls.Data.ValuePair($IU.trimString(data[0].id), data[0].name, this.parentValue);
                } else {
                    return new $Controls.Data.ValuePair("", "", this.parentValue);
                }
            } else {
                var ops = select.options,
                    len = ops.length;
                for (var i = 0; i < len; i++) {
                    var op = ops[i];
                    if (op.selected === true) {
                        return new $Controls.Data.ValuePair(op.value, op.text, this.parentValue);
                    }
                }
                return new $Controls.Data.ValuePair("", "", this.parentValue);
            }
        },

        getSortValue: function () {
            return this.getValue().displayValue;
        },

        setElementAttribute: function () {
            //其实suggester2里面没有放hidden字段,只是重用这段代码,originInput是select
            this.setHiddenAttribute("suggester2");
        },

        specialSetting: function () {
            //在这里设置select的样式（将container的样式搬进来）
            var select = $(this.element).data($Control.DATA_ORIGIN_INPUT),
                style = this.element.getAttribute("style");
            if (style != null) {
                select.setAttribute("style", style);
            }
        },

        //初始化select2，这个需要在createViews之后做，因为发现如果该select没有加载到dom里，就没法调用select2插件的初始化
        initSelect2: function () {
            var select = $(this.element).data($Control.DATA_ORIGIN_INPUT),
                $select = $(select),
                height = $IU.getElementStyle(this.element, "height"),
                option = $select.data("ajaxOption"),
                select2 = $select.select2(option);


            $select.removeAttr("style");
            $select.data("select2Object", select2);

            //补全data数据
            var data = $select.find("option:selected").data("data");
            if (data != null) {
                data["name"] = data["text"];
                data["attributes"] = this.initAttributes;
            }

            //如果不可读，重新设置visible
            if (!this.isReadable()) {
                this.visible(false);
            }

            var $select2span = $select.siblings(".select2"),
                $arrow = $select2span.find(".select2-selection__arrow");
            //去除原来的下拉箭头
            $arrow.children().remove();

            if ($IU.endWith(height, "rem")) {
                var rootFontSize = parseFloat($("html").css("font-size"));
                var parseHeight = parseFloat(height) * rootFontSize;
            } else {
                parseHeight = parseInt(height, 10);
            }

            //设置显示高度
            if (!isNaN(parseHeight) && parseHeight !== 0) {

                //最小28，否则影响美观
                /*
                 if (parseHeight < 28) {
                 parseHeight = 28;
                 }
                 */
                var $selection = $select2span.find(".select2-selection");
                $selection.css("height", parseHeight + "px");
                $selection.find(".select2-selection__rendered").css("height", parseHeight + "px").css("line-height", parseHeight + "px");
                $arrow.css("height", (parseHeight - 2) + "px");
            }
            //添加三种不同数据类型的替换下拉箭头的图标
            $arrow.addClass(this.dataType.toLocaleLowerCase());

            if (this.isOnPagePopup === true) {
                //在弹出的page中显示100%宽度
                $(this.element).css("width", "100%");
                $select2span.css("width", "100%");
            }

            this.initEvent();
        },

        initEvent: function () {
            var select = $(this.element).data($Control.DATA_ORIGIN_INPUT),
                $select = $(select),
                select2 = $select.data("select2Object"),
                originControl = this;

            //此段是为了防止焦点从parent字段转到select2字段时候，先触发open，再parent发生change，那么parent会取错
            //这里人为再打开一遍下拉框
            if (this.field.parent != null) {
                select2.on('select2:opening', function (event) {
                    var $self = $(this);
                    if ($self.data('openAgain') !== true) {
                        setTimeout(function () {
                            $self.data('openAgain', true);
                            select2.select2('open');
                            $self.data('openAgain', false);
                        }, 0);
                        return false;
                    } else {
                        //移动版且不在弹出page上，那么弹出一个page，在page里输入
                        if ($IU.shouldShowSuggesterPage() && originControl.isOnPagePopup !== true) {
                            $IU.clearAllError();
                            $IU.showSuggester2Page(originControl);
                            return false;
                        }
                    }
                });
            } else {
                //移动版且不在弹出page上，那么弹出一个page，在page里输入
                if ($IU.shouldShowSuggesterPage() && originControl.isOnPagePopup !== true) {
                    select2.on('select2:opening', function (event) {
                        $IU.clearAllError();
                        $IU.showSuggester2Page(originControl);
                        return false;
                    });
                }
            }

            //选择的时候对选中的选项的数据进行修改，为了选择后不显示description,且可以防止fieldChange过来的数据可能会让选择后显示错误
            select2.on('select2:select', function (event) {
                var $element = $(this),
                    $selectedOption = $element.find("option:selected");
                //修改显示值
                $selectedOption.text(event.params.data.name);
                var data = $selectedOption.data("data");
                data["text"] = data["name"];
                //将空项和选中的以外的option都移除
                $element.find("option").not(":selected").each(function () {
                    if ($(this).val() !== '') {
                        $(this).remove();
                    }
                });

                if (originControl.isOnPagePopup === true) {
                    var $pageDiv = $element.closest(".mobile_page_div");
                    if ($pageDiv.length > 0) {
                        var page = $pageDiv.data(InfoPlus.Render.Mobile.Page.DATA_PAGE_OBJECT);
                        if (page != null) {
                            page.close();
                        }
                    }
                }

            });

            //如果数据类型是用户，如果用户选择了最后一项显示共多少位用户，那么就取消选中
            if (this.dataType.toLocaleLowerCase() === "user") {
                select2.on('select2:selecting', function (event) {
                    if (($IU.trimString((event.params.args.data.id)) || '') === '') {
                        return false;
                    }
                });
            }

            select2.on('select2:open', function () {
                var $dialog = $(this).closest("div.dialog");
                //如果存在于dialog(masterDetail)中，那么将container的zindex提高
                if ($dialog.length > 0) {
                    var overlayZIndex = $dialog.parent().css("z-index");
                    if ((overlayZIndex || '') !== '') {
                        select2.data('select2').$dropdown.css("z-index", overlayZIndex);
                    }
                }
                //如果是在page里
                if (originControl.isOnPagePopup === true) {
                    var $pageDiv = $(this).closest(".mobile_page_div");
                    if ($pageDiv.length > 0) {
                        select2.data('select2').$dropdown.css("z-index", $pageDiv.css("z-index"));
                    }
                }
            });
        },

        //设置PlaceHolder
        setPlaceHolder: function () {
            if (this.field != null && this.field.placeHolder != null) {
                this.option['placeholder'] = this.field.placeHolder;
            } else {
                //如果没placeholder就设置一个空的，配合allowClear出现删除按钮，如果没有配置placeholder，那么删除按钮将不会出现
                this.option['placeholder'] = '';
            }
        },

        showTooltip: function () {
            if (this.tooltip == null || this.tooltip.tip === '') return;
            var tooltip = this.tooltip;
            var $element = $(this.element);
            setTimeout(function () {
                var $searchContainer = null;
                $(".select2-container").each(function () {
                    if (!$(this).hasClass("select2")) {
                        $searchContainer = $(this);
                    }
                });
                if ($searchContainer != null) {
                    if ($searchContainer.offset().top < $element.offset().top) {
                        $element.validationEngine("showPrompt", $IU.htmlEncode(tooltip.tip), tooltip.type, 'bottomLeft', true);
                    } else {
                        $element.validationEngine("showPrompt", $IU.htmlEncode(tooltip.tip), tooltip.type, 'topLeft', true);
                    }

                    $(".select2-search__field").one("blur", function () {
                        $element.validationEngine("hidePrompt");
                    });
                }
            }, 300);
        },

        //以下是动态动作
        setParentValue: function (parentValue, fromInit) {
            if ((parentValue instanceof $Controls.Data.ValuePair) || (parentValue instanceof $Controls.Data.Uri)) {
                this.parentValue = parentValue.value;
            } else {
                this.parentValue = parentValue;
            }

            var select = $(this.element).data($Control.DATA_ORIGIN_INPUT);

            //初始化或者fieldChange时候都不需要做清空动作
            if (fromInit !== true && $$.params.fieldChanging == null) {
                this.setValue('', '');

                var select2 = $(select).data("select2Object");
                if (select2 != null) {
                    $IU.highLightElement(select);
                }
            }
        },

        visible: function (isVisible) {
            if (this.element == null) return;
            var select = $(this.element).data($Control.DATA_ORIGIN_INPUT),
                $select = $(select),
                select2 = $select.data("select2Object");
            if (isVisible) {
                $select.show();
            } else {
                $select.hide();
            }

            if (select2 != null) {
                var $select2Label = $select.siblings(".select2");
                if (isVisible) {
                    $select2Label.show();
                } else {
                    $select2Label.hide();
                }
            }

            if (isVisible) {
                $(this.controlContainer).show();
            } else {
                $(this.controlContainer).hide();
            }
        },

        setDynamicReadOnly: function (isReadOnly) {
            var $container = $(this.element),
                select = $container.data($Control.DATA_ORIGIN_INPUT);
            if (isReadOnly) {
                select.disabled = true;
                $container.addClass($Control.CLASSNAME_READONLY);
            } else {
                select.disabled = false;
                $container.removeClass($Control.CLASSNAME_READONLY);
            }
        }

    });

    define("InfoPlus.Controls.Suggester2", suggester2);

})(window);
﻿/*
 * Text
 * @Author yech 
 * @Since 2012/02/17
 */
(function (window, undefined) {

    var text = function (path, field, render, initValue) {
        $Control.call(this, $Control.CONTROL_TYPE_TEXT, path, field, render, initValue, null);
    };

    text.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_STRING, $Control.DATA_TYPE_XHTML],
        name: "textarea",
        //elementClassName: "infoplus_textareaControl",

        //override methods
        createElement: function () {
            var element = document.createElement("textarea");
            if (this.field.placeHolder != null) {
                $(element).attr("placeholder", this.field.placeHolder);
            }
            return element;
        },

        setValue: function (fieldValue) {
            if (fieldValue == null) fieldValue = '';
            var $element = $(this.element);
            if (this.maxLength != null) {
                fieldValue = fieldValue.substr(0, this.maxLength);
            }
            $element.val(fieldValue);

            //当值被设置后（初始化，动态value，fieldChange等等），需要执行自动高度初始化命令，使之高度和内容相匹配
            if (this.render.settings.autoSize === true) {
                $element.autoheight("init");
            }
        },

        registerEvent: function () {
            //事件处理方法都是处理maxlength的，如果没设置maxlength也就不用注册事件了
            if (this.maxLength != null && this.isWritable()) {
                this.events = InfoPlus.Controls.Text.Events.events;
            }
        },

        specialSetting: function () {
            //处理white-space,防止不能回车
            var $element = $(this.element);
            //$element.css("white-space", "pre-line");

            this.setMaxLength();
            if (this.maxLength != null && this.isWritable()) {
                //$element.attr("maxlength", this.maxLength);
                //在文本框外面包一层div，以便显示剩余字符数
                var div = document.createElement("div"),
                    $div = $(div);
                $div.addClass("infoplus_textareaControlContainer");
                $div.append(this.element);
                var span = document.createElement("span");
                $(span).addClass("infoplus_textareaControlMaxLengthTip");
                $div.append(span);
                if (this.element.style.width != null) {
                    $div.css("width", this.element.style.width);
                }
                this.maxLengthTipSpan = span;
                this.controlContainer = div;
                $(span).hide();
            }
            if (this.isWritable() && this.field.type === $Control.DATA_TYPE_XHTML) {
                $IU.debugTip($$.lt("text.xhtmlWarning", this.field.name), 'warning');
            }


            if (this.render.settings.autoSize === true) {
                $element.autoheight();
                $element.css("min-height", $element.height());
            }
        },

        getValue: function () {
            var val = this.convertEmptyValue(this.element.value);
            val = val.replace(/\r\n/g, "\n");
            if (this.maxLength != null) {
                val = val.substr(0, this.maxLength);
            }
            return val;
        }
    });

    define("InfoPlus.Controls.Text", text);

    //maxlength的处理参考了http://keith-wood.name/maxlength.html
    var currentLength = function (control) {
        var value = $(control.element).val();
        var len = value.replace(/\r\n/g, '~').replace(/\n/g, '~').length;
        return {used: len, remaining: control.maxLength - len};
    };

    var addClass = function (len, $span, isShowLength) {
        if (len.remaining > 0) {
            $span.removeClass("incorrect").addClass("correct");
        } else {
            $span.removeClass("correct").addClass("incorrect");
        }
        if (isShowLength) {
            $span.addClass("length");
        } else {
            $span.removeClass("length");
        }

    };

    var showCurrentLengthTip = function (control, slide) {
        var maxLength = control.maxLength,
            len = currentLength(control);

        var $span = $(control.maxLengthTipSpan);
        $span.text(len.used + "/" + maxLength);
        addClass(len, $span, true);
        if (control.hideTipTimer != null) clearTimeout(control.hideTipTimer);
        if (slide === true) {
            $span.show('slide', {direction: 'right'}, 500);
        } else {
            $span.show();
        }

        control.hideTipTimer = setTimeout(function () {
            $span.fadeOut(1000);
        }, 3000);
    };

    var showMaxLengthTip = function (control) {
        var maxLength = control.maxLength,
            len = currentLength(control);
        var $span = $(control.maxLengthTipSpan);
        $span.text($$.lt("text.maxLength", maxLength));
        addClass(len, $span, false);
        if (control.hideTipTimer != null) clearTimeout(control.hideTipTimer);
        $span.show();
        control.hideTipTimer = setTimeout(function () {
            $span.hide('slide', {direction: 'right'},
                1000, function () {
                    showCurrentLengthTip(control, true);
                });
        }, 5000);
    };

    var truncate = function (control) {
        var len = currentLength(control);
        if (len.remaining >= 0) {
            return;
        }
        var element = control.element,
            maxLength = control.maxLength,
            lines = $(element).val().split(/\r\n|\n/),
            value = '',
            i = 0;
        while (value.length < maxLength && i < lines.length) {
            value += lines[i].substring(0, maxLength - value.length) + '\n';
            i++;
        }
        $(element).val(value.substring(0, maxLength));
        element.scrollTop = element.scrollHeight;

        showCurrentLengthTip(control);
    };


    var textEvents = {

        //中文输入法下keypress事件抓不到,keydown事件里return false无法阻止输入，只能在keyup上发现超出后再截断
        onKeyPress: function (event) {
            var textControl = $(this).data($Control.DATA_CONTROL_OBJECT),
                maxLength = textControl.maxLength,
                value = $(textControl.element).val(),
                len = value.replace(/\r\n/g, '~').replace(/\n/g, '~').length;

            if (maxLength == null) {
                return true;
            }
            var ch = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
            return (event.ctrlKey || event.metaKey || ch === '\u0000' || len < maxLength);
        },

        onKeyUp: function (event) {
            var textControl = $(this).data($Control.DATA_CONTROL_OBJECT),
                maxLength = textControl.maxLength;

            if (maxLength != null && textControl.maxLengthTipSpan != null) {
                showCurrentLengthTip(textControl);
                truncate(textControl);
            }
        },

        focus: function () {
            var textControl = $(this).data($Control.DATA_CONTROL_OBJECT),
                maxLength = textControl.maxLength;

            if (maxLength != null && textControl.maxLengthTipSpan != null) {
                showMaxLengthTip(textControl);
            }
        },

        onPaste: function (event) {

        },

        onCut: function (event) {

        }
    };

    textEvents.events = [
        {type: "keypress", handler: textEvents.onKeyPress},
        {type: "keyup", handler: textEvents.onKeyUp},
        {type: "focus", handler: textEvents.focus}
        //{type: "keydown", handler: textEvents.onKeyDown},
        //{type: "paste", handler: textEvents.onPaste},
        //{type: "cut", handler: textEvents.onCut}
    ];

    define("InfoPlus.Controls.Text.Events", textEvents);

})(window);
/*
 * Text
 * @Author yech
 * @Since 2012/02/17
 */
(function (window, undefined) {

    var richtext = function (path, field, render, initValue) {
        $Control.call(this, $Control.CONTROL_TYPE_RICHTEXT, path, field, render, initValue, null);
    };

    richtext.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_XHTML],
        name: "richText",
        //elementClassName: "infoplus_richTextControl",
        editor: null,

        init: function () {
            var settings = this.render.settings || {},
                option = {
                    language: $$.params.lang
                };
            if (settings.autoSize === true) {
                option = $.extend(option, {
                    removePlugins: 'resize'
                });
            } else {
                option = $.extend(option, {
                    removePlugins: 'autogrow'
                });
            }
            var endPoint = $$.params.uriCkUploadImage + "?stepId=" + ($$.params.formStepId == null ? -1 : $$.params.formStepId) + "&field=" + this.field.name;
            if ($$.params.formInstanceId != null) {
                endPoint += "&instanceId=" + $$.params.formInstanceId;
            }
            if ($$.params.workflowId != null) {
                endPoint += "&workflowId=" + $$.params.workflowId;
            }
            if ($$.params.release != null) {
                endPoint += "&release=" + $$.params.release;
            }
            option.imageUploadURL = endPoint;
            this.editor = CKEDITOR.replace(this.element.id + "_text", option);

            var instance = this,
                dynamicReadonly = this.dynamicReadonly,
                dynamicParallelReadonly = this.dynamicParallelReadonly;
            //直接做ckeditor内部还是会报错，放到timeout里做
            setTimeout(function () {
                if (dynamicReadonly || dynamicParallelReadonly) {
                    instance.setDynamicReadOnly(true, false);
                }
            },1000);


        },

        //override methods
        createElement: function () {
            var div = document.createElement("div"),
                textarea = document.createElement("textarea");

            if (this.field.placeHolder != null) {
                $(textarea).attr("placeholder", this.field.placeHolder);
            }

            $(div).append(textarea);
            return div;
        },


        setValue: function (fieldValue) {
            if (fieldValue == null) fieldValue = '';
            $(this.element).children("textarea").val(fieldValue);
        },

        getValue: function () {
            if (window['CKEDITOR'] == null) {
                return this.initValue;
            }
            return CKEDITOR.instances[this.element.id + "_text"].getData();
        },


        //设置元素的id,name属性
        setElementAttribute: function () {
            var element = this.element;
            var render = this.render;
            element.id = render["controlId"] + this.path;
            $(element).children("textarea").attr("id", element.id + "_text");
            $(element).attr("name", render["field"] + this.path);
            $(element).data($Control.DATA_FIELD, render["field"]).data($Control.DATA_RENDER, render);
        },


        //创建Infopath表单带出来的字段属性
        setInfopathFormAttributes: function () {
            var element = this.element;
            if (element == null) return;
            var $textarea = $(element).children("textarea");
            var attributeList = this.render["attributes"];
            if (attributeList == null || !$IU.isArray(attributeList)) return;

            for (var i = 0; i < attributeList.length; i++) {
                var attribute = attributeList[i];
                var key = attribute["key"];
                if (null != attribute["namespace"] && "" !== attribute["namespace"]) {
                    key = attribute["namespace"] + ":" + key;
                }
                try {
                    switch (key.toLocaleLowerCase()) {
                        case "class":
                        case "hidefocus":
                        case "tabindex":
                        case "onclick":
                        case "value":
                        case "contenteditable":
                            break;
                        default:
                            $textarea.attr(key, attribute["value"]);
                            break;
                    }
                } catch (exception) {
                }
            }
        },

        visible: function (isVisible, fromInit) {
            if (this.element == null) return;
            if (isVisible) {
                if (this.isReadable()) {
                    //初始化时候ie执行this.editor.setReadOnly会报错
                    if (!fromInit && this.isWritable() && !this.isDynamicReadonly()) {
                        if (this.editor != null) {
                            this.editor.setReadOnly(false);
                        }
                    }
                    $(this.element).show();
                }
            } else {
                $(this.element).hide();
            }
        },

        setDynamicReadOnly: function (isReadOnly, fromInit) {
            //初始化时候的动态readonly动作应该放到init方法里做，因为那时候ckeditor才初始化完能够正常工作
            if (!fromInit) {
                if (this.editor != null) {
                    this.editor.setReadOnly(isReadOnly);
                }
            }
        },

        setDynamicParallelReadOnly: function () {
            this.dynamicParallelReadonly = true;
            //this.setDynamicReadOnly(true);
        }

    });

    define("InfoPlus.Controls.RichText", richtext);

})(window);
﻿/*
 * File
 * @Author yech
 * @Since 2012/12/03
 */

(function (window, undefined) {

    var file = function (path, field, render, initValue) {
        this.supportXhr = qq.isXhrUploadSupported();
        $Control.call(this, $Control.CONTROL_TYPE_FILE, path, field, render, initValue);
    };

    file.UPLOAD_PROGRESS_DIV = "uploadProgressDiv";
    file.DISPLAY_DIV = "displayDiv";
    file.UPLOAD_DIV = "uploadDiv";
    file.UPLOAD_FILE_ID = "uploadingFileId";
    file.CLASS_UPLOAD_FILE_NAME = "uploadFileName";
    file.CLASS_UPLOAD_FILE_SIZE = "uploadFileSize";
    file.CLASS_CANCEL = "infoplus_fileControl_cancel";
    file.CLASS_LINK = "infoplus_fileControl_link";
    file.OFFICE_FILE_SUFFIX = ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'];
    file.OFFICE365_FILE_SUFFIX = ['docx', 'xlsx'];
    // 在app里用原生方式打开的文件后缀
    file.APP_NATIVE_OPEN_FILE_SUFFIX = ['pdf', 'png', 'jpg', 'jpeg', 'gif'];

    file.MAX_PERCENT_WIDTH = 100;
    file.MIN_PERCENT_WIDTH = 40;

    if (!$$.APP) {
        file.OFFICE_FILE_SUFFIX.push('pdf');
    }

    var calculateWidth = function ($uploadProgressDiv, $uploadFileNameDiv, $uploadFileSizeDiv, $percentDiv) {
        //16是取消按钮宽度，16是预留的空白
        var totalWidth = $uploadProgressDiv.width() - 16 - 16,
            nameWidth = $uploadFileNameDiv.width(),
            sizeWidth = $uploadFileSizeDiv.width(),
            percentWidth = $percentDiv.outerWidth();

        if (nameWidth + sizeWidth + percentWidth < totalWidth) {
            if (totalWidth - nameWidth - sizeWidth > file.MAX_PERCENT_WIDTH) {
                $percentDiv.css("width", file.MAX_PERCENT_WIDTH + "px");
            } else {
                $percentDiv.css("width", (totalWidth - nameWidth - sizeWidth) + "px");
            }
        } else {
            $percentDiv.css("width", "");
            $uploadFileNameDiv.css("width", (totalWidth - sizeWidth - file.MIN_PERCENT_WIDTH) + "px");
        }
    };

    var getFileSuffix = function (fileName) {
        if (fileName == null) {
            return "";
        }
        var dotIndex = fileName.lastIndexOf(".");
        if (dotIndex !== -1 && ((dotIndex + 1) < fileName.length)) {
            return fileName.substring(dotIndex + 1).toLowerCase();
        }
        return "";
    };

    var getUriTypeParam = function (fileInfo) {
        if ($$.APP) {
            var fileSuffix = getFileSuffix(fileInfo.name);
            if (fileSuffix !== "") {
                return "&type=" + fileSuffix;
            }
        }
        return "";
    };

    var getFileLink = function (fileInfo) {
        var uri = fileInfo.uri || "";
        if ($$.APP) {
            var fileSuffix = getFileSuffix(fileInfo.name);
            if (fileSuffix !== "") {
                uri += "?type=" + fileSuffix;
            }
        }
        return uri;
    };

    file.prototype = $.extend(new $Controls.Control(), {
        compatibleFieldTypes: [$Control.DATA_TYPE_STRING, $Control.DATA_TYPE_FILE, $Control.DATA_TYPE_DOC],
        ignoreClass: true,
        allowFocus: true,
        fileInfo: null,
        events: [],
        supportXhr: false,
        autoTriggerFieldChangeEvent: false,
        validatorPromptPosition: 'topLeft',
        name: "file",
        //elementClassName: "infoplus_fileControl",
        hasHiddenElement: true,

        uploadCallbacks: {
            onCancel: function (id, fileName) {
                //debug("cancel " + id);
            },
            onError: function (id, fileName, errorReason) {
                //debug("onerror:" + errorReason);
            },
            onSubmit: function (id, fileName) {
                var $uploadContainer = $($(this._options.button).data("container")),
                    $uploadProgressDiv = $uploadContainer.data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV),
                    $nameDiv = $uploadProgressDiv.find("." + InfoPlus.Controls.File.CLASS_UPLOAD_FILE_NAME).html($IU.htmlEncode(fileName)).css("width", "");
                $uploadProgressDiv.find(".pi").css("width", "0%");
                $uploadProgressDiv.removeClass("focus");
                $uploadContainer.data(InfoPlus.Controls.File.UPLOAD_FILE_ID, id);
                $nameDiv[0].setAttribute("title", $$.lt("file.uploading", fileName));
                $uploadContainer.data(InfoPlus.Controls.File.DISPLAY_DIV).hide();
                $uploadContainer.data(InfoPlus.Controls.File.UPLOAD_DIV).hide();
                $uploadContainer.find(".uploadFileTip").hide();
                $uploadContainer.data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV).show();

                var $sizeDiv = $uploadProgressDiv.find("." + InfoPlus.Controls.File.CLASS_UPLOAD_FILE_SIZE).empty(),
                    $percentDiv = $uploadProgressDiv.find(".po");
                calculateWidth($uploadProgressDiv, $nameDiv, $sizeDiv, $percentDiv);
            },
            onUpload: function (id, fileName) {

            },
            onProgress: function (id, fileName, loaded, total) {
                var $uploadContainer = $($(this._options.button).data("container")),
                    $uploadProgressDiv = $uploadContainer.data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV);
                var sizeObj = $IU.convertFileSize(total);
                var $sizeDiv = $uploadProgressDiv.find("." + InfoPlus.Controls.File.CLASS_UPLOAD_FILE_SIZE).html("(" + sizeObj.size + sizeObj.unit + ")");
                //debug(loaded + " of " + total);
                if (loaded < total) {
                    var percent = Math.round(loaded / total * 100);
                    $uploadProgressDiv.find(".pi").css("width", percent + "%");
                } else {
                    $uploadProgressDiv.find(".pi").css("width", "100%");
                }

                var $nameDiv = $uploadProgressDiv.find("." + InfoPlus.Controls.File.CLASS_UPLOAD_FILE_NAME),
                    $percentDiv = $uploadProgressDiv.find(".po");
                calculateWidth($uploadProgressDiv, $nameDiv, $sizeDiv, $percentDiv);

            },
            onComplete: function (id, fileName, responseJSON) {
                var $uploadContainer = $($(this._options.button).data("container"));
                $uploadContainer.data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV).removeClass("focus");
                $uploadContainer.data(InfoPlus.Controls.File.DISPLAY_DIV).removeClass("focus");
                $uploadContainer.data(InfoPlus.Controls.File.UPLOAD_FILE_ID, null);
                var fileControl = $uploadContainer.data($Control.DATA_CONTROL_OBJECT);
                if (responseJSON.success && responseJSON.infoPlusFile != null) {
                    var fileInfo = responseJSON.infoPlusFile;
                    fileControl.setValue({
                        uploadSuccess: true,
                        id: fileInfo.id,
                        name: fileInfo.name,
                        size: fileInfo.size,
                        uri: fileInfo.uri,
                        mime: fileInfo.mime,
                        createTime: fileInfo.createTime
                    });
                } else {
                    $IU.messageBox(null, $$.lt("file.uploadFail"), null, 300);
                    fileControl.setValue(null);
                }
            },
            onValidateBatch: function (fileData) {
                var validationOption = this._options.validation;
                if (validationOption === undefined || validationOption === null) return true;


                var len = fileData.length;
                for (var i = 0; i < len; i++) {
                    var data = fileData[i];
                    if (data.name !== undefined) {
                        if (validationOption.allowedExtensions !== undefined && validationOption.allowedExtensions.length > 0) {
                            var fileSuffix = getFileSuffix(data.name);
                            var allowedExtensions = validationOption.allowedExtensions;
                            var extensionLength = validationOption.allowedExtensions.length;
                            var matchFileSuffix = false;
                            var allFileSuffix = "";
                            for (var extensionIndex = 0; extensionIndex < extensionLength; extensionIndex++) {
                                allFileSuffix = allFileSuffix + allowedExtensions[extensionIndex] + ((extensionIndex !== extensionLength - 1) ? "," : "");
                                if (fileSuffix === allowedExtensions[extensionIndex]) {
                                    matchFileSuffix = true;
                                }
                            }
                            if (!matchFileSuffix) {
                                $IU.messageBox(null, $$.lt("file.suffix", allFileSuffix), null, 300);
                                return false;
                            }
                        }
                    }

                    if (data.size !== undefined) {
                        var sizeLimit = validationOption.sizeLimit;
                        if (sizeLimit !== null && !isNaN(sizeLimit) && sizeLimit !== 0) {
                            if (data.size > sizeLimit) {
                                var sizeObj = $IU.convertFileSize(sizeLimit);
                                $IU.messageBox(null, $$.lt("file.sizeLimit", (sizeObj.size + sizeObj.unit)), null, 360);
                                return false;
                            }
                        }
                    }
                }
                return true;
            }
        },

        hasFile: function () {
            var fileInfo = this.fileInfo;
            return (fileInfo != null && fileInfo.id != null);
        },

        setPlaceHolder: function () {

            //判断是否是IE8，9
            var isIe89 = function () {
                if ($.browser.msie) {
                    return parseInt($.browser.version, 10) <= 9;
                }
                return false;
            };

            if (this.field != null && this.field.placeHolder != null && this.field.placeHolder !== '') {
                var container = this.element;


                //var link = document.createElement("a");
                var link = document.createElement("span");
                //link.setAttribute("href", "#");
                $(link).text(this.field.placeHolder);


                $(container).find(".uploadFileButton").append(link);

                /*
                var tipDiv = document.createElement("div");
                if (isIe89()) {
                    //ie8,9浏览器中点placeholder产生的link点击会报错(权限会有问题)，这里发现如果是IE89就不产生LINK了，避免这个问题
                    $(tipDiv).text(this.field.placeHolder).addClass("uploadFileTip").css("position", "relative").css("top", "-2px")
                        .click(function () {
                            //$IU.fireClick($(this).parent().children("input")[0]);
                            //return false;
                            $IU.messageBox(null, $$.lt("file.oldIe"), null, 300);
                        });
                    $(container).find(".uploadFileButton").append(tipDiv);
                } else {
                    var link = document.createElement("a");
                    link.setAttribute("href", "#");
                    $(link).text(this.field.placeHolder);


                    tipDiv.appendChild(link);
                    $(tipDiv).addClass("uploadFileTip");
                    $(tipDiv).click(function () {
                        $IU.fireClick($(this).siblings(".uploadFileButton").children("input")[0]);
                        //$IU.fireClick($(this).parent().children("input")[0]);
                        return false;
                    });


                }
                */

                //$(container).find(".uploadFileButton").after(tipDiv);
                //$(container).find(".uploadFileButton").append(tipDiv);
            }
        },


        createDisplayDiv: function (container) {
            var displayDiv = document.createElement("div");
            $(displayDiv).addClass("display").hide().data("container", container);
            var link = document.createElement("a");
            $(link).attr("target", "_blank").attr("href", "#").addClass(InfoPlus.Controls.File.CLASS_LINK);
            var fileNameDiv = document.createElement("div");
            fileNameDiv.setAttribute("class", InfoPlus.Controls.File.CLASS_UPLOAD_FILE_NAME);
            var fileSizeDiv = document.createElement("div");
            fileSizeDiv.setAttribute("class", InfoPlus.Controls.File.CLASS_UPLOAD_FILE_SIZE);
            link.appendChild(fileNameDiv);
            link.appendChild(fileSizeDiv);

            displayDiv.appendChild(link);

            if (this.isWritable()) {
                var uploadSuccessSpan = document.createElement("span");
                uploadSuccessSpan.setAttribute("class", "uploadSuccess");
                $(uploadSuccessSpan).css("display", "none");
                $(uploadSuccessSpan).text($$.lt("file.uploadSuccess"));
                displayDiv.appendChild(uploadSuccessSpan);
            }
            container.appendChild(displayDiv);
            $(container).data(InfoPlus.Controls.File.DISPLAY_DIV, $(displayDiv));

            var fileControl = this;
            var menuItems = [];
            if (this.field.type === $Control.DATA_TYPE_DOC) {
                if ((this.isWritable() || this.isEditable()) && $$.params.uriWordEdit != null && $$.params.uriWordEdit !== '') {
                    menuItems.push({
                        id: "edit",
                        text: $$.lt("file.menu.edit"),
                        iconClass: "i-icon-pencil-square",
                        iconCss: "left:1px",
                        link: true
                    });
                } else {
                    menuItems.push({
                        id: "preview",
                        text: $$.lt("file.menu.preview"),
                        iconClass: "i-icon-search2",
                        initVisible: false,
                        click: function () {
                            fileControl.preview();
                        }
                    });
                }
            } else {
                menuItems.push({
                    id: "preview",
                    text: $$.lt("file.menu.preview"),
                    iconClass: "i-icon-search2",
                    initVisible: false,
                    click: function () {
                        fileControl.preview();
                    }
                });
            }

            menuItems.push({
                id: "download",
                text: $$.lt("file.menu.download"),
                iconClass: "i-icon-cloud-download",
                link: true,
                click: function () {
                    return fileControl.download();
                }
            });


            if (this.isWritable()) {
                menuItems.push({
                    id: "remove",
                    text: $$.lt("file.menu.remove"),
                    iconClass: "i-icon-trash",
                    iconCss: "left:-1px",
                    click: function () {
                        fileControl.deleteFile();
                    }
                });
            }

            this.popMenu = new InfoPlus.Render.PopMenu({
                container: displayDiv,
                items: menuItems,
                horizontalMenuItem: true,
                position: "top-left"
            });

        },

        createUploadProgressDiv: function (container) {
            var uploadProgressDiv = document.createElement("div");
            $(uploadProgressDiv).addClass("uploadProgress").hide().data("container", container);
            var fileNameDiv, cancelDiv;
            if (this.supportXhr) {
                var table = document.createElement("table");
                table.setAttribute("class", "uploadProgressTable");
                var tbody = document.createElement("tbody");
                var tr = document.createElement("tr");
                //first td
                var td = document.createElement("td");
                td.setAttribute("class", "uploadTd");
                var span = document.createElement("span");
                span.setAttribute("class", "uploadSpan");
                fileNameDiv = document.createElement("div");
                fileNameDiv.setAttribute("class", InfoPlus.Controls.File.CLASS_UPLOAD_FILE_NAME);
                var fileSizeDiv = document.createElement("div");
                fileSizeDiv.setAttribute("class", InfoPlus.Controls.File.CLASS_UPLOAD_FILE_SIZE);
                span.appendChild(fileNameDiv);
                span.appendChild(fileSizeDiv);
                td.appendChild(span);
                tr.appendChild(td);

                //second td
                td = document.createElement("td");
                td.setAttribute("class", "uploadTd");
                var uploadContainerDiv = document.createElement("div");
                var progOutDiv = document.createElement("div");
                var progInnerDiv = document.createElement("div");
                progInnerDiv.setAttribute("class", "pi");
                progInnerDiv.setAttribute("style", "width:0%");
                progOutDiv.setAttribute("class", "po");
                progOutDiv.appendChild(progInnerDiv);
                uploadContainerDiv.appendChild(progOutDiv);
                td.appendChild(uploadContainerDiv);
                tr.appendChild(td);


                //third td
                td = document.createElement("td");
                td.setAttribute("class", "uploadTd");
                cancelDiv = document.createElement("div");
                cancelDiv.setAttribute("class", InfoPlus.Controls.File.CLASS_CANCEL);
                cancelDiv.setAttribute("title", $$.lt("common.cancel"));
                td.appendChild(cancelDiv);
                tr.appendChild(td);


                tbody.appendChild(tr);
                table.appendChild(tbody);
                uploadProgressDiv.appendChild(table);
            } else {
                fileNameDiv = document.createElement("div");
                fileNameDiv.setAttribute("class", InfoPlus.Controls.File.CLASS_UPLOAD_FILE_NAME);
                var uploadingDiv = document.createElement("div");
                uploadingDiv.setAttribute("class", "uploading");
                cancelDiv = document.createElement("div");
                cancelDiv.setAttribute("class", InfoPlus.Controls.File.CLASS_CANCEL);
                cancelDiv.setAttribute("title", $$.lt("common.cancel"));
                uploadProgressDiv.appendChild(fileNameDiv);
                uploadProgressDiv.appendChild(uploadingDiv);
                uploadProgressDiv.appendChild(cancelDiv);
            }


            container.appendChild(uploadProgressDiv);
            $(container).data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV, $(uploadProgressDiv));

        },

        createUploadButtonDiv: function (container) {


            var uploadDiv = document.createElement("div");
            if (this.field.settings != null) {
                if (this.field.settings.displayText !== undefined)
                    $(uploadDiv).text(this.field.settings.displayText);
            }

            //uploadDiv是可拖放区域，droppable这个class能在拖放时候高亮显示这个区域
            $(uploadDiv).addClass("uploadFileButton droppable").data("container", container);
            //这个写法比较奇怪，在hide之前先设置display为inline-block，好让jquery记住原来的display
            //如果不写会让jquery以为原来的display是block（firefox,ie）,造成后面show时候排版出错
            //这个可能是由于此时container还没放到dom树中，造成计算css("display")出现错误，在chrome中没有这个错误
            $(uploadDiv).css("display", "inline-block").hide();

            var endPoint = $$.params.attachmentUrl + "?stepId=" + ($$.params.formStepId == null ? -1 : $$.params.formStepId) + "&field=" + this.field.name;
            if ($$.params.formInstanceId != null) {
                endPoint += "&instanceId=" + $$.params.formInstanceId;
            }
            if ($$.params.workflowId != null) {
                endPoint += "&workflowId=" + $$.params.workflowId;
            }
            if ($$.params.release != null) {
                endPoint += "&release=" + $$.params.release;
            }


            //window.formStepId与window.instanceId是两个全局变量，两个id必有其一
            var options = {
                request: {
                    endpoint: endPoint
                },
                button: uploadDiv,
                multiple: false,
                debug: false,
                callbacks: this.uploadCallbacks
            };

            var settings = this.field.settings;

            var getFileSizeLimit = function () {
                if (settings.fileSizeMax !== undefined && $IU.isNumber(settings.fileSizeMax)) {
                    return parseInt(settings.fileSizeMax, 10);
                }
                if (settings.maxLength !== undefined && $IU.isNumber(settings.maxLength)) {
                    return parseInt(settings.maxLength, 10);
                }
            };

            var validation = {};
            if (settings !== undefined && settings !== null) {
                if (settings.fileTypes !== undefined) {
                    validation.allowedExtensions = settings.fileTypes.split(",");
                }
                validation.sizeLimit = getFileSizeLimit();
            }

            if (this.field.type === $Control.DATA_TYPE_DOC) {
                validation.allowedExtensions = file.OFFICE365_FILE_SUFFIX;
            }

            if (validation.allowedExtensions !== undefined || validation.sizeLimit !== undefined) {
                options.validation = validation;
            }

            var uploader = new qq.FineUploaderBasic(options);

            if (qq.DragAndDrop != null) {
                var dragAndDropModule = new qq.DragAndDrop({
                    dropZoneElements: [uploadDiv],
                    classes: {
                        dropActive: "dropActive"
                    },
                    callbacks: {
                        processingDroppedFiles: function () {
                            //TODO: display some sort of a "processing" or spinner graphic
                        },
                        processingDroppedFilesComplete: function (files, dropTarget) {
                            //TODO: hide spinner/processing graphic

                            uploader.addFiles(files); //this submits the dropped files to Fine Uploader
                        }
                    }
                });
            }


            container.appendChild(uploadDiv);
            $(container).data(InfoPlus.Controls.File.UPLOAD_DIV, $(uploadDiv)).data("uploader", uploader);
        },

        //override methods
        createElement: function () {
            var container = document.createElement("div");
            //this.element = container;
            //this.createHiddenElement(container);

            if (this.isReadable()) {
                this.createDisplayDiv(container);
            }
            if (this.isWritable()) {
                this.createUploadProgressDiv(container);
                this.createUploadButtonDiv(container);
            }

            return container;

        },

        //判断时候应该触发fieldChange
        shouldFireChangeEvent: function (newFileInfo) {
            if (this.synced === true) {
                this.synced = false;
                return false;
            }
            if (this.onFieldChange || this.onFieldRefer || this.onFieldSync) {
                if (this.fileInfo == null) {
                    return newFileInfo != null;
                } else {
                    if (newFileInfo == null) {
                        return true;
                    } else {
                        return newFileInfo.id !== this.fileInfo.id;
                    }
                }
            }
            return false;
        },

        //可以接受两种参数，一种是JSON格式string，一种是fileInfo对象{id:id,name:name,size:size,uri:uri}
        setValue: function (fieldValue, fieldDisplayValue, fromInit) {
            var fileInfo;

            if ($IU.isString(fieldValue)) {
                try {
                    fileInfo = $.parseJSON(fieldValue);
                } catch (e) {
                    fileInfo = null;
                }
            } else {
                fileInfo = fieldValue;
            }

            var fireChangeEvent = !(!!fromInit) && this.shouldFireChangeEvent(fileInfo);

            this.fileInfo = fileInfo;
            this.canPreview = false;

            var $container = $(this.element),
                hiddenInput = $container.data($Control.DATA_ORIGIN_INPUT);

            if (fileInfo != null && fileInfo.id != null) {
                hiddenInput.value = fileInfo.id;
                var link = $(this.element).find(".display a")[0];
                if (link != null) {
                    var $link = $(link);
                    link.setAttribute("href", getFileLink(fileInfo));
                    this.fileUri = fileInfo.uri || "";

                    var $menu = $(this.element).find(".infoplus_popMenu"),
                        menuId = $menu.attr("id");
                    $menu.find("#" + menuId + "_download_link").attr("href", link.href);

                    if (this.isWritable() || this.isEditable()) {
                        if (this.field.type === $Control.DATA_TYPE_DOC && $$.params.uriWordEdit != null && $$.params.uriWordEdit !== '') {
                            var url = $$.params.uriWordEdit.replace("%1", $$.params.formStepId);
                            url = url.replace("%2", this.field.name);
                            url = url.replace("%mime", fileInfo.mime !== undefined ? encodeURIComponent(fileInfo.mime) : "");
                            url = url.replace("%uri", encodeURIComponent(fileInfo.uri));
                            url = url.replace("%path", this.path || "");        // path in server, not in DOM
                            $menu.find("#" + menuId + "_edit_link").attr("href", url);
                            link.setAttribute("href", url);
                        }
                    }

                    var title = "";
                    if (fileInfo.name != null) {
                        title = fileInfo.name;
                    }
                    if (fileInfo.createTime != null) {
                        title += (" " + $$.lt("file.createAt", $IU.dateFormat(new Date(fileInfo.createTime * 1000), "yyyy-MM-dd hh:mm:ss")));
                    }
                    link.setAttribute("title", title);
                    $link.find("." + InfoPlus.Controls.File.CLASS_UPLOAD_FILE_NAME).text(fileInfo.name || " ");

                    var sizeObj = $IU.convertFileSize(fileInfo.size);
                    $link.children("." + InfoPlus.Controls.File.CLASS_UPLOAD_FILE_SIZE).html("(" + sizeObj.size + sizeObj.unit + ")");

                    if (fileInfo.uploadSuccess === true) {
                        var successSpan = $(this.element).find(".display span.uploadSuccess")[0];
                        $(successSpan).css("display", "");
                    }

                    var $fileNameDiv = $container.data(InfoPlus.Controls.File.DISPLAY_DIV).find("." + InfoPlus.Controls.File.CLASS_UPLOAD_FILE_NAME),
                        $uploadSpan = $(this.element).find(".display span.uploadSuccess"),
                        showUploadSuccess = $uploadSpan.length > 0 && $uploadSpan[0].style.display !== "none";

                    var width = this.element.style.width,
                        reservedWidth = showUploadSuccess ? 145 : 85;

                    var getMaxWidth = function ($container, reservedWidth) {
                        var $displayDiv = $container.children(".display"),
                            containerWidth = parseInt($container.width(), 10),
                            maxDisplayWidth = parseInt($displayDiv.css("max-width"), 10);
                        if (containerWidth < maxDisplayWidth) {
                            return containerWidth > reservedWidth ? containerWidth - reservedWidth : 0;
                        } else {
                            return maxDisplayWidth > reservedWidth ? maxDisplayWidth - reservedWidth : 0;
                        }
                    };

                    if (width != null && width !== "") {
                        if (width.substring(width.length - 1) !== "%") {
                            $fileNameDiv.css("max-width", getMaxWidth($container, reservedWidth) + "px");
                        } else {
                            //两个宽度不相同(且不为0，ie8下开始width为0)，说明已经放到dom里了，不是初始化时候，那么直接计算，还没放到DOM里时候两者宽度数值都是那个百分比宽度的值
                            if ($container.width() !== 0 && $container.width() !== parseInt(width, 10)) {
                                $fileNameDiv.css("max-width", getMaxWidth($container, reservedWidth) + "px");
                            } else {
                                //如果infopath表单里画了一个百分比的宽度，那么在初始化时候实际宽度是算不出来的，因为还没有放到dom里，采用延时计算的方式,这之前先让fileNameDiv看不见
                                //但是这部分代码还需要考虑动态设置visible，如果初始化时候就是不可见的，后来动态又设置成了可见，show会有动画，container的宽度是渐宽的，所以加入了判断两次宽度是否一致的代码
                                //如果2次宽度一致，说明动画结束了
                                $fileNameDiv.css("max-width", "0px");
                                var setPercentWidth = function () {
                                    if ($container.width() === parseInt(width, 10)) {
                                        setTimeout(function () {
                                            setPercentWidth();
                                        }, 300);
                                    } else {
                                        var maxWidth = getMaxWidth($container, reservedWidth),
                                            currentMaxWidth = parseInt($fileNameDiv.css("max-width"), 10);
                                        $fileNameDiv.css("max-width", maxWidth + "px");
                                        // 如果发现上次设置的max-width和这次设置的不一致，说明有动画，那么再延时做一次setPercentWidth方法（当然这也会导致原本没动画的也会做2次，但并不会有什么副作用）
                                        // 如果发现maxWidth为0（这个只在ie8下发现，可能ie8渲染速度过慢），再延时设置宽度
                                        if (maxWidth !== currentMaxWidth || maxWidth === 0) {
                                            setTimeout(function () {
                                                setPercentWidth();
                                            }, 300);
                                        }
                                    }
                                };
                                setTimeout(function () {
                                    setPercentWidth();
                                }, 300);
                            }
                        }
                    } else {
                        //如果设置了自动宽度，那么在初始化时候实际宽度是算不出来的，因为还没有放到dom里，采用延时计算的方式,这之前先让fileNameDiv看不见
                        $fileNameDiv.css("max-width", "0px");
                        var setAutoWidth = function () {
                            if ($container.width() === 0) {
                                setTimeout(function () {
                                    setAutoWidth();
                                }, 100);
                            } else {
                                $fileNameDiv.css("max-width", getMaxWidth($container, reservedWidth) + "px");
                            }
                        };
                        setTimeout(function () {
                            setAutoWidth();
                        }, 300);
                    }


                    var fileSuffix = getFileSuffix(fileInfo.name);
                    if ((($$.params.uriFilePreview || '') !== '') && $.inArray(fileSuffix, file.OFFICE_FILE_SUFFIX) !== -1) {
                        this.popMenu.showMenuItem("preview");
                        this.canPreview = true;
                    } else {
                        this.popMenu.hideMenuItem("preview");
                    }
                    if ($$.APP) {
                        if ($.inArray(fileSuffix, file.APP_NATIVE_OPEN_FILE_SUFFIX) !== -1) {
                            this.popMenu.setMenuItemText("download", $$.lt("file.menu.open"));
                        } else {
                            this.popMenu.setMenuItemText("download", $$.lt("file.menu.download"));
                        }
                    }
                } else {
                    $(link).children("." + InfoPlus.Controls.File.CLASS_UPLOAD_FILE_NAME).html("&nbsp;");
                }
                $container.data(InfoPlus.Controls.File.DISPLAY_DIV).show();
                if ($container.data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV) !== undefined) {
                    $container.data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV).hide();
                }
                if ($container.data(InfoPlus.Controls.File.UPLOAD_DIV) !== undefined) {
                    $container.data(InfoPlus.Controls.File.UPLOAD_DIV).hide();
                    $container.find(".uploadFileTip").hide();
                }
            } else {
                $container.data($Control.DATA_ORIGIN_INPUT).value = "";
                $container.data(InfoPlus.Controls.File.DISPLAY_DIV).hide();
                if ($container.data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV) !== undefined) {
                    $container.data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV).hide();
                }
                if ($container.data(InfoPlus.Controls.File.UPLOAD_DIV) !== undefined) {
                    $container.data(InfoPlus.Controls.File.UPLOAD_DIV).css("display", "inline-block");
                    $container.find(".uploadFileTip").show();
                }
            }

            if (fireChangeEvent) {
                setTimeout(function () {
                    $(hiddenInput).change();
                }, 0);
            }
        },

        getValue: function () {
            if (this.field == null || this.element == null || this.fileInfo == null) return "";
            var fileInfo = this.fileInfo;
            // 保留fieldChange或者初始化时messenger带过来的其他数据,但是要去除uploadSuccess这个标记字段（否则重新打开页面还会显示上传成功）
            delete fileInfo['uploadSuccess'];
            return $.toJSON(fileInfo);
            /*
            return $.toJSON({
                id: fileInfo.id,
                name: fileInfo.name,
                size: fileInfo.size,
                uri: fileInfo.uri,
                mime: fileInfo.mime,
                createTime: fileInfo.createTime
            });
             */
        },

        getSortValue: function () {
            if (this.field == null || this.element == null || this.fileInfo == null) return "";
            return this.fileInfo.name;
        },


        //设置max-width，min-height
        specialSetting: function () {
            var element = this.element;
            var $container = $(element);
            var width = element.style.width;
            if (width != null) {
                if (width.substring(width.length - 1) !== "%") {
                    var containerWidth = parseInt(width, 10);
                    var uploadingFileNameWidth = this.supportXhr ? containerWidth - 230 : containerWidth - 70;
                    if ($container.data(InfoPlus.Controls.File.DISPLAY_DIV) !== undefined) {
                        var $uploadSuccessSpan = $container.data(InfoPlus.Controls.File.DISPLAY_DIV).find("span.uploadSuccess");
                        var showUploadSuccess = $uploadSuccessSpan.length > 0 && $uploadSuccessSpan[0].style.display !== "none";
                        var reservedWidth = showUploadSuccess ? ($$.MOBILE ? 210 : 165) : ($$.MOBILE ? 130 : 105);
                        $container.data(InfoPlus.Controls.File.DISPLAY_DIV).css("max-width", containerWidth + "px").find("." + InfoPlus.Controls.File.CLASS_UPLOAD_FILE_NAME).css("max-width", (containerWidth - reservedWidth) + "px");
                    }

                    var $uploadProgressDiv = $container.data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV);
                    if ($uploadProgressDiv !== undefined) {
                        $container.data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV).css("max-width", containerWidth + "px").find("." + InfoPlus.Controls.File.CLASS_UPLOAD_FILE_NAME).css("max-width", uploadingFileNameWidth + "px");
                        if (!this.supportXhr) {
                            $container.data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV).find(".uploadSpan").css("max-width" + (containerWidth - 30) + "px");

                            var $uploadTable = $container.data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV).find(".uploadProgressTable");
                            if ($uploadTable.length !== 0) {
                                $uploadTable[0].setAttribute("width", (containerWidth - 14));
                                $uploadTable.find("td.uploadTd")[0].width = (containerWidth - 30);
                                $uploadTable.find("td.uploadTd")[1].width = 16;
                            }
                        }
                    }
                } else {
                    //百分比宽度
                }
            }
            //将height转换成为min-height,防止画表单时候设置了固定高度情况下，已上传的文件显示高度会超过table格线
            var height = element.style.height;
            if (height != null) {
                $(element).css("height", "").css("min-height", height);
            }
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.File.Events.events;
        },

        setDynamicReadOnly: function (isReadOnly) {
            var container = this.element;
            if (isReadOnly) {
                $(container).addClass($Control.CLASSNAME_READONLY);
                this.popMenu.hideMenuItem("remove");
                this.popMenu.hideMenuItem("edit");
            } else {
                $(container).removeClass($Control.CLASSNAME_READONLY);
                this.popMenu.showMenuItem("remove");
                this.popMenu.showMenuItem("edit");
            }
        },

        setDynamicParallelReadOnly: function () {
            this.dynamicParallelReadonly = true;
            this.setDynamicReadOnly(true);
        },

        preview: function () {
            if ($$.params.uriFilePreview != null && $$.params.uriFilePreview !== '') {
                var field = this.field,
                    fileUri = this.fileUri,
                    fileInfo = this.fileInfo;
                if (field.settings != null && field.settings["fileSecure"] === true) {
                    $$.ajax({
                        type: "POST",
                        url: $$.params.attachmentTokenUrl,
                        addFormParam: true,
                        data: {
                            field: field.name,
                            fileUri: fileUri
                        }
                    }).done(function (data) {
                        if (data != null) {
                            if (data.errno === 0) {
                                var token = data.entities[0];
                                if ($IU.isObject(token)) {
                                    token = token['token'];
                                }
                                fileUri += ((fileUri.indexOf("?") !== -1) ? "&" : "?") + "access_token=" + token;
                                var url = $$.params.uriFilePreview.replace("%s", encodeURIComponent(fileUri));
                                if (!$$.MOBILE) {
                                    $IU.iframeBox(url, fileInfo.name, false, true);
                                } else {
                                    var page = new InfoPlus.Render.Mobile.Page({
                                        title: fileInfo.name,
                                        uri: url
                                    });
                                    page.show();
                                }
                            } else {
                                $$.debug(data.error);
                            }
                        }
                    });
                } else {
                    var url = $$.params.uriFilePreview.replace("%s", encodeURIComponent(fileUri));
                    if (!$$.MOBILE) {
                        $IU.iframeBox(url, fileInfo.name, false, true);
                    } else {
                        var page = new InfoPlus.Render.Mobile.Page({
                            title: fileInfo.name,
                            uri: url
                        });
                        page.show();
                    }
                }

            }
            return false;
        },

        download: function () {

            var field = this.field;
            if (field.settings != null && field.settings["fileSecure"] === true) {
                if (this.popupDownloadTip != null) {
                    this.popupDownloadTip.close(true);
                }
                var popTip = createPopupTip(this);
                this.popupDownloadTip = popTip;

                var fileUri = this.fileUri,
                    fileControl = this;
                $$.ajax({
                    type: "POST",
                    url: $$.params.attachmentTokenUrl,
                    addFormParam: true,
                    data: {
                        field: field.name,
                        fileUri: fileUri
                    }
                }).done(function (data) {
                    if (data != null) {
                        if (data.errno === 0) {
                            var token = data.entities[0];
                            if ($IU.isObject(token)) {
                                var expireIn = token['expireIn'];
                                token = token['token'];
                            }
                            fileUri += ((fileUri.indexOf("?") !== -1) ? "&" : "?") + "access_token=" + token;
                            fileUri += getUriTypeParam(fileControl.fileInfo);
                            //故意延时一秒，给用户安全感...
                            setTimeout(function () {
                                createSecureDownloadTipContent(popTip, fileUri, expireIn);
                            }, 1000);
                        } else {
                            $$.debug(data.error);
                        }
                    }
                });
                return false;
            }
        },

        deleteFile: function () {
            var instance = this;
            $IU.confirmBox($$.lt("file.confirmDelete"), $$.lt("common.confirm"), $$.lt("common.ok"), 300, function () {
                instance.setValue(null);
            });
        }
    });

    define("InfoPlus.Controls.File", file);

    var createPopupTip = function (fileControl) {
        var contentDiv = document.createElement("div"),
            $contentDiv = $(contentDiv),
            textSpan = document.createElement("span"),
            $textSpan = $(textSpan);
        $textSpan.text($$.lt("file.prepareSecureLink")).addClass("loadingSecureLink");
        $contentDiv.append(textSpan);
        return new InfoPlus.Render.PopTip({
            popper: fileControl.element,
            content: contentDiv,
            showCloseButton: true,
            backgroundColor: '#f8eda5',
            placement: 'top'
        });
    };

    var createSecureDownloadTipContent = function (popTip, fileUri, expireIn) {
        var contentDiv = document.createElement("div"),
            $contentDiv = $(contentDiv);
        var linkSpan = document.createElement("span"),
            downloadSpan = document.createElement("span"),
            link = document.createElement("a");
        $(linkSpan).text($$.lt("file.secureLinkReady"));
        $(downloadSpan).text($$.lt("file.download"));
        $(link).text($$.lt("file.link")).attr("href", fileUri).attr("target", "_blank").addClass("secureFileLink");
        $contentDiv.append(linkSpan).append(link).append(downloadSpan).css("");
        if (expireIn !== undefined) {
            var now = new Date();
            var second = expireIn - Math.round(now.getTime() / 1000);
            var invalidSpan = document.createElement("span");
            $(invalidSpan).text($$.lt("file.invalid", second));
            $contentDiv.append(invalidSpan);
            var updateInvalidTimeFlag = setInterval(function () {
                now = new Date();
                second = expireIn - Math.round(now.getTime() / 1000);
                if (second > 0) {
                    $(invalidSpan).text($$.lt("file.invalid", second));
                } else {
                    popTip.close();
                    clearInterval(updateInvalidTimeFlag);
                }
            }, 1000);

        }

        popTip.changeContent(contentDiv);
    };

    var fileEvents = {

        onCancel: function () {
            var $container = $(this).parents("." + $Control.CLASSNAME_CONTROL);
            var uploadingFileId = $container.data(InfoPlus.Controls.File.UPLOAD_FILE_ID);
            if (uploadingFileId != null) {
                var uploader = $container.data("uploader");
                uploader.cancel(uploadingFileId);
                var fileControl = $container.data($Control.DATA_CONTROL_OBJECT);
                fileControl.setValue(null);
            }

        },

        onFocusIn: function () {
            if ($(this).data(InfoPlus.Controls.File.DISPLAY_DIV) !== undefined) {
                $(this).data(InfoPlus.Controls.File.DISPLAY_DIV).addClass("focus");
            }
            if ($(this).data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV) !== undefined) {
                $(this).data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV).addClass("focus");
            }
        },

        onFocusOut: function () {
            if ($(this).data(InfoPlus.Controls.File.DISPLAY_DIV) !== undefined) {
                $(this).data(InfoPlus.Controls.File.DISPLAY_DIV).removeClass("focus");
            }
            if ($(this).data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV) !== undefined) {
                $(this).data(InfoPlus.Controls.File.UPLOAD_PROGRESS_DIV).removeClass("focus");
            }
        },

        onLinkClick: function () {
            //移动端屏蔽链接功能，否则可能无法从菜单上点击删除，下载等功能
            if ($$.MOBILE) return false;
            var fileControl = $(this).parents(".infoplus_fileControl").data(InfoPlus.Controls.Control.DATA_CONTROL_OBJECT);
            if (fileControl != null) {
                if (fileControl.field.type === $Control.DATA_TYPE_DOC) {
                    if ((fileControl.isWritable() || fileControl.isEditable()) && $$.params.uriWordEdit != null && $$.params.uriWordEdit !== '') {
                        //编辑
                        return true;
                    }
                }
                if (fileControl.canPreview === true) {
                    //预览
                    fileControl.preview();
                    return false;
                }

            }
            //下载
            return fileControl.download();
        },

        //处理鼠标右键点击
        onMouseDown: function (event) {
            if (event.button === 2) {
                var fileControl = $(this).data(InfoPlus.Controls.Control.DATA_CONTROL_OBJECT);
                var field = fileControl.field;
                if (field.settings != null && field.settings["fileSecure"] === true) {

                    if (fileControl.popupDownloadTip != null) {
                        fileControl.popupDownloadTip.close(true);
                    }
                    var popTip = createPopupTip(fileControl);
                    fileControl.popupDownloadTip = popTip;

                    var fileUri = fileControl.fileUri;
                    $$.ajax({
                        type: "POST",
                        url: $$.params.attachmentTokenUrl,
                        addFormParam: true,
                        data: {
                            field: field.name,
                            fileUri: fileUri
                        }
                    }).done(function (data) {
                        if (data != null) {
                            if (data.errno === 0) {
                                var token = data.entities[0];
                                if ($IU.isObject(token)) {
                                    var expireIn = token['expireIn'];
                                    token = token['token'];
                                }
                                fileUri += ((fileUri.indexOf("?") !== -1) ? "&" : "?") + "access_token=" + token;
                                fileUri += getUriTypeParam(fileControl.fileInfo);
                                setTimeout(function () {
                                    createSecureDownloadTipContent(popTip, fileUri, expireIn);
                                }, 1000);
                            } else {
                                $$.debug(data.error);
                            }
                        }
                    });
                    return false;
                }
            }
        }

    };

    fileEvents.events = [
        { selector: "." + InfoPlus.Controls.File.CLASS_CANCEL, type: "click", handler: fileEvents.onCancel },
        { selector: "." + InfoPlus.Controls.File.CLASS_LINK, type: "click", handler: fileEvents.onLinkClick },
        { type: "focusin", handler: fileEvents.onFocusIn },
        { type: "focusout", handler: fileEvents.onFocusOut },
        { type: "mousedown", handler: fileEvents.onMouseDown }
    ];

    define("InfoPlus.Controls.File.Events", fileEvents);

})(window);

/*
 * File
 * @Author yech
 * @Since 2019/04/01
 */

(function (window, undefined) {

    var doc = function (path, field, render, initValue) {
        this.supportXhr = qq.isXhrUploadSupported();
        $Control.call(this, $Control.CONTROL_TYPE_DOC, path, field, render, initValue);
    };

    doc.UPLOAD_PROGRESS_DIV = "uploadProgressDiv";
    doc.DISPLAY_DIV = "displayDiv";
    doc.UPLOAD_DIV = "uploadDiv";
    doc.UPLOAD_FILE_ID = "uploadingFileId";
    doc.CLASS_UPLOAD_FILE_NAME = "uploadFileName";
    doc.CLASS_UPLOAD_FILE_SIZE = "uploadFileSize";
    doc.CLASS_CANCEL = "infoplus_fileControl_cancel";
    doc.OFFICE_FILE_SUFFIX = ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'];
    doc.OFFICE365_FILE_SUFFIX = ['docx', 'xlsx'];

    doc.MAX_PERCENT_WIDTH = 100;
    doc.MIN_PERCENT_WIDTH = 40;
    var calculateWidth = function ($uploadProgressDiv, $uploadFileNameDiv, $uploadFileSizeDiv, $percentDiv) {
        //16是取消按钮宽度，16是预留的空白
        var totalWidth = $uploadProgressDiv.width() - 16 - 16,
            nameWidth = $uploadFileNameDiv.width(),
            sizeWidth = $uploadFileSizeDiv.width(),
            percentWidth = $percentDiv.outerWidth();

        if (nameWidth + sizeWidth + percentWidth < totalWidth) {
            if (totalWidth - nameWidth - sizeWidth > doc.MAX_PERCENT_WIDTH) {
                $percentDiv.css("width", doc.MAX_PERCENT_WIDTH + "px");
            } else {
                $percentDiv.css("width", (totalWidth - nameWidth - sizeWidth) + "px");
            }
        } else {
            $percentDiv.css("width", "");
            $uploadFileNameDiv.css("width", (totalWidth - sizeWidth - doc.MIN_PERCENT_WIDTH) + "px");
        }
    };

    doc.prototype = $.extend(new $Controls.Control(), {
        compatibleFieldTypes: [$Control.DATA_TYPE_DOC],
        ignoreClass: true,
        allowFocus: true,
        fileInfo: null,
        events: [],
        supportXhr: false,
        autoTriggerFieldChangeEvent: false,
        validatorPromptPosition: 'topLeft',
        name: "doc",
        hasHiddenElement: true,

        uploadCallbacks: {
            onCancel: function (id, fileName) {
                //debug("cancel " + id);
            },
            onError: function (id, fileName, errorReason) {
                //debug("onerror:" + errorReason);
            },
            onSubmit: function (id, fileName) {
                var $uploadContainer = $($(this._options.button).data("container")),
                    $uploadProgressDiv = $uploadContainer.data(doc.UPLOAD_PROGRESS_DIV),
                    $nameDiv = $uploadProgressDiv.find("." + doc.CLASS_UPLOAD_FILE_NAME).html($IU.htmlEncode(fileName)).css("width", "");
                $uploadProgressDiv.find(".pi").css("width", "0%");
                $uploadProgressDiv.removeClass("focus");
                $uploadContainer.data(doc.UPLOAD_FILE_ID, id);
                $nameDiv[0].setAttribute("title", $$.lt("file.uploading", fileName));
                $uploadContainer.data(doc.UPLOAD_DIV).hide();
                $uploadContainer.data(doc.UPLOAD_PROGRESS_DIV).show();

                var $sizeDiv = $uploadProgressDiv.find("." + doc.CLASS_UPLOAD_FILE_SIZE).empty(),
                    $percentDiv = $uploadProgressDiv.find(".po");
                calculateWidth($uploadProgressDiv, $nameDiv, $sizeDiv, $percentDiv);
            },
            onUpload: function (id, fileName) {

            },
            onProgress: function (id, fileName, loaded, total) {
                var $uploadContainer = $($(this._options.button).data("container")),
                    $uploadProgressDiv = $uploadContainer.data(doc.UPLOAD_PROGRESS_DIV);
                var sizeObj = $IU.convertFileSize(total);
                var $sizeDiv = $uploadProgressDiv.find("." + doc.CLASS_UPLOAD_FILE_SIZE).html("(" + sizeObj.size + sizeObj.unit + ")");
                //debug(loaded + " of " + total);
                if (loaded < total) {
                    var percent = Math.round(loaded / total * 100);
                    $uploadProgressDiv.find(".pi").css("width", percent + "%");
                } else {
                    $uploadProgressDiv.find(".pi").css("width", "100%");
                }

                var $nameDiv = $uploadProgressDiv.find("." + doc.CLASS_UPLOAD_FILE_NAME),
                    $percentDiv = $uploadProgressDiv.find(".po");
                calculateWidth($uploadProgressDiv, $nameDiv, $sizeDiv, $percentDiv);

            },
            onComplete: function (id, fileName, responseJSON) {
                var $uploadContainer = $($(this._options.button).data("container"));
                $uploadContainer.data(doc.UPLOAD_PROGRESS_DIV).removeClass("focus");
                $uploadContainer.data(doc.DISPLAY_DIV).removeClass("focus");
                $uploadContainer.data(doc.UPLOAD_FILE_ID, null);
                var fileControl = $uploadContainer.data($Control.DATA_CONTROL_OBJECT);
                if (responseJSON.success && responseJSON.infoPlusFile != null) {
                    var fileInfo = responseJSON.infoPlusFile;
                    fileControl.setValue({
                        uploadSuccess: true,
                        id: fileInfo.id,
                        name: fileInfo.name,
                        size: fileInfo.size,
                        uri: fileInfo.uri,
                        mime: fileInfo.mime,
                        createTime: fileInfo.createTime
                    });
                } else {
                    $IU.messageBox(null, $$.lt("file.uploadFail"), null, 300);
                    fileControl.setValue(null);
                }
            },
            onValidateBatch: function (fileData) {
                var validationOption = this._options.validation;
                if (validationOption === undefined || validationOption === null) return true;

                var getFileSuffix = function (fileName) {
                    var dotIndex = fileName.lastIndexOf(".");
                    if (dotIndex !== -1 && ((dotIndex + 1) < fileName.length)) {
                        return fileName.substring(dotIndex + 1).toLowerCase();
                    }
                    return "";
                };

                var len = fileData.length;
                for (var i = 0; i < len; i++) {
                    var data = fileData[i];
                    if (data.name !== undefined) {
                        if (validationOption.allowedExtensions !== undefined && validationOption.allowedExtensions.length > 0) {
                            var fileSuffix = getFileSuffix(data.name);
                            var allowedExtensions = validationOption.allowedExtensions;
                            var extensionLength = validationOption.allowedExtensions.length;
                            var matchFileSuffix = false;
                            var allFileSuffix = "";
                            for (var extensionIndex = 0; extensionIndex < extensionLength; extensionIndex++) {
                                allFileSuffix = allFileSuffix + allowedExtensions[extensionIndex] + ((extensionIndex !== extensionLength - 1) ? "," : "");
                                if (fileSuffix === allowedExtensions[extensionIndex]) {
                                    matchFileSuffix = true;
                                }
                            }
                            if (!matchFileSuffix) {
                                $IU.messageBox(null, $$.lt("file.suffix", allFileSuffix), null, 300);
                                return false;
                            }
                        }
                    }

                    if (data.size !== undefined) {
                        var sizeLimit = validationOption.sizeLimit;
                        if (sizeLimit !== null && !isNaN(sizeLimit) && sizeLimit !== 0) {
                            if (data.size > sizeLimit) {
                                var sizeObj = $IU.convertFileSize(sizeLimit);
                                $IU.messageBox(null, $$.lt("file.sizeLimit", (sizeObj.size + sizeObj.unit)), null, 360);
                                return false;
                            }
                        }
                    }
                }
                return true;
            }
        },

        hasFile: function () {
            var fileInfo = this.fileInfo;
            return (fileInfo != null && fileInfo.id != null);
        },

        setPlaceHolder: function () {

            if (this.field != null && this.field.placeHolder != null && this.field.placeHolder !== '') {
                var container = this.element;
                var link = document.createElement("span");
                $(link).text(this.field.placeHolder);
                $(container).find(".uploadFileButton").append(link);
            }
        },

        createIframe: function (displayDiv) {
            var iframe = document.createElement("iframe");
            iframe.setAttribute('scrolling', 'auto');
            displayDiv.appendChild(iframe);
            return iframe;
        },

        createDisplayDiv: function (container) {

            var displayDiv = document.createElement("div"),
                $displayDiv = $(displayDiv);
            $displayDiv.addClass("display").hide().data("container", container);
            this.createIframe(displayDiv);
            container.appendChild(displayDiv);
            $(container).data(doc.DISPLAY_DIV, $displayDiv);


            if (this.isWritable()) {
                var docControl = this;
                var menuItems = [{
                    id: "remove",
                    text: $$.lt("file.menu.remove"),
                    iconClass: "i-icon-trash",
                    iconCss: "left:-1px",
                    click: function () {
                        docControl.deleteFile();
                    }
                }];

                this.popMenu = new InfoPlus.Render.PopMenu({
                    container: displayDiv,
                    items: menuItems,
                    horizontalMenuItem: true,
                    position: "top-left"
                });
            }

        },

        createUploadProgressDiv: function (container) {
            var uploadProgressDiv = document.createElement("div");
            $(uploadProgressDiv).addClass("uploadProgress").hide().data("container", container);
            var fileNameDiv, cancelDiv;
            if (this.supportXhr) {
                var table = document.createElement("table");
                table.setAttribute("class", "uploadProgressTable");
                var tbody = document.createElement("tbody");
                var tr = document.createElement("tr");
                //first td
                var td = document.createElement("td");
                td.setAttribute("class", "uploadTd");
                var span = document.createElement("span");
                span.setAttribute("class", "uploadSpan");
                fileNameDiv = document.createElement("div");
                fileNameDiv.setAttribute("class", doc.CLASS_UPLOAD_FILE_NAME);
                var fileSizeDiv = document.createElement("div");
                fileSizeDiv.setAttribute("class", doc.CLASS_UPLOAD_FILE_SIZE);
                span.appendChild(fileNameDiv);
                span.appendChild(fileSizeDiv);
                td.appendChild(span);
                tr.appendChild(td);

                //second td
                td = document.createElement("td");
                td.setAttribute("class", "uploadTd");
                var uploadContainerDiv = document.createElement("div");
                //uploadContainerDiv.setAttribute("class", "pc");
                var progOutDiv = document.createElement("div");
                var progInnerDiv = document.createElement("div");
                progInnerDiv.setAttribute("class", "pi");
                progInnerDiv.setAttribute("style", "width:0%");
                progOutDiv.setAttribute("class", "po");
                progOutDiv.appendChild(progInnerDiv);
                uploadContainerDiv.appendChild(progOutDiv);
                td.appendChild(uploadContainerDiv);
                tr.appendChild(td);


                //third td
                td = document.createElement("td");
                td.setAttribute("class", "uploadTd");
                cancelDiv = document.createElement("div");
                cancelDiv.setAttribute("class", doc.CLASS_CANCEL);
                cancelDiv.setAttribute("title", $$.lt("common.cancel"));
                td.appendChild(cancelDiv);
                tr.appendChild(td);


                tbody.appendChild(tr);
                table.appendChild(tbody);
                uploadProgressDiv.appendChild(table);
            } else {
                fileNameDiv = document.createElement("div");
                fileNameDiv.setAttribute("class", doc.CLASS_UPLOAD_FILE_NAME);
                var uploadingDiv = document.createElement("div");
                uploadingDiv.setAttribute("class", "uploading");
                cancelDiv = document.createElement("div");
                cancelDiv.setAttribute("class", doc.CLASS_CANCEL);
                cancelDiv.setAttribute("title", $$.lt("common.cancel"));
                uploadProgressDiv.appendChild(fileNameDiv);
                uploadProgressDiv.appendChild(uploadingDiv);
                uploadProgressDiv.appendChild(cancelDiv);
            }


            container.appendChild(uploadProgressDiv);
            $(container).data(doc.UPLOAD_PROGRESS_DIV, $(uploadProgressDiv));

        },

        createUploadButtonDiv: function (container) {


            var uploadDiv = document.createElement("div");
            if (this.field.settings != null) {
                if (this.field.settings.displayText !== undefined)
                    $(uploadDiv).text(this.field.settings.displayText);
            }

            //uploadDiv是可拖放区域，droppable这个class能在拖放时候高亮显示这个区域
            $(uploadDiv).addClass("uploadFileButton droppable").data("container", container);
            //这个写法比较奇怪，在hide之前先设置display为inline-block，好让jquery记住原来的display
            //如果不写会让jquery以为原来的display是block（firefox,ie）,造成后面show时候排版出错
            //这个可能是由于此时container还没放到dom树中，造成计算css("display")出现错误，在chrome中没有这个错误
            $(uploadDiv).css("display", "inline-block").hide();

            var endPoint = $$.params.attachmentUrl + "?stepId=" + ($$.params.formStepId == null ? -1 : $$.params.formStepId) + "&field=" + this.field.name;
            if ($$.params.formInstanceId != null) {
                endPoint += "&instanceId=" + $$.params.formInstanceId;
            }
            if ($$.params.workflowId != null) {
                endPoint += "&workflowId=" + $$.params.workflowId;
            }
            if ($$.params.release != null) {
                endPoint += "&release=" + $$.params.release;
            }


            //window.formStepId与window.instanceId是两个全局变量，两个id必有其一
            var options = {
                request: {
                    endpoint: endPoint
                },
                button: uploadDiv,
                multiple: false,
                debug: false,
                callbacks: this.uploadCallbacks,
                validation: {
                    allowedExtensions: doc.OFFICE365_FILE_SUFFIX
                }
            };

            var settings = this.field.settings;
            var getFileSizeLimit = function () {
                if (settings.fileSizeMax !== undefined && $IU.isNumber(settings.fileSizeMax)) {
                    return parseInt(settings.fileSizeMax, 10);
                }
                if (settings.maxLength !== undefined && $IU.isNumber(settings.maxLength)) {
                    return parseInt(settings.maxLength, 10);
                }
            };

            if (settings !== undefined && settings !== null) {
                options.validation.sizeLimit = getFileSizeLimit();
            }

            var uploader = new qq.FineUploaderBasic(options);

            if (qq.DragAndDrop != null) {
                var dragAndDropModule = new qq.DragAndDrop({
                    dropZoneElements: [uploadDiv],
                    classes: {
                        dropActive: "dropActive"
                    },
                    callbacks: {
                        processingDroppedFiles: function () {
                            //TODO: display some sort of a "processing" or spinner graphic
                        },
                        processingDroppedFilesComplete: function (files, dropTarget) {
                            //TODO: hide spinner/processing graphic

                            uploader.addFiles(files); //this submits the dropped files to Fine Uploader
                        }
                    }
                });
            }


            container.appendChild(uploadDiv);
            $(container).data(doc.UPLOAD_DIV, $(uploadDiv)).data("uploader", uploader);
        },

        //override methods
        createElement: function () {
            var container = document.createElement("div");

            if (this.isReadable()) {
                this.createDisplayDiv(container);
            }
            if (this.isWritable()) {
                this.createUploadProgressDiv(container);
                this.createUploadButtonDiv(container);
            }

            return container;

        },

        //判断时候应该触发fieldChange
        shouldFireChangeEvent: function (newFileInfo) {
            if (this.synced === true) {
                this.synced = false;
                return false;
            }
            if (this.onFieldChange || this.onFieldRefer || this.onFieldSync) {
                if (this.fileInfo == null) {
                    return newFileInfo != null;
                } else {
                    if (newFileInfo == null) {
                        return true;
                    } else {
                        return newFileInfo.id !== this.fileInfo.id;
                    }
                }
            }
            return false;
        },

        //可以接受两种参数，一种是JSON格式string，一种是fileInfo对象{id:id,name:name,size:size,uri:uri}
        setValue: function (fieldValue, fieldDisplayValue, fromInit) {
            var fileInfo;

            if ($IU.isString(fieldValue)) {
                try {
                    fileInfo = $.parseJSON(fieldValue);
                } catch (e) {
                    fileInfo = null;
                }
            } else {
                fileInfo = fieldValue;
            }

            var fireChangeEvent = !(!!fromInit) && this.shouldFireChangeEvent(fileInfo);

            this.fileInfo = fileInfo;
            this.canPreview = false;

            var $container = $(this.element),
                hiddenInput = $container.data($Control.DATA_ORIGIN_INPUT),
                $iframe = $(this.element).find("iframe");

            if (fileInfo != null && fileInfo.id != null) {
                hiddenInput.value = fileInfo.id;
                if ($iframe.length !== 0) {
                    //有写权限且不是移动版，用编辑页面显示，否则用预览页面显示
                    if ((this.isWritable() || this.isEditable()) && !$$.MOBILE) {
                        if ($$.params.uriWordEdit != null && $$.params.uriWordEdit !== '') {
                            var url = $$.params.uriWordEdit.replace("%1", $$.params.formStepId);
                            url = url.replace("%2", this.field.name);
                            url = url.replace("%mime", fileInfo.mime !== undefined ? encodeURIComponent(fileInfo.mime) : "");
                            url = url.replace("%uri", encodeURIComponent(fileInfo.uri));
                            url = url.replace("%path", this.path || "");        // path in server, not in DOM
                            $iframe.attr("src", url);
                        }
                    } else {
                        if ($$.params.uriFilePreview != null && $$.params.uriFilePreview !== '') {
                            url = $$.params.uriFilePreview.replace("%s", encodeURIComponent(fileInfo.uri));
                            $iframe.attr("src", url);
                        }
                    }
                }
                $container.data(doc.DISPLAY_DIV).show();
                if ($container.data(doc.UPLOAD_PROGRESS_DIV) !== undefined) {
                    $container.data(doc.UPLOAD_PROGRESS_DIV).hide();
                }
                if ($container.data(doc.UPLOAD_DIV) !== undefined) {
                    $container.data(doc.UPLOAD_DIV).hide();
                }
            } else {
                $container.data($Control.DATA_ORIGIN_INPUT).value = "";
                $container.data(doc.DISPLAY_DIV).hide();
                if ($container.data(doc.UPLOAD_PROGRESS_DIV) !== undefined) {
                    $container.data(doc.UPLOAD_PROGRESS_DIV).hide();
                }
                if ($container.data(doc.UPLOAD_DIV) !== undefined) {
                    $container.data(doc.UPLOAD_DIV).css("display", "inline-block");
                }
                $iframe.attr("src", "");
            }

            if (fireChangeEvent) {
                setTimeout(function () {
                    $(hiddenInput).change();
                }, 0);
            }
        },

        getValue: function () {
            if (this.field == null || this.element == null || this.fileInfo == null) return "";
            var fileInfo = this.fileInfo;
            // 保留fieldChange或者初始化时messenger带过来的其他数据,但是要去除uploadSuccess这个标记字段（否则重新打开页面还会显示上传成功）
            delete fileInfo['uploadSuccess'];
            return $.toJSON(fileInfo);
            /*
            return $.toJSON({
                id: fileInfo.id,
                name: fileInfo.name,
                size: fileInfo.size,
                uri: fileInfo.uri,
                mime: fileInfo.mime,
                createTime: fileInfo.createTime
            });
             */

        },

        getSortValue: function () {
            if (this.field == null || this.element == null || this.fileInfo == null) return "";
            return this.fileInfo.name;
        },


        //设置width,height
        specialSetting: function () {
            var element = this.element,
                $container = $(element),
                $iframe = $container.find("iframe");
            var width = element.style.width;
            if (width != null) {
                $iframe.css("width", width);
            }
            var height = element.style.height;
            if (height != null) {
                $iframe.css("height", height);
            }
            $container.data("size", {width: width, height: height}).css("width", "").css("height", "");
        },

        closeIframe: function () {
            if (this.hasFile()) {
                //$(this.element).find("iframe").remove();
                $(this.element).find("iframe").attr("src", "");
                $(this.element).data("iframeClosed", true);
            }
        },

        reopenIframe: function () {
            var $container = $(this.element);
            if (!$container.data("iframeClosed")) {
                return;
            }
            /*
            var $displayDiv = $container.data(doc.DISPLAY_DIV),
                iframe = this.createIframe($displayDiv[0]),
                $iframe = $(iframe),
                size = $container.data("size");
            $iframe.css("width", size.width).css("height", size.height);
            */
            this.setValue(this.fileInfo);
        },

        registerEvent: function () {
            this.events = doc.Events.events;
        },

        setDynamicReadOnly: function (isReadOnly) {
            var container = this.element;
            if (isReadOnly) {
                $(container).addClass($Control.CLASSNAME_READONLY);
                if (this.popMenu !== undefined) {
                    this.popMenu.hideMenuItem("remove");
                }
            } else {
                $(container).removeClass($Control.CLASSNAME_READONLY);
                if (this.popMenu !== undefined) {
                    this.popMenu.showMenuItem("remove");
                }
            }
        },

        setDynamicParallelReadOnly: function () {
            this.dynamicParallelReadonly = true;
            this.setDynamicReadOnly(true);
        },

        deleteFile: function () {
            var instance = this;
            $IU.confirmBox($$.lt("file.confirmDelete"), $$.lt("common.confirm"), $$.lt("common.ok"), 300, function () {
                instance.setValue(null);
            });
        }
    });

    define("InfoPlus.Controls.Doc", doc);

    var docEvents = {

        onCancel: function () {
            var $container = $(this).parents("." + $Control.CLASSNAME_CONTROL);
            var uploadingFileId = $container.data(doc.UPLOAD_FILE_ID);
            if (uploadingFileId != null) {
                var uploader = $container.data("uploader");
                uploader.cancel(uploadingFileId);
                var fileControl = $container.data($Control.DATA_CONTROL_OBJECT);
                fileControl.setValue(null);
            }

        },

        onFocusIn: function () {
            if ($(this).data(doc.UPLOAD_PROGRESS_DIV) !== undefined) {
                $(this).data(doc.UPLOAD_PROGRESS_DIV).addClass("focus");
            }
        },

        onFocusOut: function () {
            if ($(this).data(doc.UPLOAD_PROGRESS_DIV) !== undefined) {
                $(this).data(doc.UPLOAD_PROGRESS_DIV).removeClass("focus");
            }
        }


    };

    docEvents.events = [
        {selector: "." + doc.CLASS_CANCEL, type: "click", handler: docEvents.onCancel},
        {type: "focusin", handler: docEvents.onFocusIn},
        {type: "focusout", handler: docEvents.onFocusOut}
    ];

    define("InfoPlus.Controls.Doc.Events", docEvents);

})(window);

﻿/*
 * Help
 * @Author yech 
 * @Since 2012/12/29
 */

(function (window, undefined) {

    var help = function (path, field, render, initValue) {
        $Control.call(this, $Control.CONTROL_TYPE_HELP, path, field, render, initValue);
    };

    help.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_STRING],
        ignoreClass: true,
        ignoreValidation: true,
        allowFocus: false,
        //helpInfo: null,
        autoTriggerFieldChangeEvent: false,
        name: "help",
        //elementClassName: "infoplus_helpControl",
        hasHiddenElement: true,


        //override methods

        createElement: function () {
            var element = document.createElement("div");
            $(element).data("showTitle", false).tipsy({
                html: true,
                fade: true,
                gravity: $.fn.tipsy.autoWE,
                trigger: 'manual',
                opacity: 0.9
            });
            //this.createHiddenElement(element);
            return element;
        },

        setValue: function (fieldValue, fieldDisplayValue, fromInit) {
            if (fieldValue == null) fieldValue = '';

            var fireChangeEvent = !(!!fromInit) && this.shouldFireChangeEvent(fieldValue);

            var htmlValue = "<div class=\"tipsy-inner-infoplus\">" + $IU.htmlEncode(fieldValue) + "</div>";
            //this.helpInfo = { value: fieldValue, html: htmlValue };
            this.element.setAttribute("original-title", htmlValue);
            var hiddenInput = $(this.element).data($Control.DATA_ORIGIN_INPUT);
            hiddenInput.value = fieldValue;

            if (fireChangeEvent) {
                setTimeout(function () {
                    $(hiddenInput).change();
                }, 0);
            }
        },

        getValue: function () {
            //if (this.helpInfo === null) return "";
            //return this.helpInfo.value || "";
            var hiddenInput = $(this.element).data($Control.DATA_ORIGIN_INPUT);
            var val = this.convertEmptyValue(hiddenInput.value);
            return val.replace(/\r\n/g, "\n");
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.Help.Events.events;
        }

    });

    define("InfoPlus.Controls.Help", help);

    var helpEvents = {
        onClick: function () {
            $(this).data("showTitle", true).tipsy("show");
        },

        onMouseEnter: function () {
            if (!$$.MOBILE) {
                $(this).data("showTitle", true).tipsy("show");
            }
        },

        onMouseLeave: function () {
            if (!$$.MOBILE) {
                $(this).data("showTitle", false).tipsy("hide");
            }
        },

        onTouchStart: function () {
            if ($(this).data("showTitle") === true) {
                $(this).data("showTitle", false).tipsy("hide");
            } else {
                $(this).data("showTitle", true).tipsy("show");
            }
            return false;
        }


    };

    helpEvents.events = [
        {type: "mouseenter", handler: helpEvents.onMouseEnter},
        {type: "mouseleave", handler: helpEvents.onMouseLeave},
        {type: "click", handler: helpEvents.onClick},
        {type: "touchstart", handler: helpEvents.onTouchStart}

    ];

    define("InfoPlus.Controls.Help.Events", helpEvents);

})(window);
﻿/*
 * Image -- readonly picture
 * @Author yech 
 * @Since 2014/07/19
 */

(function (window, undefined) {

    var image = function (path, field, render, initValue, initDisplayValue, initAttributes) {
        $Control.call(this, $Control.CONTROL_TYPE_IMAGE, path, field, render, initValue, initDisplayValue, initAttributes);
    };

    image.DATA_IMG = "img";
    image.DATA_IMG_LOADED = "loaded";
    image.DATA_IMG_LOADFAIL_COUNT = "failCount";
    image.MAX_IMG_LOADFAIL_COUNT = 10;
    image.CLASS_IMAGE = "infoplus_imageControl_image";
    image.DEFAULT_FORMAT = "jpeg";

    image.prototype = $.extend(new $Controls.Control(), {
        compatibleFieldTypes: [$Control.DATA_TYPE_STRING, $Control.DATA_TYPE_ANYURI, $Control.DATA_TYPE_FILE, $Control.DATA_TYPE_THING],
        ignoreClass: true,
        ignoreValidation: true,
        allowFocus: false,
        imageInfo: null,
        name: "image",
        //elementClassName: "infoplus_imageControl",
        hasHiddenElement: true,


        //override methods
        createElement: function () {
            var element = document.createElement("div");
            var link = document.createElement("a");
            link.setAttribute("data-lightbox", $$.guid());
            var img = document.createElement("img");
            img.setAttribute("class", image.CLASS_IMAGE);
            link.appendChild(img);
            element.appendChild(link);
            $(element).data(InfoPlus.Controls.Image.DATA_IMG, img);
            return element;
        },

        setValue: function (fieldValue, fieldDisplayValue, fromInit, attributes) {
            var imageInfo;

            if (this.field.type === $Control.DATA_TYPE_THING) {
                imageInfo = {
                    uri: $IU.getBarcodePrintUrl(fieldValue)
                }
            } else {
                if ($IU.isString(fieldValue)) {
                    if ($IU.isUrl(fieldValue)) {
                        imageInfo = {
                            uri: fieldValue
                        }
                    } else {
                        //可以parse的说明是json格式，否则就按照base64来处理
                        try {
                            imageInfo = $.parseJSON(fieldValue);
                        } catch (e) {
                            imageInfo = null;
                        }
                    }
                } else {
                    imageInfo = fieldValue;
                }
            }

            this.imageInfo = imageInfo;

            var $element = $(this.element),
                hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT),
                imgElement = $element.data(InfoPlus.Controls.Image.DATA_IMG),
                $imgElement = $(imgElement);
            if (imageInfo != null) {
                if (this.field.type === $Control.DATA_TYPE_THING) {
                    hiddenInput.value = fieldValue;
                } else {
                    if ($IU.isUrl(fieldValue)) {
                        hiddenInput.value = fieldValue;
                    } else {
                        hiddenInput.value = $.toJSON({
                            id: imageInfo.id,
                            name: imageInfo.name,
                            size: imageInfo.size,
                            uri: imageInfo.uri,
                            mime: imageInfo.mime
                        });
                    }
                }
                $imgElement.attr("src", imageInfo.uri).data(InfoPlus.Controls.Image.DATA_IMG_LOADFAIL_COUNT, 0);
                $imgElement.parent().attr("href", imageInfo.uri);
            } else {
                //imageInfo为null，如果fieldValue有值说明是base64编码的数据
                if (fieldValue != null && fieldValue !== "") {
                    var imageFormat = (this.field.format || "jpeg").toLowerCase();
                    if (!(imageFormat === "png" || imageFormat === "gif" || imageFormat === "jpeg")) {
                        imageFormat = image.DEFAULT_FORMAT;
                    }
                    var src = "data:image/" + imageFormat + ";base64," + fieldValue;
                    hiddenInput.value = fieldValue;
                    $imgElement.attr("src", src);
                    $imgElement.parent().attr("href", src);
                } else {
                    hiddenInput.value = "";
                    $imgElement.removeAttr("src").hide();
                    $imgElement.parent().attr("href", "");
                }
            }
            this.setAttributes(attributes);
            $element.data($Control.DATA_DISPLAY_VALUE, fieldDisplayValue);
        },

        getValue: function () {
            var $element = $(this.element),
                hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT),
                val = this.convertEmptyValue(hiddenInput.value);
            switch (this.field.type) {
                case $Control.DATA_TYPE_ANYURI:
                    return new $Controls.Data.Uri(val);
                case $Control.DATA_TYPE_THING:
                    var displayValue = $element.data($Control.DATA_DISPLAY_VALUE);
                    return new $Controls.Data.Thing(val, displayValue);
                default:
                    return val;
            }
        },

        getAttributes: function () {
            if (this.field.type === $Control.DATA_TYPE_ANYURI) {
                var val = this.getValue();
                return $IU.getParamFromUrl(val.value);
            }
            if (this.field.type === $Control.DATA_TYPE_THING) {
                return $(this.element).data($Control.DATA_ATTRIBUTES);
            }
            return null;
        },

        getSortValue: function () {
            if (this.field == null || this.element == null || this.imgageInfo == null) return "";
            return this.imageInfo.name;
        },

        setElementAttribute: function () {
            var $element = $(this.element),
                w = $element[0].style.width,
                h = $element[0].style.height;
            this.setHiddenAttribute();

            var $img = $($element.data(image.DATA_IMG));
            $img.css("width", w);
            $img.css("height", h);
            $img.css("cursor", "pointer");
            $element.attr("style", "float:left;margin:0; padding:0;");
        },
        /*
         registerEvent: function () {
         this.events = InfoPlus.Controls.Image.Events.events;
         }
         */

        specialSetting: function () {
            var $img = $($(this.element).data(image.DATA_IMG));
            $img.data(image.DATA_IMG_LOADED, false);
            $img.on("load", function () {
                $(this).data(image.DATA_IMG_LOADED, true);
                $(this).fadeIn().data(image.DATA_IMG_LOADFAIL_COUNT, 0);
            }).on("error", function () {
                var failCount = $(this).data(image.DATA_IMG_LOADFAIL_COUNT) + 1;
                if (failCount < image.MAX_IMG_LOADFAIL_COUNT) {
                    $(this).data(image.DATA_IMG_LOADFAIL_COUNT, failCount);
                    var src = $(this).parent().attr("href"),
                        imgInstance = this;
                    setTimeout(function () {
                        $(imgInstance).attr("src", src);
                    }, 1000 + failCount * 200);
                }
            });


        }
    });

    define("InfoPlus.Controls.Image", image);


})(window);
﻿/*
 * Picture
 * @Author yech 
 * @Since 2014/08/07
 */

(function (window, undefined) {

    var picture = function (path, field, render, initValue) {
        $Control.call(this, $Control.CONTROL_TYPE_PICTURE, path, field, render, initValue);
    };

    picture.UPLOAD_PICTURE_ID = "uploadingPictureId";
    picture.DISPLAY_DIV = "displayDiv";
    picture.DISPLAY_IMG = "displayImg";
    picture.PREVIEW_IMG = "previewImg";
    picture.UPLOAD_DIV = "uploadDiv";
    picture.MASK_DIV = "maskDiv";
    picture.UPLOAD_FILE_ID = "uploadingFileId";
    picture.CLASS_DELETE_PICTURE = "infoplus_pictureControl_delete";
    picture.DISPLAY_DIV_MAX_WIDTH = "maxW";
    picture.DISPLAY_DIV_MAX_HEIGHT = "maxH";
    picture.IMG_LOAD_LOCAL = "ll";
    picture.DATA_IMG_LOADFAIL_COUNT = "failCount";
    picture.DATA_URL = "url";

    picture.prototype = $.extend(new $Controls.Control(), {
        compatibleFieldTypes: [$Control.DATA_TYPE_STRING, $Control.DATA_TYPE_FILE],
        ignoreClass: true,
        autoTriggerFieldChangeEvent: false,
        validatorPromptPosition: 'topLeft',
        name: "picture",
        //elementClassName: "infoplus_pictureControl",
        hasHiddenElement: true,
        pictureInfo: null,

        uploadCallbacks: {
            onCancel: function (id, fileName) {
                //debug("cancel " + id);
            },
            onError: function (id, fileName, errorReason) {
                //debug("onerror:" + errorReason);
            },
            onSubmit: function (id, fileName, localFileName) {

                var $container = $($(this._options.button).data("container")),
                    $displayDiv = $container.data(InfoPlus.Controls.Picture.DISPLAY_DIV),
                    $uploadDiv = $container.data(InfoPlus.Controls.Picture.UPLOAD_DIV),
                    previewImg = $displayDiv.data(InfoPlus.Controls.Picture.PREVIEW_IMG),
                    $displayImg = $($displayDiv.data(InfoPlus.Controls.Picture.DISPLAY_IMG)),
                    $previewImg = $(previewImg),
                    $link = $($(previewImg).parent()[0]),
                    //file = $uploadDiv.children("input[type='file']")[0];
                    // mod by marstone, 2018/08/01, to compatible with fine-uploader-5.16.2
                    file = this._buttons[0].getInput();

                var instance = this,
                    pictureControl = $container.data($Control.DATA_CONTROL_OBJECT);


                if (file.files && file.files[0]) {
                    $previewImg.data(InfoPlus.Controls.Picture.IMG_LOAD_LOCAL, true);
                    $previewImg.css("margin-top", (pictureControl.getMaxHeight() + 1) + "px");
                    $previewImg.css("margin-left", (pictureControl.getMaxWidth() + 1) + "px").show();
                    var reader = new FileReader();
                    reader.onload = function (evt) {
                        previewImg.src = evt.target.result;
                        $link.attr("href", previewImg.src);
                    };
                    reader.readAsDataURL(file.files[0]);
                } else {

                    if (previewImg.filters && localFileName) {

                        $displayImg.hide();
                        $previewImg.css("margin-top", (pictureControl.getMaxHeight() + 1) + "px");
                        $previewImg.css("margin-left", (pictureControl.getMaxWidth() + 1) + "px").show();
                        $displayDiv.show();
                        $uploadDiv.hide();

                        if ($.browser.msie && $.browser.version.substr(0, 1) === "9") {
                            //$previewImg.css("filter", "progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=image); ");
                            //img.src = src;
                            var oldOffsetWidth = previewImg.offsetWidth,
                                oldOffsetHeight = previewImg.offsetHeight;

                            previewImg.filters.item('DXImageTransform.Microsoft.AlphaImageLoader').src = localFileName;
                            var timer = setInterval(function () {
                                if (previewImg.offsetWidth !== oldOffsetWidth || previewImg.offsetHeight !== oldOffsetHeight) {
                                    var zoomRect = $IU.clacImgZoomParam(pictureControl.getMaxWidth(), pictureControl.getMaxHeight(), previewImg.offsetWidth, previewImg.offsetHeight);
                                    pictureControl.setDisplayDivSize(zoomRect.width, zoomRect.height);
                                    $displayDiv.css("filter", "progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale,src=\"" + localFileName + "\"");
                                    $previewImg.hide();
                                    clearTimeout(timer);
                                }
                            }, 500);
                        } else {
                            previewImg.filters.item('DXImageTransform.Microsoft.AlphaImageLoader').src = localFileName;
                            var rect = $IU.clacImgZoomParam(pictureControl.getMaxWidth(), pictureControl.getMaxHeight(), previewImg.offsetWidth, previewImg.offsetHeight);
                            pictureControl.setDisplayDivSize(rect.width, rect.height);
                            $displayDiv.css("filter", "progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale,src=\"" + localFileName + "\"");
                            $(previewImg).hide();
                        }
                    }
                }

                $container.data(InfoPlus.Controls.Picture.UPLOAD_FILE_ID, id);

                setTimeout(function () {
                    instance.uploadStoredFiles();
                }, 0);

            },

            onUpload: function (id, fileName) {
                var $container = $($(this._options.button).data("container")),
                    $displayDiv = $container.data(InfoPlus.Controls.Picture.DISPLAY_DIV),
                    $maskDiv = $displayDiv.data(InfoPlus.Controls.Picture.MASK_DIV),
                    pictureControl = $container.data($Control.DATA_CONTROL_OBJECT);

                $maskDiv.css("top", "0%");
                $maskDiv[0].style.width = $displayDiv[0].style.width;
                $maskDiv[0].style.height = $displayDiv[0].style.height;
                $maskDiv.show();

                var maxWidth = pictureControl.getMaxWidth(),
                    maxHeight = pictureControl.getMaxHeight(),
                    size = maxHeight < maxWidth ? maxHeight : maxWidth,
                    lines = 10 + parseInt(size / 25, 10),
                    radius = 5 + parseInt(size / 10, 10),
                    width = 4 + parseInt(size / 100, 10),
                    length = 4 + parseInt(size / 80, 10);

                var opts = {
                    lines: lines, // The number of lines to draw
                    length: length, // The length of each line
                    width: width, // The line thickness
                    radius: radius, // The radius of the inner circle
                    corners: 1, // Corner roundness (0..1)
                    rotate: 0, // The rotation offset
                    direction: 1, // 1: clockwise, -1: counterclockwise
                    color: '#ffffff', // #rgb or #rrggbb or array of colors
                    speed: 1, // Rounds per second
                    trail: 60, // Afterglow percentage
                    shadow: false, // Whether to render a shadow
                    hwaccel: true, // Whether to use hardware acceleration
                    className: 'spinner', // The CSS class to assign to the spinner
                    zIndex: 2e9, // The z-index (defaults to 2000000000)
                    top: '50%', // Top position relative to parent
                    left: '50%' // Left position relative to parent
                };

                var spinner = new Spinner(opts).spin($displayDiv[0]);
                var tipDiv = document.createElement("div");
                $(tipDiv).css("font-size", "12px").css("white-space", "nowrap").css("word-wrap", "normal")
                    .css("top", "50%").css("left", "50%")
                    .css("margin-left", "-25px").css("margin-top", "-6px").css("color", opts.color).text('正在上传');
                spinner.el.appendChild(tipDiv);
                $displayDiv.data("spin", spinner);


            },
            onProgress: function (id, fileName, loaded, total) {

                var $container = $($(this._options.button).data("container")),
                    $displayDiv = $container.data(InfoPlus.Controls.Picture.DISPLAY_DIV),
                    $maskDiv = $displayDiv.data(InfoPlus.Controls.Picture.MASK_DIV);
                var percent = (loaded < total) ? Math.round(loaded / total * 100) : 100;
                $maskDiv.css("top", percent + "%");

            },
            onComplete: function (id, fileName, responseJSON) {
                var $container = $($(this._options.button).data("container")),
                    $displayDiv = $container.data(InfoPlus.Controls.Picture.DISPLAY_DIV),
                    $maskDiv = $displayDiv.data(InfoPlus.Controls.Picture.MASK_DIV),
                    pictureControl = $container.data($Control.DATA_CONTROL_OBJECT);
                var spinner = $displayDiv.data("spin");
                if (spinner != null) {
                    spinner.stop();
                }
                $maskDiv.css("top", "100%").hide();

                $container.data(InfoPlus.Controls.Picture.UPLOAD_FILE_ID, null);
                if (responseJSON.success && responseJSON.infoPlusFile != null) {
                    var pictureInfo = responseJSON.infoPlusFile;
                    pictureControl.setValue({
                        uploadSuccess: true,
                        id: pictureInfo.id,
                        name: pictureInfo.name,
                        size: pictureInfo.size,
                        uri: pictureInfo.uri,
                        mime: pictureInfo.mime
                    });
                } else {
                    $IU.messageBox(null, $$.lt("picture.uploadFail"), null, 300);
                    pictureControl.setValue(null);
                }
            },
            onValidateBatch: function (fileData) {
                var validationOption = this._options.validation;
                if (validationOption === undefined || validationOption === null) return true;

                var getFileSuffix = function (fileName) {
                    var dotIndex = fileName.lastIndexOf(".");
                    if (dotIndex !== -1 && ((dotIndex + 1) < fileName.length)) {
                        return fileName.substring(dotIndex + 1).toLowerCase();
                    }
                    return "";
                };

                var len = fileData.length;
                for (var i = 0; i < len; i++) {
                    var data = fileData[i];
                    if (data.name !== undefined) {
                        if (validationOption.allowedExtensions !== undefined && validationOption.allowedExtensions.length > 0) {
                            var fileSuffix = getFileSuffix(data.name);
                            var allowedExtensions = validationOption.allowedExtensions;
                            var extensionLength = validationOption.allowedExtensions.length;
                            var matchFileSuffix = false;
                            var allFileSuffix = "";
                            for (var extensionIndex = 0; extensionIndex < extensionLength; extensionIndex++) {
                                allFileSuffix = allFileSuffix + allowedExtensions[extensionIndex] + ((extensionIndex !== extensionLength - 1) ? "," : "");
                                if (fileSuffix === allowedExtensions[extensionIndex]) {
                                    matchFileSuffix = true;
                                }
                            }
                            if (!matchFileSuffix) {
                                $IU.messageBox(null, $$.lt("picture.suffix", allFileSuffix), null, 300);
                                return false;
                            }
                        }
                    }

                    if (data.size !== undefined) {
                        var sizeLimit = validationOption.sizeLimit;
                        if (sizeLimit !== null && !isNaN(sizeLimit) && sizeLimit !== 0) {
                            if (data.size > sizeLimit) {
                                var sizeObj = $IU.convertFileSize(sizeLimit);
                                $IU.messageBox(null, $$.lt("picture.sizeLimit", (sizeObj.size + sizeObj.unit)), null, 360);
                                return false;
                            }
                        }
                    }
                }
                return true;
            }
        },


        createUploader: function (container, uploadDiv) {
            var endPoint = $$.params.attachmentUrl + "?stepId=" + ($$.params.formStepId == null ? -1 : $$.params.formStepId) + "&field=" + this.field.name;
            if ($$.params.formInstanceId != null) {
                endPoint += "&instanceId=" + $$.params.formInstanceId;
            }
            if ($$.params.workflowId != null) {
                endPoint += "&workflowId=" + $$.params.workflowId;
            }
            if ($$.params.release != null) {
                endPoint += "&release=" + $$.params.release;
            }

            var options = {
                request: {
                    endpoint: endPoint
                },
                button: uploadDiv,
                multiple: false,
                debug: false,
                autoUpload: false,
                callbacks: this.uploadCallbacks
            };

            var settings = this.field.settings;
            var getFileSizeLimit = function () {
                if (settings.fileSizeMax !== undefined && $IU.isNumber(settings.fileSizeMax)) {
                    return parseInt(settings.fileSizeMax, 10);
                }
                if (settings.maxLength !== undefined && $IU.isNumber(settings.maxLength)) {
                    return parseInt(settings.maxLength, 10);
                }
                return null;
            };
            var validation = {allowedExtensions: ['jpg', 'jpeg', 'gif', 'png']};
            if (settings !== undefined && settings !== null) {
                var sizeLimit = getFileSizeLimit();
                if (sizeLimit != null) {
                    validation.sizeLimit = sizeLimit;
                }
            }
            options.validation = validation;

            var uploader = new qq.FineUploaderBasic(options);

            $(container).data("uploader", uploader);
        },

        createUploadDiv: function (container) {
            var uploadDiv = document.createElement("div");
            $(uploadDiv).attr("title", $$.lt("picture.upload")).addClass("uploadDiv").data("container", container).hide();
            container.appendChild(uploadDiv);
            this.createUploader(container, uploadDiv);
            $(container).data(InfoPlus.Controls.File.UPLOAD_DIV, $(uploadDiv));
        },

        getMaxWidth: function () {
            var $container = $(this.element),
                $displayDiv = $container.data(InfoPlus.Controls.Picture.DISPLAY_DIV),
                maxWidth = $displayDiv.data(InfoPlus.Controls.Picture.DISPLAY_DIV_MAX_WIDTH);
            //百分比其实不支持
            if (maxWidth.substr(maxWidth.length - 1) === "%") {
                maxWidth = $container.outerWidth() * parseInt(maxWidth, 10) / 100;
            } else {
                maxWidth = parseFloat(maxWidth);
            }

            return maxWidth;
        },

        getMaxHeight: function () {
            var $container = $(this.element),
                $displayDiv = $container.data(InfoPlus.Controls.Picture.DISPLAY_DIV),
                maxHeight = $displayDiv.data(InfoPlus.Controls.Picture.DISPLAY_DIV_MAX_HEIGHT);
            //百分比其实不支持
            if (maxHeight.substr(maxHeight.length - 1) === "%") {
                maxHeight = $container.outerHeight() * parseInt(maxHeight, 10) / 100;
            } else {
                maxHeight = parseFloat(maxHeight);
            }

            return maxHeight;
        },

        createDisplayDiv: function (container) {
            var instance = this,
                displayDiv = document.createElement("div"),
                link = document.createElement("a"),
                $displayDiv = $(displayDiv),
                $container = $(container);

            link.setAttribute("data-lightbox", $$.guid());
            var previewImg = document.createElement("img");
            $(previewImg).attr("border", "0").addClass("preview")
                .data(InfoPlus.Controls.Picture.IMG_LOAD_LOCAL, false)
                .data(InfoPlus.Controls.Picture.DISPLAY_DIV, $(displayDiv));
            $(previewImg).load(function () {
                var $uploadDiv = $container.data(InfoPlus.Controls.Picture.UPLOAD_DIV),
                    maxWidth = instance.getMaxWidth(),
                    maxHeight = instance.getMaxHeight();
                $displayDiv.addClass("uploading");
                $uploadDiv.hide();
                $displayDiv.show();

                var rect = $IU.clacImgZoomParam(maxWidth, maxHeight, this.width, this.height);
                this.width = rect.width;
                this.height = rect.height;
                $(this).css("margin-left", "0px").css("margin-top", "0px");
                instance.setDisplayDivSize(rect.width, rect.height);
                $(this).data(InfoPlus.Controls.Picture.IMG_LOAD_LOCAL, false);
            });
            link.appendChild(previewImg);

            var displayImg = document.createElement("img");
            $(displayImg).attr("border", "0").data(InfoPlus.Controls.Picture.DISPLAY_DIV, $(displayDiv));


            $(displayImg).load(function () {
                var img = this,
                    $img = $(img),
                    $uploadDiv = $container.data(InfoPlus.Controls.Picture.UPLOAD_DIV),
                    maxWidth = instance.getMaxWidth(),
                    maxHeight = instance.getMaxHeight();
                $img.css("margin-top", (maxHeight + 1) + "px")
                    .css("margin-left", (maxWidth + 1) + "px")
                    .show();

                var getImgWidth = function (image) {
                    if (image.naturalWidth != null) {
                        return image.naturalWidth;
                    } else {
                        return image.width;
                    }
                };

                var getImgHeight = function (image) {
                    if (image.naturalHeight != null) {
                        return image.naturalHeight;
                    } else {
                        return image.height;
                    }
                };

                var setImgSize = function () {
                    var w = getImgWidth(img),
                        h = getImgHeight(img);
                    $img.data("naturalWidth", w).data("naturalHeight", h);
                    var rect = $IU.clacImgZoomParam(maxWidth, maxHeight, w, h);
                    img.width = rect.width;
                    img.height = rect.height;
                    $(img).css("margin-left", "0px").css("margin-top", "0px");
                    if ($(displayDiv).css("filter") != null) {
                        $(displayDiv).css("filter", "");
                    }
                    instance.setDisplayDivSize(rect.width, rect.height);
                    $displayDiv.show();
                    $(previewImg).hide();
                    $(img).show();
                    if ($uploadDiv != null) {
                        $uploadDiv.hide();
                    }
                    $(img).parent().attr("href", img.src);
                };
                //记录原始大小
                //在ie8中，即使是image已经load完，但是其width,height还是会取不到，需要等一会儿才能正常（其它浏览器都正确）
                //所以这里发现如果width,height为0，就设置interval去取，直到取到再设置图片以及displayDiv的大小
                if (getImgWidth(img) === 0 || getImgHeight(img) === 0) {
                    var flag = setInterval(function () {
                        if (getImgWidth(img) !== 0 && getImgHeight(img) !== 0) {
                            setImgSize();
                            clearTimeout(flag);
                        }
                    }, 100);
                } else {
                    setImgSize();
                }
                $displayDiv.removeClass("loading");
            }).error(function () {
                //目前这个问题已不存在，不用重试了
                //file api上传好后可能不能马上get到，所以这里用了重试机制
                /*
                var src = $(this).data(InfoPlus.Controls.Picture.DATA_URL),
                    imgInstance = this;
                if (src !== "") {
                    var failCount = $(this).data(InfoPlus.Controls.Picture.DATA_IMG_LOADFAIL_COUNT) + 1;
                    $(this).data(InfoPlus.Controls.Picture.DATA_IMG_LOADFAIL_COUNT, failCount);

                    setTimeout(function () {
                        $(imgInstance).attr("src", src);
                    }, 1000 + failCount * 500);
                }
                */
            });


            link.appendChild(displayImg);
            displayDiv.appendChild(link);
            var maskDiv = document.createElement("div"),
                $maskDiv = $(maskDiv);
            $maskDiv.addClass(InfoPlus.Controls.Picture.MASK_DIV).hide();
            displayDiv.appendChild(maskDiv);
            if (this.isWritable()) {
                var deleteDiv = document.createElement("div");
                $(deleteDiv).attr("title", $$.lt("common.deleteText")).addClass(picture.CLASS_DELETE_PICTURE);
                displayDiv.appendChild(deleteDiv);
            }
            container.appendChild(displayDiv);

            $(displayDiv).addClass(InfoPlus.Controls.Picture.DISPLAY_DIV).data("container", container)
                .data(InfoPlus.Controls.Picture.PREVIEW_IMG, previewImg)
                .data(InfoPlus.Controls.Picture.DISPLAY_IMG, displayImg)
                .data(InfoPlus.Controls.Picture.MASK_DIV, $maskDiv);

            $(container).data(InfoPlus.Controls.Picture.DISPLAY_DIV, $(displayDiv));
            $(link).data("pictureControl", this);
        },

        //override methods
        createElement: function () {
            var container = document.createElement("div");
            //this.createHiddenElement(container);

            if (this.isReadable()) {
                this.createDisplayDiv(container);
            }
            if (this.isWritable()) {
                //this.createUploadProgressDiv(container);
                this.createUploadDiv(container);
            }

            //if (this.isReadable()) {
            //    this.setValue(this.initValue);
            //}

            return container;

        },

        //判断时候应该触发fieldChange
        shouldFireChangeEvent: function (newPictureInfo) {
            if (this.synced === true) {
                this.synced = false;
                return false;
            }
            if (this.onFieldChange || this.onFieldRefer || this.onFieldSync) {
                if (this.pictureInfo == null) {
                    return newPictureInfo != null;
                } else {
                    if (newPictureInfo == null) {
                        return true;
                    } else {
                        return newPictureInfo.id !== this.pictureInfo.id;
                    }
                }
            }
            return false;
        },

        //可以接受两种参数，一种是JSON格式string，一种是pictureInfo对象{id:id,name:name,size:size,uri:uri}
        setValue: function (fieldValue, fieldDisplayValue, fromInit) {
            var field = this.field;
            var pictureInfo;

            var setPictureUrl = function (img, url) {
                var $img = $(img);

                var requestImg = function (changeLink) {
                    $$.ajax({
                        type: "POST",
                        url: $$.params.attachmentTokenUrl,
                        addFormParam: true,
                        data: {
                            field: field.name,
                            fileUri: url
                        }
                    }).done(function (data) {
                        if (data != null) {
                            if (data.errno === 0) {
                                var token = data.entities[0];
                                if ($IU.isObject(token)) {
                                    token = token['token'];
                                }
                                var newUrl = url + ((url.indexOf("?") !== -1) ? "&" : "?") + "access_token=" + token;
                                if (changeLink) {
                                    //这个变量置成true，为了不让img的click事件触发时候再去请求一次token
                                    linkChanged = true;
                                    $img.parent().attr("href", newUrl);
                                    $img.click();
                                    //click触发好后，这个变量置成false,下次再点击时候还需要请求最新的token
                                    linkChanged = false;
                                } else {
                                    img.src = newUrl;
                                    $img.data(InfoPlus.Controls.Picture.DATA_IMG_LOADFAIL_COUNT, 0);
                                }
                            } else {
                                $$.debug(data.error);
                            }
                        }
                    });
                };

                if (url !== "") {
                    //hide first
                    //$img.hide();
                    var $displayDiv = $img.parents(".displayDiv");
                    $displayDiv.removeClass("uploading").addClass("loading");

                    if (pictureInfo.name != null) {
                        $img.attr("alt", pictureInfo.name);
                    }

                    if (field.settings != null && field.settings["fileSecure"] === true) {
                        requestImg(false);
                        var linkChanged = false;
                        $img.unbind("click").click(function () {
                            if (!linkChanged) {
                                requestImg(true);
                                return false;
                            }
                        });
                    } else {
                        img.src = url;
                        $img.data(InfoPlus.Controls.Picture.DATA_IMG_LOADFAIL_COUNT, 0);
                    }

                } else {
                    $img.removeAttr("src").removeAttr("width").removeAttr("height").removeAttr("style");
                    $img.parent().removeAttr("href");
                }
                $img.data(InfoPlus.Controls.Picture.DATA_URL, url);
            };

            if ($IU.isString(fieldValue)) {
                try {
                    pictureInfo = $.parseJSON(fieldValue);
                } catch (e) {
                    pictureInfo = null;
                }
            } else {
                pictureInfo = fieldValue;
            }

            var fireChangeEvent = !(!!fromInit) && this.shouldFireChangeEvent(pictureInfo);

            this.pictureInfo = pictureInfo;

            var $container = $(this.element),
                hiddenInput = $container.data($Control.DATA_ORIGIN_INPUT),
                $displayDiv = $container.data(InfoPlus.Controls.Picture.DISPLAY_DIV),
                $uploadDiv = $container.data(InfoPlus.Controls.Picture.UPLOAD_DIV),
                displayImg = $displayDiv.data(InfoPlus.Controls.Picture.DISPLAY_IMG),
                previewImg = $displayDiv.data(InfoPlus.Controls.Picture.PREVIEW_IMG);

            if (pictureInfo != null && pictureInfo.id != null) {
                hiddenInput.value = pictureInfo.id;
                setPictureUrl(displayImg, pictureInfo.uri);
            } else {
                hiddenInput.value = "";
                $displayDiv.hide();
                if ($uploadDiv != null) {
                    var fileInput = $uploadDiv.children("input")[0];
                    fileInput.style.height = $uploadDiv[0].style.height;
                    $uploadDiv.show();
                }
                setPictureUrl(displayImg, "");
                $(previewImg).removeAttr("width").removeAttr("height").removeAttr("style").removeAttr("src");
            }

            if (fireChangeEvent) {
                setTimeout(function () {
                    $(hiddenInput).change();
                }, 0);
            }
        },

        getValue: function () {
            if (this.field == null || this.element == null || this.pictureInfo == null) return "";

            var $container = $(this.element),
                $displayDiv = $container.data(InfoPlus.Controls.Picture.DISPLAY_DIV),
                $displayImg = $($displayDiv.data(InfoPlus.Controls.Picture.DISPLAY_IMG));

            var pictureInfo = this.pictureInfo;
            return $.toJSON({
                id: pictureInfo.id,
                name: pictureInfo.name,
                size: pictureInfo.size,
                uri: pictureInfo.uri,
                mime: pictureInfo.mime,
                width: $displayImg.data("naturalWidth"),
                height: $displayImg.data("naturalHeight")
            });
        },

        getSortValue: function () {
            if (this.field == null || this.element == null || this.pictureInfo == null) return "";
            return this.pictureInfo.name;
        },

        setDisplayDivSize: function (width, height) {
            var $container = $(this.element),
                $displayDiv = $container.data(InfoPlus.Controls.Picture.DISPLAY_DIV);
            if ($displayDiv != null) {
                var $maskDiv = $displayDiv.data(InfoPlus.Controls.Picture.MASK_DIV);
                $displayDiv.css("width", width);
                $displayDiv.css("height", height);
                if ($maskDiv != null) {
                    $maskDiv.css("width", width);
                    $maskDiv.css("height", height);
                }
            }

        },

        specialSetting: function () {
            var $container = $(this.element),
                $displayDiv = $container.data(InfoPlus.Controls.Picture.DISPLAY_DIV),
                $uploadDiv = $container.data(InfoPlus.Controls.Picture.UPLOAD_DIV);
            var w = $container[0].style.width,
                h = $container[0].style.height;
            if (w.substr(w.length - 1) === "%") {
                $IU.debugTip($$.lt("picture.widthWarning", this.field.name));
            }
            if ($displayDiv != null) {
                $displayDiv.data(InfoPlus.Controls.Picture.DISPLAY_DIV_MAX_WIDTH, w);
                $displayDiv.data(InfoPlus.Controls.Picture.DISPLAY_DIV_MAX_HEIGHT, h);
            }
            this.setDisplayDivSize(w, h);
            if ($uploadDiv != null) {
                $uploadDiv.css("width", w);
                $uploadDiv.css("height", h);
                var fileInput = $uploadDiv.children("input")[0];
                fileInput.style.height = h;
            }
            $container.css("width", "");
            $container.css("height", "");
        },

        deletePicture: function (callback) {
            var instance = this;
            $IU.confirmBox($$.lt("picture.confirmDelete"), $$.lt("common.confirm"), $$.lt("common.ok"), 300, function () {
                instance.setValue(null);
                if (callback != null && (typeof callback === 'function')) {
                    callback();
                }
            });
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.Picture.Events.events;
        },

        setDynamicReadOnly: function (isReadOnly) {
            var container = this.element;
            if (isReadOnly) {
                $(container).addClass($Control.CLASSNAME_READONLY);
            } else {
                $(container).removeClass($Control.CLASSNAME_READONLY);
            }
        }

    });

    define("InfoPlus.Controls.Picture", picture);

    var pictureEvents = {

        onImgLoad: function () {
            //if ($(this).data(InfoPlus.Controls.Picture.IMG_LOAD_LOCAL)) {

            //}
        },

        onCancel: function () {
            var $container = $(this).parents("." + $Control.CLASSNAME_CONTROL);
            var uploadingPictureId = $container.data(InfoPlus.Controls.Picture.UPLOAD_PICTURE_ID);
            if (uploadingPictureId != null) {
                var uploader = $container.data("uploader");
                uploader.cancel(uploadingPictureId);
                var pictureControl = $container.data($Control.DATA_CONTROL_OBJECT);
                pictureControl.setValue(null);
            }

        },

        onDelete: function () {
            var pictureControl = $(this).parents("." + $Control.CLASSNAME_CONTROL).data($Control.DATA_CONTROL_OBJECT);
            pictureControl.deletePicture();
            return false;
        }

    };

    pictureEvents.events = [
        {selector: "." + InfoPlus.Controls.Picture.CLASS_DELETE_PICTURE, type: "click", handler: pictureEvents.onDelete}
    ];

    define("InfoPlus.Controls.Picture.Events", pictureEvents);

})(window);
/*
 * Edit
 * @Author yech 
 * @Since 2014/11/25
 */

(function (window, undefined) {

    var password = function (path, field, render, initValue) {
        $Control.call(this, $Control.CONTROL_TYPE_PASSWORD, path, field, render, initValue, null);
    };

    password.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_STRING],
        name: "password",
        //elementClassName: "infoplus_passwordControl",

        //override methods
        createElement: function () {
            var element = document.createElement("input");
            element.type = "password";
            return element;
        },

        setValue: function (fieldValue) {
            if (fieldValue == null) fieldValue = '';
            $(this.element).val(fieldValue);
        },

        getValue: function () {
            if (this.field == null || this.element == null) return "";
            return this.convertEmptyValue(this.element.value);
        }

    });

    define("InfoPlus.Controls.Password", password);

})(window);
/*
 * Iframe
 * @Author yech
 * @Since 2016/09/18
 */

(function (window, undefined) {

    var iframe = function (path, field, render, initValue) {

        if (!InfoPlus.Controls.Iframe.initialized) {
            var flyoutDiv = document.createElement("div");
            flyoutDiv.setAttribute("id", FLYOUT_DIV_ID);
            $(flyoutDiv).addClass("round-corner");
            iframe.flyoutDiv = flyoutDiv;
            $(document.body).append(flyoutDiv);
            InfoPlus.Controls.Iframe.initialized = true;
        }

        $Control.call(this, $Control.CONTROL_TYPE_IFRAME, path, field, render, initValue);
    };

    iframe.eventRegistered = false;
    iframe.initialized = false;

    var FLYOUT_DIV_ID = "infoplus_iframe_flyout_div";
    var REGEXP_URL = /^.+:\/\/[^‌​/]+/;

    iframe.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_ANYURI],
        ignoreValidation: true,
        allowFocus: false,
        autoTriggerFieldChangeEvent: false,
        name: "iframe",
        //elementClassName: "infoplus_iframeControl",
        hasHiddenElement: true,
        flyoutIframe: null,             //flyout的iframe
        flyoutIframeId: null,           //flyout的iframe的guid
        innerId: null,                  //iframe内页面由InfoPlusSDK.iframe.init创建出来的guid
        flyoutInnerId: null,            //flyout的iframe中InfoPlusSDK.iframe.init创建出来的guid
        flyoutPage: null,               //移动版flyout出来的page对象


        //override methods
        createElement: function () {
            var iframeContainer = document.createElement("div");
            var iframe = document.createElement("iframe");
            iframe.setAttribute('scrolling', 'auto');
            //this.createHiddenElement(iframe, iframeContainer);
            iframeContainer.appendChild(iframe);
            this.controlContainer = iframeContainer;
            $(iframeContainer).addClass("infoplus_iframeControlContainer");
            return iframe;
        },

        sendMessage: function (data) {
            var iframeElement = this.element;
            var origin = iframeElement.src.match(REGEXP_URL)[0];
            iframeElement.contentWindow.postMessage($.toJSON(data), origin);
        },

        flyoutWindowSendMessage: function (data) {
            if (this.flyoutIframeId != null) {
                var $flyoutFrame = $("#" + this.flyoutIframeId);
                if ($flyoutFrame.length > 0) {
                    var origin = $flyoutFrame[0].src.match(REGEXP_URL)[0];
                    $flyoutFrame[0].contentWindow.postMessage($.toJSON(data), origin);
                }
            }
        },

        closeFlyout: function (omitClosePage) {
            if (this.flyoutIframeId != null) {
                $(iframe.flyoutDiv).empty().detach().removeData("iframeControl").removeClass("center");
                $(document.body).append(iframe.flyoutDiv);
                this.flyoutIframe = null;
                this.flyoutIframeId = null;
            }
            if (this.flyoutPage != null) {
                if (!(omitClosePage === true)) {
                    this.flyoutPage.close();
                }
                this.flyoutPage = null;
            }
        },

        registerEvent: function () {
            if (InfoPlus.Controls.Iframe.eventRegistered) return;
            var selector = "iframe." + this.getElementClassName();

            //检查origin是否一致
            var checkOrigin = function (iframeControl, eventOrigin, isFlyout) {
                if (!isFlyout) {
                    var origin = iframeControl.element != null ? iframeControl.element.src.match(REGEXP_URL)[0] : null;
                } else {
                    origin = iframeControl.flyoutIframe != null ? iframeControl.flyoutIframe.src.match(REGEXP_URL)[0] : null;
                }
                return origin === eventOrigin;
            };

            var commandConfirm = function (message, eventOrigin, isFlyout) {
                if (message['cid'] == null || message['pid'] == null) return;
                $(selector).each(function () {
                    var iframeControl = $(this).data($Control.DATA_CONTROL_OBJECT);
                    if (!checkOrigin(iframeControl, eventOrigin, isFlyout)) {
                        return;
                    }
                    if (message['pid'] === this.id) {
                        if (!isFlyout) {
                            //确认后的cid记录到innerId上
                            iframeControl.innerId = message['cid'];
                        } else {
                            //确认后的cid记录到flyoutInnerId上
                            iframeControl.flyoutInnerId = message['cid'];
                        }
                    }
                });
            };

            var commandCreate = function (message, eventOrigin, isFlyout) {
                if (message['cid'] == null) return;
                //每个iframe控件都向自己里面的窗口发送一次query命令，期待接收到confirm命令来确定是否是自己的那个iframe里发出来的create命令
                $(selector).each(function () {
                    var iframeControl = $(this).data($Control.DATA_CONTROL_OBJECT);
                    if (!checkOrigin(iframeControl, eventOrigin, isFlyout)) {
                        return;
                    }
                    if (!isFlyout) {
                        //发送query命令，期待iframe内sdk返回confirm匹配
                        iframeControl.sendMessage({
                            command: 'query',
                            cid: message['cid'],
                            pid: this.id
                        });
                    } else {
                        iframeControl.flyoutWindowSendMessage({
                            command: 'queryFlyout',
                            cid: message['cid'],
                            pid: this.id
                        });
                    }
                });
            };

            var commandChange = function (message) {
                if (message['cid'] == null) return;
                $(selector).each(function () {
                    var iframeControl = $(this).data($Control.DATA_CONTROL_OBJECT);
                    if (message['cid'] === iframeControl.innerId) {
                        var iframeUrl = message['url'] || '';
                        var fireChangeEvent = iframeControl.shouldFireChangeEvent(iframeUrl);
                        var $element = $(iframeControl.element);
                        var hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT);
                        hiddenInput.value = iframeUrl;
                        if (fireChangeEvent) {
                            setTimeout(function () {
                                $(hiddenInput).change();
                            }, 0);
                        }
                    }
                });
            };

            //关闭上一个flyout
            var closeLastFlyout = function () {
                var control = $(InfoPlus.Controls.Iframe.flyoutDiv).data("iframeControl");
                if (control != null) {
                    control.closeFlyout();
                }
            };

            var DEFAULT_FLYOUT_WIDTH = 300,
                DEFAULT_FLYOUT_HEIGHT = 100;

            var commandOpenFlyout = function (message) {

                var createFlyoutIframe = function (iframeControl) {
                    //创建flyout窗口iframe
                    var flyoutId = "flyout_" + $$.guid(),
                        iframeFlyout = document.createElement("iframe");
                    iframeFlyout.setAttribute("id", flyoutId);
                    iframeFlyout.setAttribute("frameborder", "0");
                    iframeFlyout.setAttribute("class", "infoplus_iframeControl_flyout");

                    $(iframe.flyoutDiv).append(iframeFlyout).data("iframeControl", iframeControl);

                    iframeControl.flyoutIframeId = flyoutId;
                    iframeControl.flyoutIframe = iframeFlyout;
                };

                var setFlyoutOptions = function (iframeControl, options) {
                    var iframeFlyout = iframeControl.flyoutIframe;

                    var setPosition = function (width, height) {
                        switch (options["position"]) {
                            case "top":
                                $(iframe.flyoutDiv).css("top", "-" + height + "px").css("left", "0");
                                break;
                            case "bottom":
                                $(iframe.flyoutDiv).css("top", $(iframeControl.element).outerHeight() + "px").css("left", "0");
                                break;
                            case "left":
                                $(iframe.flyoutDiv).css("top", "0").css("left", "-" + width + "px");
                                break;
                            case "right":
                                $(iframe.flyoutDiv).css("top", "0").css("left", $(iframeControl.element).outerWidth() + "px");
                                break;
                            case "center":
                                $(iframe.flyoutDiv).css("top", (($(window).height() - height) / 2) + "px").css("left", (($(window).width() - width) / 2) + "px").addClass("center");
                                break;
                            default:
                                if (($(iframeControl.element).offset().top - $(window).scrollTop() + $(iframeControl.element).height() + height <= $(window).height())
                                    || ($(iframeControl.element).offset().top - $(window).scrollTop() < height)) {
                                    $(iframe.flyoutDiv).css("top", $(iframeControl.element).outerHeight() + "px");
                                } else {
                                    $(iframe.flyoutDiv).css("top", "-" + height + "px");
                                }
                        }
                    };

                    iframeFlyout.setAttribute('scrolling', 'auto');
                    if (iframeFlyout.getAttribute("src") !== options['src']) {
                        iframeFlyout.setAttribute("src", options['src']);
                    }

                    if (!$$.MOBILE) {
                        var height = options["height"] != null ? parseInt(options["height"], 10) : DEFAULT_FLYOUT_HEIGHT;
                        iframeFlyout.setAttribute("height", height + "");
                        var width = options["width"] != null ? parseInt(options["width"], 10) : DEFAULT_FLYOUT_WIDTH;
                        iframeFlyout.setAttribute("width", width + "");
                        //计算位置时候需要算上flyout_div的padding border
                        height += 14;

                        setPosition(width, height);

                        if (!(options['shadow'] === false)) {
                            $(iframe.flyoutDiv).addClass("z-depth-1");
                        } else {
                            $(iframe.flyoutDiv).removeClass("z-depth-1");
                        }
                    }
                };

                if (message['cid'] == null) return;
                $(selector).each(function () {
                    var iframeControl = $(this).data($Control.DATA_CONTROL_OBJECT);
                    if (message['cid'] === iframeControl.innerId) {
                        var options = message['options'];
                        if (!$$.MOBILE) {
                            if (iframeControl.flyoutIframe == null) {
                                closeLastFlyout();
                                createFlyoutIframe(iframeControl);
                                if (options["position"] !== "center") {
                                    iframeControl.controlContainer.appendChild(iframe.flyoutDiv);
                                }
                            }
                            setFlyoutOptions(iframeControl, options);
                        } else {
                            if (iframeControl.flyoutIframe == null) {
                                createFlyoutIframe(iframeControl);
                            }
                            setFlyoutOptions(iframeControl, options);
                            var pageOptions = {
                                content: $(iframe.flyoutDiv),
                                buttons: [{
                                    name: $$.lt("common.close"),
                                    callOnClose: true,
                                    defaultButton: true,
                                    callback: function () {
                                        iframeControl.closeFlyout(true);
                                    }
                                }]
                            };
                            var page = new InfoPlus.Render.Mobile.Page(pageOptions);
                            iframeControl.flyoutPage = page;
                            page.show();
                        }
                    }
                });
            };

            var commandCloseFlyout = function (message) {
                if (message['cid'] == null) return;
                $(selector).each(function () {
                    var iframeControl = $(this).data($Control.DATA_CONTROL_OBJECT);
                    //flyout窗口发送,将message['data']传给iframe主窗口
                    if (message['cid'] === iframeControl.flyoutInnerId) {
                        iframeControl.sendMessage({
                            command: 'closeFlyout',
                            data: message['data'],
                            pid: this.id
                        });
                        iframeControl.closeFlyout();
                    }
                    //主窗口发送
                    if (message['cid'] === iframeControl.innerId) {
                        iframeControl.closeFlyout();
                    }
                });
            };

            $(window).on("message", function (e) {
                var message;
                try {
                    message = $.parseJSON(e.originalEvent.data);
                } catch (e) {
                }
                if (message == null || message['command'] == null) return;
                switch (message['command']) {
                    case 'change':
                        //iframe窗口的URL发生了变化，发送change命令到iframe控件，通知从新url中取数据
                        commandChange(message);
                        break;
                    case 'create':
                        //创建主窗口命令，由iframe窗口内sdk发送，期待iframe控件与之通信
                        commandCreate(message, e.originalEvent.origin, false);
                        break;
                    case 'createFlyout':
                        //创建flyout命令，由flyout窗口内sdk发送，期待iframe控件与之通信
                        commandCreate(message, e.originalEvent.origin, true);
                        break;
                    case 'openFlyout':
                        //打开flyout命令，由iframe窗口(主窗口)内sdk发送
                        commandOpenFlyout(message);
                        break;
                    case 'closeFlyout':
                        //关闭flyout命令，由flyout窗口内sdk发送，或者由iframe内窗口(主窗口)sdk发送
                        commandCloseFlyout(message);
                        break;
                    case 'confirm':
                        //主窗口发送，确认匹配
                        commandConfirm(message, e.originalEvent.origin, false);
                        break;
                    case 'confirmFlyout':
                        //flyout窗口发送，确认匹配
                        commandConfirm(message, e.originalEvent.origin, true);
                        break;
                }

            });

            if (!$$.MOBILE) {
                $(document).mousedown(function (event) {
                    if (event.target.id !== FLYOUT_DIV_ID) {
                        closeLastFlyout();
                    }
                });
            }

            InfoPlus.Controls.Iframe.eventRegistered = true;
        },

        getAttributes: function () {
            var url = this.getValue();
            return $IU.getParamFromUrl(url.value);
        },

        // 清除内部Id，防止iframe的url被动态刷新过后保留了原来的内部id，这会造成内外通信的错误
        resetInnerId: function () {
            this.innerId = null;
            this.flyoutInnerId = null;
        },

        setValue: function (fieldValue, fieldDisplayValue, fromInit) {

            if (fieldValue == null) fieldValue = '';
            var fireChangeEvent = !(!!fromInit) && this.shouldFireChangeEvent(fieldValue);
            this.resetInnerId();

            var $element = $(this.element);
            var hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT);
            hiddenInput.value = fieldValue;
            $element.attr("src", fieldValue);

            if (fireChangeEvent) {
                setTimeout(function () {
                    $(hiddenInput).change();
                }, 0);
            }

        },

        getValue: function () {
            if (this.field == null || this.element == null) return "";
            var $element = $(this.element),
                hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT);
            return new $Controls.Data.Uri(hiddenInput.value);
        }

    });

    define("InfoPlus.Controls.Iframe", iframe);

})(window);

/*
 * Remark
 * @Author yech
 * @Since 2016/10/27
 */

(function (window, undefined) {

    var thing = function (path, field, render, initValue, initDisplayValue, initAttributes) {
        $Control.call(this, $Control.CONTROL_TYPE_THING, path, field, render, initValue, initDisplayValue, initAttributes);
    };

    thing.BARCODE_LENGTH = 13;
    thing.HAS_VALUE = "infoplus_thingControl_has_value";
    thing.NO_VALUE = "infoplus_thingControl_no_value";
    thing.CLASS_INPUT_NAME_DIV = "infoplus_thingControl_inputNameDiv";
    thing.CLASS_INPUT_BARCODE_DIV = "infoplus_thingControl_inputBarcodeDiv";
    thing.CLASS_NAME_DIV = "infoplus_thingControl_nameDiv";
    thing.CLASS_PRINT_DIV = "infoplus_thingControl_printDiv";
    thing.CLASS_DELETE_DIV = "infoplus_thingControl_deleteDiv";

    thing.CODE_REG = /^\d{13}$/;
    thing.IMG_HOLDER = "INFOPLUS_THING_IMG_HOLDER";

    thing.prototype = $.extend(new $Controls.Control(), {

        autoTriggerFieldChangeEvent: false,
        compatibleFieldTypes: [$Control.DATA_TYPE_THING],
        allowFocus: false,
        name: "thing",
        //elementClassName: "infoplus_thingControl",
        hasHiddenElement: true,

        getCheckCode: function (code) {
            var _odd = 0, _even = 0;
            for (var _i = 0; _i <= 11; _i++)
                _i % 2 === 0 ? _odd += parseInt(code[_i]) : _even += parseInt(code[_i]);
            return ((10 - (_odd + _even * 3) % 10) % 10).toString();
        },

        getNewBarCode: function () {

            //我国起始三位是690-695
            var code = '' + (690 + Math.round(Math.random() * (695 - 690)));

            //9位随机码
            for (var i = 0; i < 9; i++) {
                code += ('' + Math.ceil(Math.random() * 9));
            }


            code += this.getCheckCode(code);
            return code;
        },


        //获取打印物品控件的内容
        getPrintContent: function (imgReady, printCallback) {
            var printUrl = $IU.getBarcodePrintUrl(this.getValue().value);
            if (printUrl == null) return null;

            var instance = this;
            var printDiv = document.createElement("div"),
                $printDiv = $(printDiv);

            //context里按照字段长度排序，越长的排在越前面，防止字段名有重叠的情况
            var getSortedContext = function () {
                $$.dynamics.cache.build();
                var context = instance.dynamicProcessor.getControlContext(instance, undefined, true);
                var sortArray = new InfoPlus.QuickSortArray();
                for (var k in context) {
                    if (context.hasOwnProperty(k)) {
                        sortArray.push({name: k, obj: context[k]});
                    }
                }
                //按照名字字符数倒序排
                sortArray.sort(function (u1, u2) {
                    var l1 = u1.name.length,
                        l2 = u2.name.length;
                    if (l1 > l2) {
                        return -1
                    } else {
                        if (l1 === l2) {
                            return 0;
                        } else {
                            return 1;
                        }
                    }
                });
                return sortArray;
            };

            //添加一维码图片
            var addBarImg = function () {
                var imgIndex = imgReady.length;
                imgReady[imgIndex] = false;
                var div = document.createElement("div");
                var img = document.createElement("img");
                img.src = printUrl;
                div.appendChild(img);
                div.setAttribute("style", "margin:15px 0 15px -5px");

                var isImgLoaded = function () {
                    if (!img.complete) {
                        setTimeout(isImgLoaded, 300);
                    } else {
                        imgReady[imgIndex] = true;
                        printCallback();
                    }
                };
                setTimeout(isImgLoaded, 300);
                $printDiv.append(div);
            };

            var replaceFormat = function (format, obj, fieldName, property) {
                if (obj == null) return format;
                if (property != null) {
                    if (obj[property] != null) {
                        format = format.replace(new RegExp("\\$" + fieldName + "\\." + property, 'gm'), obj[property]);
                        return format.replace(new RegExp("\\${" + fieldName + "\\." + property + "}", 'gm'), obj[property]);
                    }
                } else {
                    format = format.replace(new RegExp("\\$" + fieldName, 'gm'), obj);
                    return format.replace(new RegExp("\\${" + fieldName + "}", 'gm'), obj)
                }
                return format;
            };

            var replaceBarCodeImg = function (format, fieldName) {
                format = format.replace(new RegExp("\\$" + fieldName + "\\.value", 'gm'), thing.IMG_HOLDER);
                format = format.replace(new RegExp("\\${" + fieldName + "\\.value}", 'gm'), thing.IMG_HOLDER);
                format = format.replace(new RegExp("\\$" + fieldName, 'gm'), thing.IMG_HOLDER);
                format = format.replace(new RegExp("\\${" + fieldName + "}", 'gm'), thing.IMG_HOLDER);
                return format
            };

            var replaceContent = function (format) {
                var context = getSortedContext();
                for (var i = 0, len = context.length; i < len; i++) {
                    var o = context[i];
                    var fieldName = o.name;
                    format = replaceFormat(format, o.obj, fieldName, "displayValue");
                    format = replaceFormat(format, o.obj, fieldName, "name");
                    if (o.name !== instance.field.name) {
                        format = replaceFormat(format, o.obj, fieldName, "value");
                        format = replaceFormat(format, o.obj, fieldName);
                    } else {
                        //如果是本字段，就用imgHolder替换
                        format = replaceBarCodeImg(format, fieldName);
                    }
                }
                return format.split("\n");
            };

            var putFormatPrintContent = function (format) {
                //分隔符，例如---代表用缺省高度放置分隔符，-20-代表用20px高度放置分隔符
                var separator = new RegExp(/^-(\d|-)*-$/);
                var content = replaceContent(format);

                for (var i = 0, len = content.length; i < len; i++) {
                    var line = content[i];
                    //如果该行包含imgHolder就添加一维码图片，该行其它内容将被忽略
                    if (line.indexOf(thing.IMG_HOLDER) !== -1) {
                        addBarImg();
                    } else {
                        var trimLine = $IU.trimString(line);
                        if (separator.test(trimLine) === true) {
                            var separatorHeight = parseInt(trimLine.replace(/-/g, ""), 10);
                            if (isNaN(separatorHeight)) {
                                separatorHeight = 10;
                            }
                            var separatorDiv = document.createElement("div");
                            separatorDiv.setAttribute("style", "height:" + separatorHeight + "px");
                            $printDiv.append(separatorDiv);
                        } else {
                            var contentDiv = document.createElement("div");
                            $(contentDiv).text(line);
                            $printDiv.append(contentDiv);
                        }


                    }
                }
            };

            var putDefaultPrintContent = function () {
                var titleDiv = document.createElement("div");
                $(titleDiv).text($$.params.instanceName);
                $printDiv.append(titleDiv);
                if (($$.params.instanceTags || "") !== "") {
                    var tagDiv = document.createElement("div");
                    $(tagDiv).text($$.params.instanceTags);
                    $printDiv.append(tagDiv);
                }
                addBarImg();
                var nameDiv = document.createElement("div");
                $(nameDiv).text($$.lt("thing.name") + "：" + instance.getValue().name);
                $printDiv.append(nameDiv);
            };

            var format = this.field.format || "";
            if (format !== "") {
                putFormatPrintContent(format);
            } else {
                putDefaultPrintContent();
            }

            $printDiv.attr("style", "text-align:left");
            return printDiv;
        },

        //打印单个物品
        print: function () {
            var imgReady = [],
                windowReady = false;

            var w = window.open();

            var print = function () {
                //所有图片和window本身都load完再打印
                if (!windowReady) return;
                for (var i = 0, len = imgReady.length; i < len; i++) {
                    if (!imgReady[i]) return;
                }

                setTimeout(function () {
                    w.focus();
                    w.print();
                    w.close();
                }, 1000);


            };


            var $invoiceDiv = $('#div_invoice');
            $invoiceDiv.empty();

            var printContent = this.getPrintContent(imgReady, print);
            if (printContent != null) {
                $invoiceDiv.append(printContent);

                var html = $invoiceDiv.html();
                w.document.write("<style>body {text-align:center}</style>" + html);
                w.document.close();

                var onWindowReady = function () {
                    if (!windowReady) {
                        windowReady = true;
                        print();
                    }
                };

                $(w).load(onWindowReady);
                $(w.document).ready(onWindowReady);

            }
        },

        //override methods
        createElement: function () {
            var element = document.createElement("div");
            //this.createHiddenElement(element);
            /*
             var inputBarcodeDiv = document.createElement("div");
             inputBarcodeDiv.setAttribute("class", thing.CLASS_INPUT_BARCODE_DIV);
             element.appendChild(inputBarcodeDiv);
             */
            var inputNameDiv = document.createElement("div");
            inputNameDiv.setAttribute("class", thing.CLASS_INPUT_NAME_DIV);
            element.appendChild(inputNameDiv);

            var nameDiv = document.createElement("div");
            nameDiv.setAttribute("class", thing.CLASS_NAME_DIV);
            element.appendChild(nameDiv);

            var deleteDiv = document.createElement("div");
            deleteDiv.setAttribute("class", thing.CLASS_DELETE_DIV);
            deleteDiv.setAttribute("title", $$.lt("common.deleteText"));
            element.appendChild(deleteDiv);

            var printDiv = document.createElement("div");
            printDiv.setAttribute("class", thing.CLASS_PRINT_DIV);
            var i = document.createElement("i");
            i.setAttribute("class", "i-icon-print");
            printDiv.appendChild(i);
            element.appendChild(printDiv);

            return element;
        },

        setValue: function (fieldValue, fieldDisplayValue, fromInit, attributes) {
            if (fieldValue == null) {
                fieldValue = '';
                fieldDisplayValue = '';
                attributes = null;
            }
            var $thingContainer = $(this.element),
                hiddenInput = $thingContainer.data($Control.DATA_ORIGIN_INPUT),
                fireChangeEvent = !(!!fromInit) && this.shouldFireChangeEvent(fieldValue);

            hiddenInput.value = fieldValue;
            $thingContainer.children("." + InfoPlus.Controls.Thing.CLASS_NAME_DIV).text(fieldDisplayValue);

            if (fieldDisplayValue === '') {
                $thingContainer.removeClass(InfoPlus.Controls.Thing.HAS_VALUE).addClass(InfoPlus.Controls.Thing.NO_VALUE);
            } else {
                $thingContainer.removeClass(InfoPlus.Controls.Thing.NO_VALUE).addClass(InfoPlus.Controls.Thing.HAS_VALUE);

                var width = this.element.style.width;
                if (width != null && width !== "") {
                    var w = $thingContainer.find("." + thing.CLASS_PRINT_DIV).width() + $thingContainer.find("." + thing.CLASS_DELETE_DIV).width();
                    if (width.substring(width.length - 1) !== "%") {
                        var containerWidth = parseInt(width, 10);
                        if (w === 0) {
                            w = $$.MOBILE ? 48 : 32;
                            $thingContainer.find("." + thing.CLASS_NAME_DIV).css("max-width", (containerWidth - w - 24) + "px");
                        } else {
                            $thingContainer.find("." + thing.CLASS_NAME_DIV).css("max-width", (containerWidth - w - 24) + "px");
                        }

                    } else {
                        var setWidth = function () {
                            if ($thingContainer.width() === parseInt(width, 10)) {
                                setTimeout(function () {
                                    setWidth();
                                }, 300);
                            } else {
                                containerWidth = parseInt($thingContainer.width(), 10);
                                var w = $thingContainer.find("." + thing.CLASS_PRINT_DIV).width() + $thingContainer.find("." + thing.CLASS_DELETE_DIV).width();
                                $thingContainer.find("." + thing.CLASS_NAME_DIV).css("max-width", (containerWidth - w - 24) + "px");
                            }
                        };

                        setWidth();
                        //两个宽度不相同，说明已经放到dom里了，不是初始化时候，那么直接计算
                        /*
                        if ($thingContainer.width() !== parseInt(width, 10)) {
                            containerWidth = parseInt($thingContainer.width(), 10);
                            $thingContainer.find("." + thing.CLASS_NAME_DIV).css("max-width", (containerWidth - w - 24) + "px");
                        } else {
                            //如果infopath表单里画了一个百分比的宽度，那么在初始化时候实际宽度是算不出来的，因为还没有放到dom里，采用延时计算的方式
                            setTimeout(function () {
                                containerWidth = parseInt($thingContainer.width(), 10);
                                w = $thingContainer.find("." + thing.CLASS_PRINT_DIV).width() + $thingContainer.find("." + thing.CLASS_DELETE_DIV).width();
                                $thingContainer.find("." + thing.CLASS_NAME_DIV).css("max-width", (containerWidth - w - 24) + "px");
                            }, 500);
                        }
                        */
                    }
                }
            }

            this.setAttributes(attributes);
            $thingContainer.data($Control.DATA_DISPLAY_VALUE, fieldDisplayValue);

            if (fireChangeEvent) {
                setTimeout(function () {
                    $(hiddenInput).change();
                }, 0);
            }
        },

        setName: function (fieldDisplayValue) {
            if (fieldDisplayValue == null) fieldDisplayValue = '';
            var $thingContainer = $(this.element),
                hiddenInput = $thingContainer.data($Control.DATA_ORIGIN_INPUT),
                fireChangeEvent = this.shouldFireChangeEvent(fieldDisplayValue);

            $thingContainer.children("." + InfoPlus.Controls.Thing.CLASS_NAME_DIV).text(fieldDisplayValue);

            if (fieldDisplayValue === '') {
                $thingContainer.removeClass(InfoPlus.Controls.Thing.HAS_VALUE).addClass(InfoPlus.Controls.Thing.NO_VALUE);
            } else {
                $thingContainer.removeClass(InfoPlus.Controls.Thing.NO_VALUE).addClass(InfoPlus.Controls.Thing.HAS_VALUE);
            }
            $thingContainer.data($Control.DATA_DISPLAY_VALUE, fieldDisplayValue);

            if (fireChangeEvent) {
                setTimeout(function () {
                    $(hiddenInput).change();
                }, 0);
            }
        },

        getValue: function () {
            var $thingContainer = $(this.element),
                hiddenInput = $thingContainer.data($Control.DATA_ORIGIN_INPUT),
                val = this.convertEmptyValue(hiddenInput.value),
                displayValue = $thingContainer.data($Control.DATA_DISPLAY_VALUE);
            return new $Controls.Data.Thing(val, displayValue);
        },

        setPlaceHolder: function () {
            if (this.field != null && this.field.placeHolder != null && this.field.placeHolder !== '') {
                var container = this.element;
                var tipDiv = document.createElement("div");
                var link = document.createElement("a");
                link.setAttribute("href", "#");
                $(link).text(this.field.placeHolder);
                tipDiv.appendChild(link);
                $(tipDiv).addClass("thingTip");
                $(container).find("." + thing.CLASS_INPUT_NAME_DIV).after(tipDiv);
                $(tipDiv).click(function () {
                    $IU.fireClick($(this).siblings("." + thing.CLASS_INPUT_NAME_DIV)[0]);
                    return false;
                })
            }
        },

        showThingDialog: function (inputBarcode) {

            var value = this.getValue();
            if (value.value === '') {
                value.value = this.getNewBarCode();
            }

            var thingContainer = this.element,
                instance = this,
                thingId = document.createElement("div"),
                $thingId = $(thingId),
                thingIdInput = document.createElement("input"),
                $thingIdInput = $(thingIdInput),
                thingName = document.createElement("input"),
                $thingName = $(thingName),
                title = $$.lt("thing.pleaseInput"),
                content = document.createElement("div");

            $thingId.attr("id", "form_thing_id").css("display", "inline-block").css("position", "relative");
            $thingIdInput.attr("id", "form_thing_id_input").attr("type", "text").attr("maxlength", thing.BARCODE_LENGTH).val(value.value);
            $thingName.attr("id", "form_thing_name").attr("type", "text");

            if (thingContainer.readOnly === true) {
                thingIdInput.readOnly = true;
                $thingIdInput.addClass($Control.CLASSNAME_READONLY);
                $thingIdInput.hide();
                thingName.readOnly = true;
                $thingName.addClass($Control.CLASSNAME_READONLY);
            }
            $thingId.text(value.value).css("margin-left", "10px");
            if (!inputBarcode) {
                $thingIdInput.hide();
            } else {
                $thingId.hide();
                $thingIdInput.css("display", "inline-block");
            }

            $thingIdInput.css("margin-left", "10px").css("width", "235px");
            $thingName.val(value.displayValue).css("margin-left", "10px").css("width", "235px");

            $(content).append("<span>" + $$.lt("thing.code") + "</span>").append(thingId)
                .append(thingIdInput).append("<br>").append("<span>" + $$.lt("thing.name") + "</span>").append(thingName);
            $(content).css("line-height", "30px");

            $thingIdInput.keyup(function (event) {
                if ($thingIdInput.val().length === thing.BARCODE_LENGTH) {
                    if ($thingIdInput.data("requesting") !== true) {
                        $thingIdInput.data("requesting", true);
                        $$.ajax({
                            type: "GET",
                            url: $$.params.formRender.thingService + "/" + $thingIdInput.val(),
                            data: {},
                            needParse: false,
                            showParseErrMsg: false,
                            showAjaxErrMsg: false,
                            addFormParam: true
                        }).done(function (data) {
                            if (data.entities.length === 0) {
                                $IU.messageBox(null, $$.lt("thing.notFound"), null, 300);
                            } else {
                                var thing = data.entities[0];
                                $thingName.val(thing.name);
                                $thingIdInput.data("attr", thing.attributes);
                            }
                        }).fail(function (data) {
                            //50001===THING_NOT_FOUND
                            if (data.errno === 50001) {
                                $IU.messageBox(null, $$.lt("thing.notFound"), null, 300);
                            } else {
                                $IU.messageBox(null, data.msg, null);
                            }
                        }).always(function () {
                            setTimeout(function () {
                                $thingIdInput.removeData("requesting");
                            }, 300);

                        });
                    }
                }
                if (event.keyCode === 13) {
                    $(thingName).focus();
                }
            });

            var buttons;
            if (thingContainer.readOnly === true) {
                buttons = [];
            } else {
                buttons = [
                    {
                        name: $$.lt("common.save"),
                        defaultButton: true,
                        callOnClose: false,
                        preventDefault: true,
                        callback: function () {
                            if ($thingIdInput.is(":visible")) {
                                if ($thingIdInput.val() === "") {
                                    $IU.messageBox(null, $$.lt("thing.check.code"), null, 200);
                                    return false;
                                }
                                var code = $thingIdInput.val();
                                //验证ean13编码
                                if (code.length !== 13 || instance.getCheckCode(code.substr(0, 12)) !== code.substr(12)) {
                                    $IU.messageBox(null, $$.lt("thing.check.codeError"), null, 240);
                                    return false;
                                }
                            } else {
                                if ($thingName.val() === "") {
                                    $IU.messageBox(null, $$.lt("thing.check.name"), null, 200);
                                    return false;
                                }

                            }
                            if ($thingName.val() === "") {
                                $IU.messageBox(null, $$.lt("thing.check.name"), null, 200);
                                return false;
                            }
                            instance.setValue($thingIdInput.val(), $thingName.val(), false, $thingIdInput.data("attr"));
                        }
                    },
                    {
                        name: $$.lt("common.cancel")
                    },
                    {
                        name: $$.lt("thing.scan"),
                        preventDefault: true,
                        callback: function () {
                            $thingId.hide();
                            $thingIdInput.val("").css("display", "inline-block").focus();
                            return false;
                        }
                    }
                ];
            }
            var dialog = new InfoPlus.Render.Dialog(
                {
                    title: title,
                    content: content,
                    maxWidth: 340,
                    buttons: buttons
                }
            );
            dialog.show();

            return false;
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.Thing.Events.events;
        },

        specialSetting: function () {
            var $element = $(this.element);
            $element.css("height", "");
            $element.children("." + InfoPlus.Controls.Thing.CLASS_INPUT_NAME_DIV).attr("title", $$.lt("thing.clickToInput"));
            $element.children("." + InfoPlus.Controls.Thing.CLASS_NAME_DIV).attr("title", $$.lt("thing.clickToInput"));
            $element.children("." + InfoPlus.Controls.Thing.CLASS_PRINT_DIV).attr("title", $$.lt("thing.print"));
        }
    });

    define("InfoPlus.Controls.Thing", thing);

    var thingEvents = {
        inputNameClick: function () {
            var thingControl = $(this).parent().data($Control.DATA_CONTROL_OBJECT);
            if (thingControl == null) return false;
            thingControl.showThingDialog(false);
            return false;
        },

        nameClick: function () {
            var thingControl = $(this).parent().data($Control.DATA_CONTROL_OBJECT);
            if (thingControl == null) return false;
            thingControl.showThingDialog();
            return false;
        },

        printClick: function () {
            var thingControl = $(this).parent().data($Control.DATA_CONTROL_OBJECT);
            if (thingControl == null) return false;
            thingControl.print();
            return false;
        },

        deleteClick: function () {
            var thingControl = $(this).parent().data($Control.DATA_CONTROL_OBJECT);
            if (thingControl == null) return false;
            $IU.confirmBox($$.lt("thing.deleteConfirm"), $$.lt("common.confirm"), $$.lt("common.ok"), 300, function () {
                thingControl.setValue('', '', false, null);
            });

            return false;
        }
    };

    thingEvents.events = [
        {
            selector: "." + InfoPlus.Controls.Thing.CLASS_INPUT_NAME_DIV,
            type: "click",
            handler: thingEvents.inputNameClick
        },
        {selector: "." + InfoPlus.Controls.Thing.CLASS_NAME_DIV, type: "click", handler: thingEvents.nameClick},
        {selector: "." + InfoPlus.Controls.Thing.CLASS_PRINT_DIV, type: "click", handler: thingEvents.printClick},
        {selector: "." + InfoPlus.Controls.Thing.CLASS_DELETE_DIV, type: "click", handler: thingEvents.deleteClick}
    ];

    define("InfoPlus.Controls.Thing.Events", thingEvents);

})
(window);

/*
 * Switch
 * @Author yech
 * @Since 2018/04/20
 */

(function (window, undefined) {

    var switcher = function (path, field, render, initValue) {
        $Control.call(this, $Control.CONTROL_TYPE_SWITCH, path, field, render, initValue);
    };

    switcher.prototype = $.extend(new $Controls.Control(), {

        compatibleFieldTypes: [$Control.DATA_TYPE_BOOL],
        autoTriggerFieldChangeEvent: false,
        name: "switch",
        //elementClassName: "infoplus_switchControl",
        hasHiddenElement: true,

        //override methods
        createElement: function () {
            var element = document.createElement("div");
            //this.createHiddenElement(element);
            var buttonDiv = document.createElement("div");
            $(buttonDiv).addClass("switchButton");
            $(element).append(buttonDiv);
            return element;
        },

        setValue: function (fieldValue, fieldDisplayValue, fromInit) {
            if (fieldValue == null) fieldValue = '';
            var fireChangeEvent = !(!!fromInit) && this.shouldFireChangeEvent(fieldValue);
            var $element = $(this.element);
            var hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT);
            hiddenInput.value = fieldValue;

            this.setSwitchClass(hiddenInput.value);

            if (fireChangeEvent) {
                setTimeout(function () {
                    $(hiddenInput).change();
                }, 0);
            }

        },

        getValue: function () {
            if (this.field == null || this.element == null) return "";
            var element = this.element;
            var hiddenInput = $(element).data($Control.DATA_ORIGIN_INPUT);
            var val = this.convertEmptyValue(hiddenInput.value);
            return val.toLowerCase() === "true";
        },

        getSortValue: function () {
            var value = this.getValue();
            return value ? 1 : 0;
        },

        setSwitchClass: function (value) {
            if (value === "true") {
                $(this.element).addClass("checked");
            } else {
                $(this.element).removeClass("checked");
            }
        },

        toggleValue: function () {
            if (this.getValue() === true) {
                this.setValue(false);
            } else {
                this.setValue(true);
            }
        },

        registerEvent: function () {
            this.events = InfoPlus.Controls.Switch.Events.events;
        }


    });

    define("InfoPlus.Controls.Switch", switcher);
    var switchEvents = {
        onButtonClick: function () {
            var control = $(this).data($Control.DATA_CONTROL_OBJECT),
                field = control.field;

            if (field == null) {
                return false;
            }

            if (control.isReadOnly() || $(control.element).hasClass($Control.CLASSNAME_READONLY)) {
                return false;
            }

            control.toggleValue();

            return false;

        }
    };

    switchEvents.events = [
        {type: "click", handler: switchEvents.onButtonClick}
    ];

    define("InfoPlus.Controls.Switch.Events", switchEvents);

})(window);
/*
* Map
* @Author yech
* @Since 2018/06/19
*/

(function (window, undefined) {


    var loadJs = function () {
        map.jsLoadStatus = "loading";

        var head = document.getElementsByTagName("head")[0];
        var script = document.createElement("script");
        script.src = "https://api.map.baidu.com/api?v=3.0&ak=" + $$.params.mapKey + "&callback=InfoPlus.Controls.Map.loadCallback";
        script.type = "text/javascript";

        script.onload = script.onreadystatechange = function () {
            if (!this.readyState || this.readyState === "loaded" || this.readyState === "complete") {
                script.onload = script.onreadystatechange = null;
            }
        };
        head.appendChild(script);
    };

    //定义当前位置控件
    var Position = function () {
        // 默认停靠位置和偏移量
        this.defaultAnchor = BMAP_ANCHOR_TOP_LEFT;
        this.defaultOffset = new BMap.Size(0, 0);
    };


    var map = function (path, field, render, initValue, initDisplayValue, initAttributes) {
        if (map.jsLoadStatus === "unload") {
            loadJs();
        }
        if (map.jsLoadStatus !== "loaded") {
            map.waitingMapControls.push(this);
        }
        if (initDisplayValue == null || initDisplayValue === '') {
            if (field.settings != null && field.settings.displayText != null) {
                initDisplayValue = field.settings.displayText;
            }
        }

        $Control.call(this, $Control.CONTROL_TYPE_MAP, path, field, render, initValue, initDisplayValue, initAttributes);
    };

    map.DEFAULT_ZOOM_LEVEL = 17;
    map.DEFAULT_CITY_ZOOM_LEVEL = 11;
    map.jsLoadStatus = "unload";
    map.waitingMapControls = []; //等待加载的地图控件列表

    map.LABEL_STYLE = {
        "font-size": "14px",
        "border": "1px solid #ababab",
        "background-color": "white",
        "color": "#2196F3"
    };

    map.loadCallback = function () {
        map.jsLoadStatus = "loaded";


        Position.prototype = new BMap.Control();

        Position.prototype.convertedPoint = null;

        //自定义控件必须实现自己的initialize方法,并且将控件的DOM元素返回
        //在本方法中创建个div元素作为控件的容器,并将其添加到地图容器中
        Position.prototype.initialize = function (map) {
            // 创建一个DOM元素
            var div = document.createElement("div"),
                textSpan = document.createElement("span"),
                naviSpan = document.createElement("span");

            // 添加文字说明
            $(textSpan).text($$.lt("map.currentPosition", $$.lt("map.noPosition")));

            var i = document.createElement("i"),
                naviInnerSpan = document.createElement("span");
            $(i).addClass("i-icon-navigation");
            $(naviInnerSpan).text($$.lt("map.navigation"));
            $(naviSpan).append(i).append(naviInnerSpan).addClass("map_navigation").hide();


            $(div).append(textSpan).append(naviSpan).addClass("map_position");

            // 添加DOM元素到地图中
            map.getContainer().appendChild(div);
            // 将DOM元素返回

            this.textSpan = textSpan;
            this.naviSpan = naviSpan;

            var instance = this;
            $(textSpan).click(function () {
                if (instance.marker != null) {
                    map.panTo(instance.marker.getPosition());
                }
            });
            $(naviSpan).click(function () {
                if (instance.marker == null) return false;
                var openTip = function () {
                    var contentDiv = document.createElement("div"),
                        $contentDiv = $(contentDiv),
                        textSpan = document.createElement("span"),
                        $textSpan = $(textSpan);

                    $textSpan.text($$.lt("map.naviTip"));
                    $contentDiv.append(textSpan);

                    var helper = new InfoPlus.Render.CommandBarHelper({
                        content: contentDiv,
                        position: "top",
                        backgroundColor: "#fff9c4"
                    });

                    var $commandBar = $("#form_command_bar");
                    if ($commandBar.length > 0) {
                        $commandBar.append(helper.element);
                    } else {
                        $(document.body).append(helper.element);
                    }

                    helper.show($commandBar.length === 0);

                    setTimeout(function () {
                        helper.hide();
                    }, 6000);
                };


                var ua = navigator.userAgent.toLowerCase();
                isAndroid = /android/i.test(ua);
                isIos = /mac os/i.test(ua);
                var point = instance.marker.getPosition(),
                    label = instance.marker.getLabel(),
                    lat = point.lat,
                    lng = point.lng,
                    addr = label.getContent();
                var uri = [];
                if (isAndroid) {
                    // 百度地图uri api
                    uri[0] = "bdapp://map/direction?destination=" + lat + "," + lng + "&mode=walking";
                    if (instance.convertedPoint != null) {
                        // 高德地图uri api
                        uri[1] = "amapuri://route/plan/?dlat=" + instance.convertedPoint.lat + "&dlon=" + instance.convertedPoint.lng + "&dev=0&t=2";
                        // 腾讯地图uri api
                        uri[2] = "qqmap://map/routeplan?type=walk&fromcoord=CurrentLocation&tocoord=" + instance.convertedPoint.lat + "," + instance.convertedPoint.lng + "&referer=infoplusweb";
                    }
                } else if (isIos) {
                    // 百度地图uri api
                    uri[0] = "baidumap://map/direction?destination=" + lat + "," + lng + "&mode=walking";
                    if (instance.convertedPoint != null) {
                        // 高德地图uri api
                        uri[1] = "iosamap://route/plan/?dlat=" + instance.convertedPoint.lat + "&dlon=" + instance.convertedPoint.lng + "&dev=0&t=2";
                        // 腾讯地图uri api
                        uri[2] = "qqmap://map/routeplan?type=walk&fromcoord=CurrentLocation&tocoord=" + instance.convertedPoint.lat + "," + instance.convertedPoint.lng + "&referer=infoplusweb";
                        // 苹果地图uri api
                        uri[3] = "http://maps.apple.com/?daddr=" + instance.convertedPoint.lat + "," + instance.convertedPoint.lng + "&dirflg=w";
                    }
                }
                //调用uri
                if (uri.length === 0) {
                    return false;
                }

                var openUri = function (u) {
                    try {
                        window.location.href = u;
                    } catch (e) {
                    }
                };
                openTip();
                openUri(uri[0]);

                var timeFlag = [];
                if (instance.convertedPoint != null) {
                    for (var i = 1, len = uri.length; i < len; i++) {
                        timeFlag[i - 1] = setTimeout(function (index) {
                            return function () {
                                openUri(uri[index]);
                            }
                        }(i), (isIos ? 4000 : 2000) * i);
                    }
                }

                //清除定时器
                window.beforeunload = window.pagehide = window.onblur = function () {
                    for (var i = 0, len = timeFlag.length; i < len; i++) {
                        clearTimeout(timeFlag[i]);
                    }
                };

            });

            return div;
        };

        Position.prototype.setMarker = function (marker) {
            if (marker == null) {
                this.setValue(null);
            } else {
                var point = marker.getPosition(),
                    label = marker.getLabel(),
                    value = label != null ? label.getContent() : point.lng + "," + point.lat;
                this.setValue(value);

                //var result = gcoord.transform(getPointParam(point.lng, point.lat), gcoord.BD09, gcoord.GCJ02);

                var result = InfoPlus.CoordTransform.bdtogcj(point.lng, point.lat);
                this.convertedPoint = new BMap.Point(result[0], result[1]);
                /*
                var instance = this;
                var convertor = new BMap.Convertor();
                convertor.translate([point], 5, 3, function (data) {
                    if (data.status === 0) {
                        instance.convertedPoint = new BMap.Point(data.points[0].lng, data.points[0].lat);
                    }
                })
                */

            }
            this.marker = marker;
        };

        Position.prototype.setValue = function (value) {
            $(this.textSpan).text($$.lt("map.currentPosition", value == null ? $$.lt("map.noPosition") : value));
            //移动版显示导航
            if (!$IU.isEmptyStr(value) && $$.MOBILE) {
                $(this.naviSpan).show();
            } else {
                $(this.naviSpan).hide();
            }
        };

        Position.prototype.addEvent = function (event, callback) {
            //$(this.textSpan).on(event, callback);
        };

        var controls = map.waitingMapControls;
        for (var i = 0, len = controls.length; i < len; i++) {
            var mapControl = controls[i];
            mapControl.initMap();

        }

    };

    map.prototype = $.extend(new $Controls.Control(), {
        compatibleFieldTypes: [$Control.DATA_TYPE_LOCATION],
        ignoreClass: true,
        autoTriggerFieldChangeEvent: false,
        allowFocus: false,
        name: "map",
        //elementClassName: "infoplus_mapControl",
        hasHiddenElement: true,
        map: null,//百度map对象
        currentMarker: null,//当前地图标记点
        currentPosition: null,//当前位置显示文字
        markerClicking: false,//是否正在点击marker

        getMapPoint: function (value) {
            if (!$IU.isString(value) || $IU.isEmptyStr(value)) return null;
            var values = value.split(",");
            if (values.length < 2) return null;
            var lng = parseFloat(values[0]),
                lat = parseFloat(values[1]);
            if (isNaN(lng) || isNaN(lat)) return null;
            //WGS到百度坐标转换
            //var result = gcoord.transform(getPointParam(lng, lat), gcoord.WGS84, gcoord.BD09);
            var result = InfoPlus.CoordTransform.wgstobd(lng, lat);
            return new BMap.Point(result[0], result[1]);
        },

        getMapZoomLevel: function (value) {
            if (!$IU.isString(value) || $IU.isEmptyStr(value)) return map.DEFAULT_ZOOM_LEVEL;
            var values = value.split(",");
            if (values.length !== 3) return map.DEFAULT_ZOOM_LEVEL;
            var z = parseInt(values[2], 10);
            if (isNaN(z)) return map.DEFAULT_ZOOM_LEVEL;
            if (z > 19 || z < 0) return map.DEFAULT_ZOOM_LEVEL;
            return z;
        },

        setMapMarker: function (marker, fromInit) {
            if (marker != null) {
                var point = marker.getPosition(),
                    label = marker.getLabel();
                this.currentPosition.setMarker(marker);
                this.currentMarker = marker;
                //百度坐标到WGS转换
                //var result = gcoord.transform(getPointParam(point.lng, point.lat), gcoord.BD09, gcoord.WGS84);
                var result = InfoPlus.CoordTransform.bdtowgs(point.lng, point.lat);
                this.setValue(result[0] + "," + result[1], label != null ? label.getContent() : "", fromInit, null, true);
            } else {
                //this.currentPosition.setValue(null);
                this.currentPosition.setMarker(null);
                this.currentMarker = null;
                this.setValue("", "", fromInit, null, true);
            }

        },

        createInfoWindow: function (marker, sugs) {
            var instance = this;
            var infoDom = document.createElement("div"),
                labelDiv = document.createElement("div"),
                inputDiv = document.createElement("div"),
                confirmDiv = document.createElement("div"),
                sugUl = document.createElement("ul"),
                input = document.createElement("input"),
                okLink = document.createElement("a"),
                deleteLink;

            $(labelDiv).text($$.lt("map.selectCurrentPositionTitle")).addClass("map_info_title");
            $(input).attr("type", "text").attr("maxLength", "50").addClass("labelInput");
            if (marker.getLabel() != null) {
                $(input).val(marker.getLabel().content);
                deleteLink = document.createElement("a");
                $(deleteLink).text($$.lt("map.deletePosition")).attr("href", "#").addClass("deleteLink").click(function () {
                    $IU.confirmBox($$.lt("map.confirmDelete", marker.getLabel().content), null, $$.lt("common.ok"), 300, function () {
                        instance.map.removeOverlay(marker);
                        instance.setMapMarker(null, false);
                    });
                });
                $(confirmDiv).append(deleteLink);
            } else {
                if (sugs.length > 0) {
                    $(input).val(sugs[0]);
                }
            }

            var useCurrentPosition = function () {
                var content = $(input).val();
                if ($IU.trimString(content) !== '') {
                    marker.closeInfoWindow();
                    if (marker.getLabel() == null) {
                        var label = new BMap.Label(content, {
                            offset: new BMap.Size(15, -22)
                        });
                        label.setStyle(map.LABEL_STYLE);
                        marker.setLabel(label);
                    } else {
                        marker.getLabel().setContent(content);
                    }
                    if (instance.currentMarker != null && instance.currentMarker !== marker) {
                        instance.map.removeOverlay(instance.currentMarker);
                    }
                    instance.setMapMarker(marker, false);
                } else {
                    $IU.messageBox(null, $$.lt("map.inputLabel"), null, 300);
                }
            };

            //确定使用该位置
            $(okLink).text($$.lt("map.usePoint")).attr("href", "#").addClass("okLink").click(function () {
                useCurrentPosition();
                return false;
            });
            $(input).keypress(function (event) {
                if (event.keyCode === 13) {
                    useCurrentPosition();
                    return false;
                }
            });
            $(inputDiv).append(input);
            $(sugUl).addClass("map_sug_list");
            for (var i = 0, len = sugs.length; i < len; i++) {
                var li = document.createElement("li"),
                    span = document.createElement("span");
                $(span).text(sugs[i]).attr("title", "点击选择");
                $(li).append(span);
                $(sugUl).append(li);
            }
            $(confirmDiv).append(okLink).addClass("confirmDiv");
            $(infoDom).append(labelDiv).append(inputDiv).append(sugUl).append(confirmDiv).addClass("map_info_window");
            $(sugUl).on("click", "li", function () {
                $(input).val($(this).children("span").text());
            });

            return infoDom;

        },

        addMarker: function (point, label, sugs, clear, isAuto) {
            var instance = this;
            var map = this.map;
            if (clear !== false) {
                map.clearOverlays();
            } else {
                var allOverlay = map.getOverlays();
                for (var i = 0; i < allOverlay.length; i++) {
                    if (allOverlay[i] !== this.currentMarker) {
                        map.removeOverlay(allOverlay[i]);
                    }
                }
            }
            if (isAuto) {
                label = new BMap.Label($$.lt("map.autoPosition"), {
                    offset: new BMap.Size(15, -22)
                });
                label.setStyle(map.LABEL_STYLE);
            }
            var marker = new BMap.Marker(point, {
                enableClicking: true
            });

            if (this.isWritable()) {
                marker.addEventListener("click", function () {
                    if (instance.isDynamicReadonly()) return false;
                    instance.markerClicking = true;
                    //clear others
                    var allOverlay = map.getOverlays();
                    for (var i = 0; i < allOverlay.length; i++) {
                        if (allOverlay[i] !== this) {
                            map.removeOverlay(allOverlay[i]);
                        }
                    }

                    if (sugs != null) {
                        marker.openInfoWindow(new BMap.InfoWindow(instance.createInfoWindow(marker, sugs), {
                            enableCloseOnClick: false
                        }));
                    } else {
                        var geoc = new BMap.Geocoder();
                        geoc.getLocation(this.getPosition(), function (rs) {
                            var sugs = instance.getSugs(rs);
                            marker.openInfoWindow(new BMap.InfoWindow(instance.createInfoWindow(marker, sugs), {
                                enableCloseOnClick: false
                            }));
                        }, {poiRadius: 50});
                    }
                    return false;
                });
            }

            if (label != null) {
                marker.setLabel(label);
            }

            map.addOverlay(marker);

            return marker;
        },

        getSugs: function (rs) {
            var sugs = [];
            if (rs.addressComponents.streetNumber !== '') {
                sugs.push(rs.address);
            } else {
                if (rs.addressComponents.street || '' !== '') {
                    sugs.push(rs.addressComponents.street);
                }
            }

            var pois = rs.surroundingPois;
            for (var i = 0, len = pois.length; i < len; i++) {
                sugs.push(pois[i].title);
            }
            return sugs;
        },

        initMap: function () {
            var instance = this;
            //var markerClicking = false;


            //创建地图实例
            var bMap = new BMap.Map(this.element.getAttribute("id"));
            this.map = bMap;

            var positionControl = new Position();
            // 添加到地图当中
            bMap.addControl(positionControl);
            positionControl.addEvent("click", function () {
                if (instance.currentMarker != null) {
                    bMap.panTo(instance.currentMarker.getPosition());
                }
            });
            this.currentPosition = positionControl;


            var navigation = new BMap.NavigationControl({
                anchor: BMAP_ANCHOR_BOTTOM_RIGHT,
                type: BMAP_NAVIGATION_CONTROL_SMALL

            });
            bMap.addControl(navigation);


            var getLocationInfo = function (locationPoint, fromInit) {

                var options = {poiRadius: 50};
                if ($$.MOBILE) {
                    options['numPois'] = 5;
                }

                var geoc = new BMap.Geocoder();
                geoc.getLocation(locationPoint, function (rs) {
                    var sugs = instance.getSugs(rs);
                    var marker = instance.addMarker(locationPoint, null, sugs, false, fromInit);
                    var infoWindow = new BMap.InfoWindow(instance.createInfoWindow(marker, sugs), {
                        enableCloseOnClick: false
                    });
                    infoWindow.enableAutoPan();

                    infoWindow.addEventListener("clickclose", function () {
                        if (marker !== instance.currentMarker) {
                            bMap.removeOverlay(marker);
                        }
                    });
                    marker.openInfoWindow(infoWindow);
                    if (fromInit) {
                        instance.setMapMarker(marker, true);
                    }

                }, options);
            };


            var useDefaultLocation = function () {
                //定位失败，采用系统缺省中心点
                var useDefaultLocation = false;
                if (!$IU.isEmptyStr($$.params.defaultLocation)) {
                    var defaultPoint = instance.getMapPoint($$.params.defaultLocation);
                    if (defaultPoint != null) {
                        zoomValue = instance.getMapZoomLevel($$.params.defaultLocation);
                        bMap.centerAndZoom(defaultPoint, zoomValue);
                        useDefaultLocation = true;
                    }
                }
                //如果没有设置缺省中心点，用所在城市作为中心点
                if (!useDefaultLocation) {
                    var myCity = new BMap.LocalCity();
                    myCity.get(function (result) {
                        var cityName = result.name;
                        bMap.centerAndZoom(cityName, map.DEFAULT_CITY_ZOOM_LEVEL);
                    });
                }
            };

            var point = this.getMapPoint(this.initValue);
            if (point != null) {
                var zoomValue = this.getMapZoomLevel(this.initValue);
                //这里延时是为了让dom渲染完，dom都挂上去了，百度地图的centerAndZoom才能保证将point设置为地图中心点
                setTimeout(function () {
                    bMap.centerAndZoom(point, zoomValue);
                }, 1000);
                var label;
                if (!$IU.isEmptyStr(this.initDisplayValue)) {
                    label = new BMap.Label(this.initDisplayValue, {
                        offset: new BMap.Size(15, -22)
                    });
                    label.setStyle(map.LABEL_STYLE);
                }
                var marker = this.addMarker(point, label, null, false, false);
                this.setMapMarker(marker, true);
            } else {
                var geolocation = new BMap.Geolocation();
                //开启SDK辅助定位
                geolocation.enableSDKLocation();
                geolocation.getCurrentPosition(function (r) {
                    switch (this.getStatus()) {
                        case BMAP_STATUS_SUCCESS:
                            var initPoint = new BMap.Point(r.point.lng, r.point.lat);
                            bMap.centerAndZoom(initPoint, map.DEFAULT_ZOOM_LEVEL);
                            if (instance.isWritable()) {
                                getLocationInfo(r.point, true);
                            }
                            break;
                        case BMAP_STATUS_TIMEOUT:
                            $IU.messageBox(null, $$.lt("map.geolocation.timeout"), null, 300);
                            break;
                        case BMAP_STATUS_PERMISSION_DENIED:
                            var foundBaiduIframe = false,
                                $iframes = $("iframe");
                            for (var i = 0, len = $iframes.length; i < len; i++) {
                                if ($iframes[i].src.indexOf("baidu.com") !== -1) {
                                    foundBaiduIframe = true;
                                    break;
                                }
                            }
                            if (foundBaiduIframe && navigator.geolocation != null) {
                                navigator.geolocation.getCurrentPosition(function (position) {
                                    //var result = gcoord.transform(getPointParam(position.coords.longitude, position.coords.latitude), gcoord.WGS84, gcoord.BD09);
                                    var result = InfoPlus.CoordTransform.wgstobd(position.coords.longitude, position.coords.latitude);
                                    var currentPoint = new BMap.Point(result[0], result[1]);
                                    bMap.centerAndZoom(currentPoint, map.DEFAULT_ZOOM_LEVEL);
                                    if (instance.isWritable()) {
                                        getLocationInfo(currentPoint, true);
                                    }
                                }, function (error) {
                                    useDefaultLocation();
                                }, {
                                    enableHighAccuracy: true,
                                    maximumAge: 0
                                });
                            } else {
                                $IU.messageBox(null, $$.lt("map.geolocation.denied"), null, 300);
                                useDefaultLocation();
                            }
                            break;
                        case BMAP_STATUS_UNKNOWN_LOCATION:
                            $IU.messageBox(null, $$.lt("map.geolocation.unknown"), null, 300);
                            break;
                    }
                }, {
                    enableHighAccuracy: true
                });
            }

            if (instance.isWritable()) {

                var mapClick = function (map, point) {
                    getLocationInfo(point, false);
                };
                if ($$.MOBILE) {
                    bMap.addEventListener("touchstart", function (e) {
                        if (instance.isDynamicReadonly()) return false;
                        if (instance.markerClicking) {
                            instance.markerClicking = false;
                            return false;
                        }
                        instance.touchPoint = e.pixel;
                    });
                    bMap.addEventListener("touchend", function (e) {
                        if (instance.isDynamicReadonly()) return false;
                        if (instance.markerClicking) {
                            instance.markerClicking = false;
                            return false;
                        }
                        if (instance.touchPoint != null && Math.abs(instance.touchPoint.x - e.pixel.x) < 3 && Math.abs(instance.touchPoint.y - e.pixel.y) < 3) {
                            mapClick(this, e.point);
                        }
                        instance.touchPoint = null;
                    });
                } else {
                    bMap.addEventListener("click", function (e) {

                        if (instance.isDynamicReadonly()) return false;
                        if (instance.markerClicking) {
                            instance.markerClicking = false;
                            return false;
                        }
                        mapClick(this, e.point);
                    });
                }
            }
        },

        //override methods
        createElement: function () {
            var mapContainer = document.createElement("div"),
                $mapContainer = $(mapContainer);
            this.controlContainer = mapContainer;

            $mapContainer.addClass("infoplus_mapControlContainer");
            var element = document.createElement("div");
            //this.createHiddenElement(element, mapContainer);

            $mapContainer.append(element);
            return element;
        },

        setMapValue: function (value, displayValue) {

            var point = this.getMapPoint(value);
            if (point != null) {
                this.map.centerAndZoom(point, this.map.getZoom());
                var label;
                if (!$IU.isEmptyStr(displayValue)) {
                    label = new BMap.Label(displayValue, {
                        offset: new BMap.Size(15, -22)
                    });
                    label.setStyle(map.LABEL_STYLE);
                }
                var marker = this.addMarker(point, label, label != null ? [label.getContent()] : [""], true, false);
                this.setMapMarker(marker, false);
            }
        },

        setValue: function (fieldValue, fieldDisplayValue, fromInit, attributes, fromMap) {
            if (map.jsLoadStatus !== "loaded" || this.map == null) return;

            if (fieldValue == null) fieldValue = '';
            var fireChangeEvent = !(!!fromInit) && this.shouldFireChangeEvent(fieldValue);
            var $element = $(this.element);
            var hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT);

            if (map.jsLoadStatus === "loaded" && fromMap !== true) {
                if (fieldDisplayValue == null) {
                    var values = fieldValue.split(",");
                    if (values.length > 2) {
                        fieldDisplayValue = values[2];
                        fieldValue = [values[0], values[1]].join(",");
                    }
                }
                this.setMapValue(fieldValue, fieldDisplayValue);
            }

            hiddenInput.value = fieldValue;
            $element.data($Control.DATA_DISPLAY_VALUE, fieldDisplayValue);
            this.setAttributes(attributes);
            if (fireChangeEvent) {
                setTimeout(function () {
                    $(hiddenInput).change();
                }, 0);
            }

        },

        getValue: function () {
            if (this.field == null || this.element == null) return "";
            var $element = $(this.element),
                hiddenInput = $element.data($Control.DATA_ORIGIN_INPUT);

            var value = hiddenInput.value;
            if (!$IU.isEmptyStr(value) && this.map != null) {
                value = value + "," + this.map.getZoom();
            }
            var displayValue = $element.data($Control.DATA_DISPLAY_VALUE);
            //value should add zoom level
            return new $Controls.Data.ValuePair(value, displayValue);
        },

        specialSetting: function () {
            var instance = this;
            if (map.jsLoadStatus === "loaded") {
                setTimeout(function () {
                    instance.initMap();
                }, 100);
            }
        }
    });


    define("InfoPlus.Controls.Map", map);

})(window);
(function (window, undefined) {

    var helpTopic = ['index', 'input', 'toolbar', 'navMenu', 'end'];

    var removeAllBlock = function () {
        $(".help_block").remove();
    };

    var getLeftByRect = function (x, no, rect1, rect2) {
        if (no === 1) {
            return (x === 0 ? 0 : (x === 1 ? rect1.left : rect1.left + rect1.width));
        } else {
            return (x === 0 ? 0 : (x === 1 ? rect2.left : rect2.left + rect2.width));
        }
    };

    var getTopByRect = function (y, no, rect1, rect2) {
        if (no === 1) {
            return (y === 0 ? 0 : (y === 1 ? rect1.top : rect1.top + rect1.height));
        } else {
            return (y === 0 ? rect2.top : rect2.top + rect2.height);
        }
    };

    var getWidthByRect = function (x, no, rect1, rect2) {
        if (no === 1) {
            return (x === 0 ? rect1.left : (x === 1 ? rect1.width : (screen.width > $(document).width() ? screen.width : $(document).width()) - rect1.left - rect1.width));
        } else {
            return (x === 0 ? rect2.left : (x === 1 ? rect2.width : (screen.width > $(document).width() ? screen.width : $(document).width()) - rect2.left - rect2.width));
        }
    };

    var getHeightByRect = function (y, no, rect1, rect2) {
        if (no === 1) {
            return (y === 0 ? rect1.top : (y === 1 ? rect1.height : rect2.top - rect1.top - rect1.height));
        } else {
            return (y === 0 ? rect2.height : (screen.height > $(document).height() ? screen.height : $(document).height() - rect2.top - rect2.height));
        }
    };

    var getLeft = function (x, left, width) {
        return (x === 0 ? 0 : (x === 1 ? left : left + width)) + "px";
    };

    var getTop = function (y, top, height) {
        return (y === 0 ? 0 : (y === 1 ? top : top + height)) + "px";
    };

    var getWidth = function (x, left, width) {
        return (x === 0 ? left : (x === 1 ? width : (screen.width > $(document).width() ? screen.width : $(document).width()) - left - width)) + "px";
    };

    var getHeight = function (y, top, height) {
        return (y === 0 ? top : (y === 1 ? height : (screen.height > $(document).height() ? screen.height : $(document).height() ) - top - height)) + "px";
    };

    var maskTowRect = function (rect1, rect2, step) {
        removeAllBlock();
        $(document.body).css("overflow", "hidden");

        for (var x = 0; x < 3; x++) {
            for (var y = 0; y < 3; y++) {
                var d = document.createElement("div");
                var $d = $(d);
                $d.attr("id", "help_block_1_" + x + "_" + y).addClass("help_block");
                if (x === 1 && y === 1) {
                    $d.addClass("help_highlight");
                } else {
                    $d.addClass("help_background");
                }
                $d.css("left", getLeftByRect(x, 1, rect1, rect2) + "px")
                    .css("top", getTopByRect(y, 1, rect1, rect2) + "px")
                    .css("width", getWidthByRect(x, 1, rect1, rect2) + "px")
                    .css("height", getHeightByRect(y, 1, rect1, rect2) + "px");
                $d.data("step", step);
                document.body.appendChild(d);
            }
        }

        for (x = 0; x < 3; x++) {
            for (y = 0; y < 2; y++) {
                d = document.createElement("div");
                $d = $(d);
                $d.attr("id", "help_block_2_" + x + "_" + y).addClass("help_block");
                if (x === 1 && y === 0) {
                    $d.addClass("help_highlight");
                } else {
                    $d.addClass("help_background");
                }
                $d.css("left", getLeftByRect(x, 2, rect1, rect2) + "px")
                    .css("top", getTopByRect(y, 2, rect1, rect2) + "px")
                    .css("width", getWidthByRect(x, 2, rect1, rect2) + "px")
                    .css("height", getHeightByRect(y, 2, rect1, rect2) + "px");
                $d.data("step", step);
                document.body.appendChild(d);
            }
        }
        $(".help_block").unbind().click(function () {
            nextStepHelp(step + 1);
        });

    };

    var mask = function (left, top, width, height, step) {
        removeAllBlock();

        $(document.body).css("overflow", "hidden");
        for (var x = 0; x < 3; x++) {
            for (var y = 0; y < 3; y++) {
                var d = document.createElement("div");
                var $d = $(d);
                $d.attr("id", "help_block_" + x + "_" + y).addClass("help_block");
                if (x === 1 && y === 1) {
                    $d.addClass("help_highlight");
                } else {
                    $d.addClass("help_background");
                }
                $d.css("left", getLeft(x, left, width))
                    .css("top", getTop(y, top, height))
                    .css("width", getWidth(x, left, width))
                    .css("height", getHeight(y, top, height));
                $d.data("step", step);
                document.body.appendChild(d);
            }
        }

        $(".help_block").unbind().click(function () {
            nextStepHelp(step + 1);
        });

    };

    var adjustMask = function (left, top, width, height) {
        for (var x = 0; x < 3; x++) {
            for (var y = 0; y < 3; y++) {
                $("#help_block_" + x + "_" + y)
                    .css("left", getLeft(x, left, width))
                    .css("top", getTop(y, top, height))
                    .css("width", getWidth(x, left, width))
                    .css("height", getHeight(y, top, height));
            }
        }
    };

    var adjustTowRectMask = function (rect1, rect2) {
        for (var x = 0; x < 3; x++) {
            for (var y = 0; y < 3; y++) {
                $("#help_block_1_" + x + "_" + y)
                    .css("left", getLeftByRect(x, 1, rect1, rect2) + "px")
                    .css("top", getTopByRect(y, 1, rect1, rect2) + "px")
                    .css("width", getWidthByRect(x, 1, rect1, rect2) + "px")
                    .css("height", getHeightByRect(y, 1, rect1, rect2) + "px");
            }
        }

        for (x = 0; x < 3; x++) {
            for (y = 0; y < 2; y++) {
                $("#help_block_2_" + x + "_" + y)
                    .css("left", getLeftByRect(x, 2, rect1, rect2) + "px")
                    .css("top", getTopByRect(y, 2, rect1, rect2) + "px")
                    .css("width", getWidthByRect(x, 2, rect1, rect2) + "px")
                    .css("height", getHeightByRect(y, 2, rect1, rect2) + "px");
            }
        }
    };

    var adjustHelpContentPosition = function (left, right, top, bottom) {
        var $help = $("#help_content");
        if (left !== undefined) {
            $help.css("left", left + "px");
        }
        if (right !== undefined) {
            $help.css("right", right + "px");
        }
        if (top !== undefined) {
            $help.css("top", top + "px");
        }
        if (bottom !== undefined) {
            $help.css("bottom", bottom + "px");
        }
    };


    var showHelp = function (step, left, right, top, bottom) {
        var $help = $("#help_content"),
            topic = helpTopic[step];
        $help.attr("class", "").css("left", "").css("top", "").css("right", "").css("bottom", "").hide();
        adjustHelpContentPosition(left, right, top, bottom);
        $help.addClass("help_" + topic).data("step", step).fadeIn(1500);
        $help.unbind().click(function () {
            nextStepHelp(step + 1);
        });
        $help.show();
    };

    var resizeHelpMask = function () {

    };

    var nextStepHelp = function (step) {
        $(window).off("resize", resizeHelpMask);
        var topic = helpTopic[step],
            $navMenu = $("#nav_menu"),
            $renderHolder = $("#form_holder"),
            $titleDescription = $("#title_description");
        if (!$titleDescription.is(":visible")) {
            $titleDescription = $("#title_description_short");
        }
        var getMaskArea = function () {
            var $commandBar = $("#form_command_bar");
            switch (topic) {
                case 'input':
                    //填表区域
                    return [
                        {
                            left: $titleDescription.offset().left,
                            top: $titleDescription.offset().top,
                            width: $titleDescription.width(),
                            height: $titleDescription.height(),
                            helpContentLeft: $renderHolder.offset().left,
                            helpContentTop: 0
                        },
                        {
                            left: $renderHolder.offset().left,
                            top: $renderHolder.offset().top,
                            width: $renderHolder.width(),
                            height: $renderHolder.height()
                        }
                    ];
                    break;
                case 'toolbar':
                    //工具栏
                    return {
                        left: $commandBar.offset().left,
                        top: $commandBar.offset().top,
                        width: $commandBar.width(),
                        height: $commandBar.height(),
                        helpContentLeft: $commandBar.offset().left,
                        helpContentTop: $commandBar.offset().top + $commandBar.height()
                    };
                    break;
                case 'inputArea':
                    //填表区域
                    return {
                        left: $renderHolder.offset().left,
                        top: $renderHolder.offset().top,
                        width: $renderHolder.width(),
                        height: $renderHolder.height(),
                        helpContentLeft: $renderHolder.offset().left,
                        helpContentTop: 0
                    };
                    break;
                case 'numberArea':
                    //流水号

                    return {
                        left: $titleDescription.offset().left,
                        top: $titleDescription.offset().top,
                        width: $titleDescription.width(),
                        height: $titleDescription.height(),
                        helpContentRight: 20,
                        helpContentTop: $titleDescription.offset().top + $titleDescription.height()
                    };
                    break;
                case 'command':
                    var $buttons = $commandBar.find("li.command_button").filter(":visible"),
                        left = 0, width = 0;
                    if ($buttons.length > 0) {
                        left = $($buttons[0]).offset().left;
                        width = $($buttons[$buttons.length - 1]).offset().left - left + $($buttons[$buttons.length - 1]).width();
                    } else {
                        var $menu = $commandBar.find("#command_menu");
                        left = $menu.offset().left;
                        width = $menu.width();
                    }
                    var top = $commandBar.offset().top,
                        height = $commandBar.height();
                    return {
                        left: left,
                        top: top,
                        width: width,
                        height: height,
                        helpContentLeft: left,
                        helpContentTop: top + height + 5
                    };
                    break;
                case 'save':
                    $buttons = $commandBar.find("li.tool_button");
                    left = $($buttons[$buttons.length - 1]).offset().left;
                    width = $($buttons[0]).offset().left - $($buttons[$buttons.length - 1]).offset().left + $($buttons[$buttons.length - 1]).width();
                    height = $commandBar.height();
                    top = $commandBar.offset().top;
                    return {
                        left: left,
                        top: top,
                        width: width,
                        height: height,
                        helpContentRight: 20,
                        helpContentTop: top + height + 5
                    };
                    break;
                case 'navMenu':
                    var $titleIcon = $("#title_icon");
                    return {
                        left: $titleIcon.offset().left,
                        top: $titleIcon.offset().top,
                        width: $titleIcon.width(),
                        height: $titleIcon.height(),
                        helpContentLeft: 0,
                        helpContentTop: $titleIcon.offset().top + $titleIcon.height() + 5
                    };
                    break;
                case 'navContent':
                    return {
                        left: 0,
                        top: $navMenu.offset().top,
                        width: $navMenu.width(),
                        height: $navMenu.height(),
                        helpContentLeft: 0,
                        helpContentTop: $navMenu.offset().top
                    };
                    break;
            }
        };

        if (topic === 'end') {
            $("#help_content").hide();
            $(".help_block").remove();
            $(document).scrollTop(0);
            $(document.body).css("overflow", "");
            $(document).off("keypress", blockKeyPress);
        } else {
            if (topic === 'navContent') {
                $navMenu.show();
            }
            if (topic === 'remark') {
                $navMenu.hide();
                if ($(document.body).height() - $(window).height() > 0) {
                    $(document).scrollTop($(document.body).height() - $(window).height());
                } else {
                    $(document).scrollTop(0);
                }
            }

            var area = getMaskArea();
            if (Object.prototype.toString.call(area) !== '[object Array]') {
                mask(area.left, area.top, area.width, area.height, step);
                showHelp(step, area.helpContentLeft, area.helpContentRight, area.helpContentTop, area.helpContentBottom);
            } else {
                maskTowRect(area[0], area[1], step);
                showHelp(step, area[0].helpContentLeft, area[0].helpContentRight, area[0].helpContentTop, area[0].helpContentBottom);
            }


            resizeHelpMask = function () {
                var resizeArea = getMaskArea();
                if (Object.prototype.toString.call(area) !== '[object Array]') {
                    adjustMask(resizeArea.left, resizeArea.top, resizeArea.width, resizeArea.height);
                    adjustHelpContentPosition(resizeArea.helpContentLeft, resizeArea.helpContentRight, resizeArea.helpContentTop, resizeArea.helpContentBottom);
                } else {
                    adjustTowRectMask(resizeArea[0], resizeArea[1]);
                    adjustHelpContentPosition(resizeArea[0].helpContentLeft, resizeArea[0].helpContentRight, resizeArea[0].helpContentTop, resizeArea[0].helpContentBottom);
                }

                //$("#help_content").css("left", resizeArea.helpContentLeft).css("top", resizeArea.helpContentTop);
            };

            $(window).resize(resizeHelpMask);

        }
    };

    var blockKeyPress = function () {
        return false;
    };

    window.loadHelp = function () {
        if (!$$.params.showTutorial) return;
        $(document).keypress(blockKeyPress);
        $('html, body').scrollTop(0).scrollLeft(0);
        mask(0, 0, 0, 0, 0);
        showHelp(0);
    };

})(window);
